!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	test/googletest-shuffle-test_.cc	/^class A : public Test {};$/;"	c	namespace:__anon34	file:
ACTIVE_TESTS	test/googletest-filter-unittest.py	/^ACTIVE_TESTS = [$/;"	v
ACTIVE_TESTS	test/googletest-shuffle-test.py	/^ACTIVE_TESTS = []$/;"	v
ADD_FAILURE	include/gtest/gtest.h	/^#define ADD_FAILURE(/;"	d
ADD_FAILURE_AT	include/gtest/gtest.h	/^#define ADD_FAILURE_AT(/;"	d
AHashTable	test/gtest_unittest.cc	/^struct AHashTable {$/;"	s	file:
ALL_TESTS	test/googletest-shuffle-test.py	/^ALL_TESTS = []$/;"	v
ALSO_RUN_DISABLED_TESTS_FLAG	test/googletest-filter-unittest.py	/^ALSO_RUN_DISABLED_TESTS_FLAG = 'gtest_also_run_disabled_tests'$/;"	v
ASSERT_ANY_THROW	include/gtest/gtest.h	/^#define ASSERT_ANY_THROW(/;"	d
ASSERT_DEATH	include/gtest/gtest-death-test.h	/^# define ASSERT_DEATH(/;"	d
ASSERT_DEATH_IF_SUPPORTED	include/gtest/gtest-death-test.h	/^# define ASSERT_DEATH_IF_SUPPORTED(/;"	d
ASSERT_DEBUG_DEATH	include/gtest/gtest-death-test.h	/^#  define ASSERT_DEBUG_DEATH(/;"	d
ASSERT_DOUBLE_EQ	include/gtest/gtest.h	/^#define ASSERT_DOUBLE_EQ(/;"	d
ASSERT_EQ	include/gtest/gtest.h	/^# define ASSERT_EQ(/;"	d
ASSERT_EXIT	include/gtest/gtest-death-test.h	/^# define ASSERT_EXIT(/;"	d
ASSERT_FALSE	include/gtest/gtest.h	/^#define ASSERT_FALSE(/;"	d
ASSERT_FLOAT_EQ	include/gtest/gtest.h	/^#define ASSERT_FLOAT_EQ(/;"	d
ASSERT_GE	include/gtest/gtest.h	/^# define ASSERT_GE(/;"	d
ASSERT_GT	include/gtest/gtest.h	/^# define ASSERT_GT(/;"	d
ASSERT_HRESULT_FAILED	include/gtest/gtest.h	/^# define ASSERT_HRESULT_FAILED(/;"	d
ASSERT_HRESULT_SUCCEEDED	include/gtest/gtest.h	/^# define ASSERT_HRESULT_SUCCEEDED(/;"	d
ASSERT_LE	include/gtest/gtest.h	/^# define ASSERT_LE(/;"	d
ASSERT_LT	include/gtest/gtest.h	/^# define ASSERT_LT(/;"	d
ASSERT_NE	include/gtest/gtest.h	/^# define ASSERT_NE(/;"	d
ASSERT_NEAR	include/gtest/gtest.h	/^#define ASSERT_NEAR(/;"	d
ASSERT_NO_FATAL_FAILURE	include/gtest/gtest.h	/^#define ASSERT_NO_FATAL_FAILURE(/;"	d
ASSERT_NO_THROW	include/gtest/gtest.h	/^#define ASSERT_NO_THROW(/;"	d
ASSERT_PRED1	include/gtest/gtest_pred_impl.h	/^#define ASSERT_PRED1(/;"	d
ASSERT_PRED1Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate1Test ASSERT_PRED1Test;$/;"	t	file:
ASSERT_PRED2	include/gtest/gtest_pred_impl.h	/^#define ASSERT_PRED2(/;"	d
ASSERT_PRED2Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate2Test ASSERT_PRED2Test;$/;"	t	file:
ASSERT_PRED3	include/gtest/gtest_pred_impl.h	/^#define ASSERT_PRED3(/;"	d
ASSERT_PRED3Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate3Test ASSERT_PRED3Test;$/;"	t	file:
ASSERT_PRED4	include/gtest/gtest_pred_impl.h	/^#define ASSERT_PRED4(/;"	d
ASSERT_PRED4Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate4Test ASSERT_PRED4Test;$/;"	t	file:
ASSERT_PRED5	include/gtest/gtest_pred_impl.h	/^#define ASSERT_PRED5(/;"	d
ASSERT_PRED5Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate5Test ASSERT_PRED5Test;$/;"	t	file:
ASSERT_PRED_FORMAT1	include/gtest/gtest_pred_impl.h	/^#define ASSERT_PRED_FORMAT1(/;"	d
ASSERT_PRED_FORMAT1Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate1Test ASSERT_PRED_FORMAT1Test;$/;"	t	file:
ASSERT_PRED_FORMAT2	include/gtest/gtest_pred_impl.h	/^#define ASSERT_PRED_FORMAT2(/;"	d
ASSERT_PRED_FORMAT2Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate2Test ASSERT_PRED_FORMAT2Test;$/;"	t	file:
ASSERT_PRED_FORMAT3	include/gtest/gtest_pred_impl.h	/^#define ASSERT_PRED_FORMAT3(/;"	d
ASSERT_PRED_FORMAT3Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate3Test ASSERT_PRED_FORMAT3Test;$/;"	t	file:
ASSERT_PRED_FORMAT4	include/gtest/gtest_pred_impl.h	/^#define ASSERT_PRED_FORMAT4(/;"	d
ASSERT_PRED_FORMAT4Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate4Test ASSERT_PRED_FORMAT4Test;$/;"	t	file:
ASSERT_PRED_FORMAT5	include/gtest/gtest_pred_impl.h	/^#define ASSERT_PRED_FORMAT5(/;"	d
ASSERT_PRED_FORMAT5Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate5Test ASSERT_PRED_FORMAT5Test;$/;"	t	file:
ASSERT_STRCASEEQ	include/gtest/gtest.h	/^#define ASSERT_STRCASEEQ(/;"	d
ASSERT_STRCASENE	include/gtest/gtest.h	/^#define ASSERT_STRCASENE(/;"	d
ASSERT_STREQ	include/gtest/gtest.h	/^#define ASSERT_STREQ(/;"	d
ASSERT_STRNE	include/gtest/gtest.h	/^#define ASSERT_STRNE(/;"	d
ASSERT_THROW	include/gtest/gtest.h	/^#define ASSERT_THROW(/;"	d
ASSERT_TRUE	include/gtest/gtest.h	/^#define ASSERT_TRUE(/;"	d
ATypeParamDeathTest	test/googletest-output-test_.cc	/^TYPED_TEST_SUITE_P(ATypeParamDeathTest);$/;"	v
ATypeParamDeathTest	test/googletest-output-test_.cc	/^class ATypeParamDeathTest : public testing::Test {$/;"	c	file:
ATypedDeathTest	test/googletest-output-test_.cc	/^class ATypedDeathTest : public testing::Test {$/;"	c	file:
Abort	src/gtest-death-test.cc	/^void DeathTestImpl::Abort(AbortReason reason) {$/;"	f	class:testing::internal::DeathTestImpl
Abort	src/gtest-port.cc	/^void Abort() {$/;"	f	namespace:testing::internal::posix
AbortArgument	test/googletest-death-test-test.cc	/^  DeathTest::AbortReason AbortArgument(int n) const {$/;"	f	class:__anon28::MockDeathTestFactory
AbortCalls	test/googletest-death-test-test.cc	/^  size_t AbortCalls() const { return abort_args_.size(); }$/;"	f	class:__anon28::MockDeathTestFactory
AbortReason	include/gtest/internal/gtest-death-test-internal.h	/^  enum AbortReason {$/;"	g	class:testing::internal::DeathTest
AbstractRpcServer	scripts/upload.py	/^class AbstractRpcServer(object):$/;"	c
AbstractSocketWriter	src/gtest-internal-inl.h	/^  class AbstractSocketWriter {$/;"	c	class:testing::internal::StreamingListener
Accumulate	test/gtest_unittest.cc	/^static void Accumulate(int n) { g_sum += n; }$/;"	f	namespace:__anon40
AdHocTest	test/googletest-output-test_.cc	/^void AdHocTest() {$/;"	f
AdHocTestResultTest	test/gtest_unittest.cc	/^class AdHocTestResultTest : public testing::Test {$/;"	c	file:
AddArgument	src/gtest-death-test.cc	/^  void AddArgument(const char* argument) {$/;"	f	class:testing::internal::Arguments
AddArguments	src/gtest-death-test.cc	/^  void AddArguments(const ::std::vector<Str>& arguments) {$/;"	f	class:testing::internal::Arguments
AddEnvironment	src/gtest.cc	/^Environment* UnitTest::AddEnvironment(Environment* env) {$/;"	f	class:testing::UnitTest
AddFailure	test/googletest-output-test_.cc	/^  static void AddFailure(FailureMode failure) {$/;"	f	class:ExpectFailureTest
AddFailure	test/gtest_unittest.cc	/^  static void AddFailure(FailureMode failure) {$/;"	f	class:__anon40::ScopedFakeTestPartResultReporterTest
AddFailureHelper	test/gtest_unittest.cc	/^void AddFailureHelper(bool* aborted) {$/;"	f	namespace:__anon42
AddFailureInOtherThread	test/googletest-output-test_.cc	/^  static void AddFailureInOtherThread(FailureMode failure) {$/;"	f	class:ExpectFailureWithThreadsTest
AddFailureInOtherThread	test/gtest_unittest.cc	/^  static void AddFailureInOtherThread(FailureMode failure) {$/;"	f	class:__anon40::ScopedFakeTestPartResultReporterWithThreadsTest
AddFatalFailure	test/gtest_unittest.cc	/^static void AddFatalFailure() {$/;"	f	namespace:__anon40
AddGlobalTestEnvironment	include/gtest/gtest.h	/^inline Environment* AddGlobalTestEnvironment(Environment* env) {$/;"	f	namespace:testing
AddNonfatalFailure	test/gtest_unittest.cc	/^static void AddNonfatalFailure() {$/;"	f	namespace:__anon40
AddTestInfo	src/gtest-internal-inl.h	/^  void AddTestInfo(internal::SetUpTestSuiteFunc set_up_tc,$/;"	f	class:testing::internal::UnitTestImpl
AddTestInfo	src/gtest.cc	/^void TestSuite::AddTestInfo(TestInfo* test_info) {$/;"	f	class:testing::TestSuite
AddTestName	include/gtest/internal/gtest-internal.h	/^  bool AddTestName(const char* file, int line, const char* case_name,$/;"	f	class:testing::internal::TypedTestSuitePState
AddTestPartResult	src/gtest.cc	/^void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {$/;"	f	class:testing::TestResult
AddTestPattern	include/gtest/internal/gtest-param-util.h	/^  void AddTestPattern(const char* test_suite_name, const char* test_base_name,$/;"	f	class:testing::internal::ParameterizedTestSuiteInfo
AddTestSuiteInstantiation	include/gtest/internal/gtest-param-util.h	/^  int AddTestSuiteInstantiation(const std::string& instantiation_name,$/;"	f	class:testing::internal::ParameterizedTestSuiteInfo
AddTwo	test/googletest-port-test.cc	/^void AddTwo(int* param) { *param += 2; }$/;"	f	namespace:testing::internal
AdjustForParameterizedTests	test/googletest-filter-unittest.py	/^  def AdjustForParameterizedTests(self, tests_to_run):$/;"	m	class:GTestFilterUnitTest
AdvanceIfEnd	include/gtest/internal/gtest-param-util.h	/^    void AdvanceIfEnd() {$/;"	f	class:testing::internal::CartesianProductGenerator::IteratorImpl
AllowsGenericStreaming	test/googletest-printers-test.cc	/^class AllowsGenericStreaming {};$/;"	c	namespace:testing::gtest_printers_test	file:
AllowsGenericStreamingAndImplicitConversionTemplate	test/googletest-printers-test.cc	/^class AllowsGenericStreamingAndImplicitConversionTemplate {$/;"	c	namespace:testing::gtest_printers_test	file:
AllowsGenericStreamingTemplate	test/googletest-printers-test.cc	/^class AllowsGenericStreamingTemplate {};$/;"	c	namespace:testing::gtest_printers_test	file:
AlmostEquals	include/gtest/internal/gtest-internal.h	/^  bool AlmostEquals(const FloatingPoint& rhs) const {$/;"	f	class:testing::internal::FloatingPoint
AlsoRunDisabledTests	test/gtest_unittest.cc	/^  static Flags AlsoRunDisabledTests(bool also_run_disabled_tests) {$/;"	f	struct:testing::Flags
AlsoRunDisabledTestsFlag	test/googletest-shuffle-test.py	/^def AlsoRunDisabledTestsFlag():$/;"	f
AlwaysFalse	include/gtest/internal/gtest-internal.h	/^inline bool AlwaysFalse() { return !AlwaysTrue(); }$/;"	f	namespace:testing::internal
AlwaysTrue	src/gtest.cc	/^bool AlwaysTrue() {$/;"	f	namespace:testing::internal
AnonymousEnum	test/googletest-printers-test.cc	/^enum AnonymousEnum {$/;"	g	file:
AnotherSubClassOfTest	test/gtest_unittest.cc	/^class AnotherSubClassOfTest : public Test {};$/;"	c	namespace:__anon40	file:
AnsiToUtf16	src/gtest.cc	/^LPCWSTR String::AnsiToUtf16(const char* ansi) {$/;"	f	class:testing::internal::String
AnyEq	include/gtest/gtest-matchers.h	/^struct AnyEq {$/;"	s	namespace:testing::internal
AnyGe	include/gtest/gtest-matchers.h	/^struct AnyGe {$/;"	s	namespace:testing::internal
AnyGt	include/gtest/gtest-matchers.h	/^struct AnyGt {$/;"	s	namespace:testing::internal
AnyLe	include/gtest/gtest-matchers.h	/^struct AnyLe {$/;"	s	namespace:testing::internal
AnyLt	include/gtest/gtest-matchers.h	/^struct AnyLt {$/;"	s	namespace:testing::internal
AnyNe	include/gtest/gtest-matchers.h	/^struct AnyNe {$/;"	s	namespace:testing::internal
Append	scripts/pump.py	/^  def Append(self, s):$/;"	m	class:Output
Append	src/gtest-test-part.cc	/^void TestPartResultArray::Append(const TestPartResult& result) {$/;"	f	class:testing::TestPartResultArray
Append	src/gtest.cc	/^void TestEventListeners::Append(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
Append	src/gtest.cc	/^void TestEventRepeater::Append(TestEventListener *listener) {$/;"	f	class:testing::internal::TestEventRepeater
AppendMessage	include/gtest/gtest.h	/^  void AppendMessage(const Message& a_message) {$/;"	f	class:testing::AssertionResult
AppendUserMessage	src/gtest.cc	/^std::string AppendUserMessage(const std::string& gtest_msg,$/;"	f	namespace:testing::internal
Arguments	src/gtest-death-test.cc	/^  Arguments() { args_.push_back(nullptr); }$/;"	f	class:testing::internal::Arguments
Arguments	src/gtest-death-test.cc	/^class Arguments {$/;"	c	namespace:testing::internal	file:
Argv	src/gtest-death-test.cc	/^  char* const* Argv() {$/;"	f	class:testing::internal::Arguments
Arity	scripts/gen_gtest_pred_impl.py	/^def Arity(n):$/;"	f
ArrayAsVector	src/gtest.cc	/^std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {$/;"	f	namespace:testing
ArrayAwareFind	include/gtest/internal/gtest-internal.h	/^Iter ArrayAwareFind(Iter begin, Iter end, const Element& elem) {$/;"	f	namespace:testing::internal
ArrayEq	include/gtest/internal/gtest-internal.h	/^bool ArrayEq(const T* lhs, size_t size, const U* rhs) {$/;"	f	namespace:testing::internal
ArrayEq	include/gtest/internal/gtest-internal.h	/^inline bool ArrayEq(const T& lhs, const U& rhs) { return lhs == rhs; }$/;"	f	namespace:testing::internal
Assert	test/googletest-param-test-invalid-name1-test.py	/^def Assert(condition):$/;"	f
Assert	test/googletest-param-test-invalid-name2-test.py	/^def Assert(condition):$/;"	f
Assert	test/googletest-uninitialized-test.py	/^def Assert(condition):$/;"	f
Assert	test/gtest_testbridge_test.py	/^def Assert(condition):$/;"	f
AssertDebugDeathHelper	test/googletest-death-test-test.cc	/^void AssertDebugDeathHelper(bool* aborted) {$/;"	f	namespace:__anon28
AssertEq	test/googletest-env-var-test.py	/^def AssertEq(expected, actual):$/;"	f
AssertEq	test/googletest-uninitialized-test.py	/^def AssertEq(expected, actual):$/;"	f
AssertEquivalentNodes	test/gtest_xml_test_utils.py	/^  def AssertEquivalentNodes(self, expected_node, actual_node):$/;"	m	class:GTestXMLTestCase
AssertFalse	test/gtest_assert_by_exception_test.cc	/^static void AssertFalse() {$/;"	f	file:
AssertHeld	include/gtest/internal/gtest-port.h	/^  void AssertHeld() const {$/;"	f	class:testing::internal::MutexBase
AssertHeld	include/gtest/internal/gtest-port.h	/^  void AssertHeld() const {}$/;"	f	class:testing::internal::Mutex
AssertHeld	src/gtest-port.cc	/^void Mutex::AssertHeld() {$/;"	f	class:testing::internal::Mutex
AssertHelper	include/gtest/gtest.h	/^class GTEST_API_ AssertHelper {$/;"	c	namespace:testing::internal
AssertHelper	src/gtest.cc	/^AssertHelper::AssertHelper(TestPartResult::Type type,$/;"	f	class:testing::internal::AssertHelper
AssertHelperData	include/gtest/gtest.h	/^    AssertHelperData(TestPartResult::Type t,$/;"	f	struct:testing::internal::AssertHelper::AssertHelperData
AssertHelperData	include/gtest/gtest.h	/^  struct AssertHelperData {$/;"	s	class:testing::internal::AssertHelper
AssertIsEven	test/gtest_unittest.cc	/^AssertionResult AssertIsEven(const char* expr, int n) {$/;"	f	namespace:__anon40
AssertIsEvenFunctor	test/gtest_unittest.cc	/^struct AssertIsEvenFunctor {$/;"	s	namespace:__anon40	file:
AssertNoFatalFailureIgnoresFailuresInOtherThreads	test/gtest_stress_test.cc	/^void AssertNoFatalFailureIgnoresFailuresInOtherThreads() {$/;"	f	namespace:testing::__anon30
AssertPartitionIsValid	test/googletest-filter-unittest.py	/^  def AssertPartitionIsValid(self, set_var, list_of_sets):$/;"	m	class:GTestFilterUnitTest
AssertPred1Helper	include/gtest/gtest_pred_impl.h	/^AssertionResult AssertPred1Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred2Helper	include/gtest/gtest_pred_impl.h	/^AssertionResult AssertPred2Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred3Helper	include/gtest/gtest_pred_impl.h	/^AssertionResult AssertPred3Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred4Helper	include/gtest/gtest_pred_impl.h	/^AssertionResult AssertPred4Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred5Helper	include/gtest/gtest_pred_impl.h	/^AssertionResult AssertPred5Helper(const char* pred_text,$/;"	f	namespace:testing
AssertSetEqual	test/googletest-filter-unittest.py	/^  def AssertSetEqual(self, lhs, rhs):$/;"	m	class:GTestFilterUnitTest
AssertStringArrayEq	test/gtest_unittest.cc	/^  static void AssertStringArrayEq(int size1, CharType** array1, int size2,$/;"	f	class:testing::ParseFlagsTest
AssertSumIsEven4	test/gtest_unittest.cc	/^AssertionResult AssertSumIsEven4($/;"	f	namespace:__anon40
AssertSumIsEven5Functor	test/gtest_unittest.cc	/^struct AssertSumIsEven5Functor {$/;"	s	namespace:__anon40	file:
AssertionException	include/gtest/gtest.h	/^  explicit AssertionException(const TestPartResult& result)$/;"	f	class:testing::AssertionException
AssertionException	include/gtest/gtest.h	/^class GTEST_API_ AssertionException$/;"	c	namespace:testing
AssertionFailure	src/gtest.cc	/^AssertionResult AssertionFailure() {$/;"	f	namespace:testing
AssertionFailure	src/gtest.cc	/^AssertionResult AssertionFailure(const Message& message) {$/;"	f	namespace:testing
AssertionResult	include/gtest/gtest.h	/^  explicit AssertionResult($/;"	f	class:testing::AssertionResult
AssertionResult	include/gtest/gtest.h	/^class GTEST_API_ AssertionResult {$/;"	c	namespace:testing
AssertionResult	src/gtest.cc	/^AssertionResult::AssertionResult(const AssertionResult& other)$/;"	f	class:testing::AssertionResult
AssertionResult	test/gtest_unittest.cc	/^class AssertionResult {};$/;"	c	namespace:my_namespace::testing	file:
AssertionSuccess	src/gtest.cc	/^AssertionResult AssertionSuccess() {$/;"	f	namespace:testing
AssumeRole	src/gtest-death-test.cc	/^DeathTest::TestRole ExecDeathTest::AssumeRole() {$/;"	f	class:testing::internal::ExecDeathTest
AssumeRole	src/gtest-death-test.cc	/^DeathTest::TestRole FuchsiaDeathTest::AssumeRole() {$/;"	f	class:testing::internal::FuchsiaDeathTest
AssumeRole	src/gtest-death-test.cc	/^DeathTest::TestRole NoExecDeathTest::AssumeRole() {$/;"	f	class:testing::internal::NoExecDeathTest
AssumeRole	src/gtest-death-test.cc	/^DeathTest::TestRole WindowsDeathTest::AssumeRole() {$/;"	f	class:testing::internal::WindowsDeathTest
AssumeRoleCalls	test/googletest-death-test-test.cc	/^  int AssumeRoleCalls() const { return assume_role_calls_; }$/;"	f	class:__anon28::MockDeathTestFactory
AtEnd	include/gtest/internal/gtest-param-util.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator::IteratorImpl
AtomMatchesChar	src/gtest-port.cc	/^bool AtomMatchesChar(bool escaped, char pattern_char, char ch) {$/;"	f	namespace:testing::internal
AtomicCounterWithMutex	test/googletest-port-test.cc	/^  explicit AtomicCounterWithMutex(Mutex* mutex) :$/;"	f	class:testing::internal::AtomicCounterWithMutex
AtomicCounterWithMutex	test/googletest-port-test.cc	/^class AtomicCounterWithMutex {$/;"	c	namespace:testing::internal	file:
AutoHandle	include/gtest/internal/gtest-port.h	/^class GTEST_API_ AutoHandle {$/;"	c	namespace:testing::internal
AutoHandle	src/gtest-port.cc	/^AutoHandle::AutoHandle()$/;"	f	class:testing::internal::AutoHandle
AutoHandle	src/gtest-port.cc	/^AutoHandle::AutoHandle(Handle handle)$/;"	f	class:testing::internal::AutoHandle
BINARY_OUTPUT	test/googletest-catch-exceptions-test.py	/^  BINARY_OUTPUT = gtest_test_utils.Subprocess([EXE_PATH], env=environ).output$/;"	v
BREAK_ON_FAILURE_ENV_VAR	test/googletest-break-on-failure-unittest.py	/^BREAK_ON_FAILURE_ENV_VAR = 'GTEST_BREAK_ON_FAILURE'$/;"	v
BREAK_ON_FAILURE_FLAG	test/googletest-break-on-failure-unittest.py	/^BREAK_ON_FAILURE_FLAG = 'gtest_break_on_failure'$/;"	v
Bar	test/gtest_unittest.cc	/^  int Bar() const { return 1; }$/;"	f	class:__anon42::Foo	file:
BarEnvironment	test/googletest-output-test_.cc	/^class BarEnvironment : public testing::Environment {$/;"	c	file:
Base	test/googletest-port-test.cc	/^  Base() : member_(0) {}$/;"	f	class:testing::internal::Base
Base	test/googletest-port-test.cc	/^  explicit Base(int n) : member_(n) {}$/;"	f	class:testing::internal::Base
Base	test/googletest-port-test.cc	/^class Base {$/;"	c	namespace:testing::internal	file:
Base	test/gtest_unittest.cc	/^  explicit Base(int an_x) : x_(an_x) {}$/;"	f	class:Base
Base	test/gtest_unittest.cc	/^class Base {$/;"	c	file:
BasicNarrowIoManip	include/gtest/gtest-message.h	/^  typedef std::ostream& (*BasicNarrowIoManip)(std::ostream&);$/;"	t	class:testing::Message::std
BeautifyCode	scripts/pump.py	/^def BeautifyCode(string):$/;"	f
Big	test/googletest-printers-test.cc	/^  Big() { memset(array, 0, sizeof(array)); }$/;"	f	struct:testing::gtest_printers_test::Big
Big	test/googletest-printers-test.cc	/^struct Big {$/;"	s	namespace:testing::gtest_printers_test	file:
BiggestInt	include/gtest/internal/gtest-port.h	/^typedef __int64 BiggestInt;$/;"	t	namespace:testing::internal
BiggestInt	test/googletest-printers-test.cc	/^  operator ::testing::internal::BiggestInt() const { return 42; }$/;"	f	class:BiggestIntConvertible::operator::testing::internal
BiggestIntConvertible	test/googletest-printers-test.cc	/^class BiggestIntConvertible {$/;"	c	file:
BiggestParsable	test/googletest-death-test-test.cc	/^typedef unsigned __int64 BiggestParsable;$/;"	t	namespace:__anon28	file:
BiggestParsable	test/googletest-death-test-test.cc	/^typedef unsigned long long BiggestParsable;$/;"	t	namespace:__anon28	file:
BiggestSignedParsable	test/googletest-death-test-test.cc	/^typedef signed __int64 BiggestSignedParsable;$/;"	t	namespace:__anon28	file:
BiggestSignedParsable	test/googletest-death-test-test.cc	/^typedef signed long long BiggestSignedParsable;$/;"	t	namespace:__anon28	file:
Bind	include/gtest/internal/gtest-type-util.h	/^  struct Bind {$/;"	s	struct:testing::internal::TemplateSel
Bits	include/gtest/internal/gtest-internal.h	/^  typedef typename TypeWithSize<sizeof(RawType)>::UInt Bits;$/;"	t	class:testing::internal::FloatingPoint
Bits	test/gtest_unittest.cc	/^  typedef typename Floating::Bits Bits;$/;"	t	class:__anon40::FloatingPointTest	file:
Bool	include/gtest/gtest-param-test.h	/^inline internal::ParamGenerator<bool> Bool() {$/;"	f	namespace:testing
Bool	test/gtest_pred_impl_unittest.cc	/^  explicit Bool(int val) : value(val != 0) {}$/;"	f	struct:Bool
Bool	test/gtest_pred_impl_unittest.cc	/^struct Bool {$/;"	s	file:
BoolFromGTestEnv	src/gtest-port.cc	/^bool BoolFromGTestEnv(const char* flag, bool default_value) {$/;"	f	namespace:testing::internal
BranchFiles	scripts/release_docs.py	/^  def BranchFiles(self):$/;"	m	class:WikiBrancher
BreakOnFailure	test/gtest_unittest.cc	/^  static Flags BreakOnFailure(bool break_on_failure) {$/;"	f	struct:testing::Flags
CAN_GENERATE_GOLDEN_FILE	test/googletest-output-test.py	/^CAN_GENERATE_GOLDEN_FILE = (SUPPORTS_DEATH_TESTS and$/;"	v
CAN_PASS_EMPTY_ENV	test/googletest-filter-unittest.py	/^  CAN_PASS_EMPTY_ENV = eval(child.output)$/;"	v
CAN_PASS_EMPTY_ENV	test/googletest-filter-unittest.py	/^CAN_PASS_EMPTY_ENV = False$/;"	v
CAN_TEST_EMPTY_FILTER	test/googletest-filter-unittest.py	/^CAN_TEST_EMPTY_FILTER = (CAN_PASS_EMPTY_ENV and CAN_UNSET_ENV)$/;"	v
CAN_UNSET_ENV	test/googletest-filter-unittest.py	/^  CAN_UNSET_ENV = eval(child.output)$/;"	v
CAN_UNSET_ENV	test/googletest-filter-unittest.py	/^CAN_UNSET_ENV = False$/;"	v
CATCH_EXCEPTIONS_ENV_VAR	test/googletest-break-on-failure-unittest.py	/^CATCH_EXCEPTIONS_ENV_VAR = 'GTEST_CATCH_EXCEPTIONS'$/;"	v
CATCH_EXCEPTIONS_ENV_VAR_NAME	test/googletest-output-test.py	/^CATCH_EXCEPTIONS_ENV_VAR_NAME = 'GTEST_CATCH_EXCEPTIONS'$/;"	v
CMAKE_BINARY_DIR	Makefile	/^CMAKE_BINARY_DIR = \/Users\/huguang\/Desktop\/海贼科技\/3.行动路线图\/3.教育培训\/1.大学生实体教学\/6.班级资料\/7.19-7班资料\/X.现场撸代码\/project\/googletest$/;"	m
CMAKE_COMMAND	Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.9.3_1\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	Makefile	/^CMAKE_SOURCE_DIR = \/Users\/huguang\/Desktop\/海贼科技\/3.行动路线图\/3.教育培训\/1.大学生实体教学\/6.班级资料\/7.19-7班资料\/X.现场撸代码\/project\/googletest$/;"	m
COLOR_DEFAULT	include/gtest/gtest.h	/^enum GTestColor { COLOR_DEFAULT, COLOR_RED, COLOR_GREEN, COLOR_YELLOW };$/;"	e	enum:testing::internal::GTestColor
COLOR_ENV_VAR	test/googletest-color-test.py	/^COLOR_ENV_VAR = 'GTEST_COLOR'$/;"	v
COLOR_FLAG	test/googletest-color-test.py	/^COLOR_FLAG = 'gtest_color'$/;"	v
COLOR_GREEN	include/gtest/gtest.h	/^enum GTestColor { COLOR_DEFAULT, COLOR_RED, COLOR_GREEN, COLOR_YELLOW };$/;"	e	enum:testing::internal::GTestColor
COLOR_RED	include/gtest/gtest.h	/^enum GTestColor { COLOR_DEFAULT, COLOR_RED, COLOR_GREEN, COLOR_YELLOW };$/;"	e	enum:testing::internal::GTestColor
COLOR_YELLOW	include/gtest/gtest.h	/^enum GTestColor { COLOR_DEFAULT, COLOR_RED, COLOR_GREEN, COLOR_YELLOW };$/;"	e	enum:testing::internal::GTestColor
COMMAND	test/googletest-color-test.py	/^COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-color-test_')$/;"	v
COMMAND	test/googletest-env-var-test.py	/^COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-env-var-test_')$/;"	v
COMMAND	test/googletest-filter-unittest.py	/^COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-filter-unittest_')$/;"	v
COMMAND	test/googletest-param-test-invalid-name1-test.py	/^COMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)$/;"	v
COMMAND	test/googletest-param-test-invalid-name2-test.py	/^COMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)$/;"	v
COMMAND	test/googletest-shuffle-test.py	/^COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-shuffle-test_')$/;"	v
COMMAND	test/googletest-uninitialized-test.py	/^COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-uninitialized-test_')$/;"	v
COMMAND	test/gtest_testbridge_test.py	/^COMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)$/;"	v
COMMAND_LIST_TESTS	test/googletest-output-test.py	/^COMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])$/;"	v
COMMAND_WITH_COLOR	test/googletest-output-test.py	/^COMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])$/;"	v
COMMAND_WITH_DISABLED	test/googletest-output-test.py	/^COMMAND_WITH_DISABLED = ($/;"	v
COMMAND_WITH_SHARDING	test/googletest-output-test.py	/^COMMAND_WITH_SHARDING = ($/;"	v
COMMAND_WITH_TIME	test/googletest-output-test.py	/^COMMAND_WITH_TIME = ({}, [PROGRAM_PATH,$/;"	v
CStringEquals	src/gtest.cc	/^bool String::CStringEquals(const char * lhs, const char * rhs) {$/;"	f	class:testing::internal::String
CalculateEndIndex	include/gtest/internal/gtest-param-util.h	/^  static int CalculateEndIndex(const T& begin,$/;"	f	class:testing::internal::RangeGenerator
CalculateOptimalEdits	src/gtest.cc	/^std::vector<EditType> CalculateOptimalEdits($/;"	f	namespace:testing::internal::edit_distance
CalculateOptimalEdits	src/gtest.cc	/^std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,$/;"	f	namespace:testing::internal::edit_distance
CalculatePrimesUpTo	samples/prime_tables.h	/^  void CalculatePrimesUpTo(int max) {$/;"	f	class:PreCalculatedPrimeTable
CalculateTestLists	test/googletest-shuffle-test.py	/^def CalculateTestLists():$/;"	f
CallThreadLocalGet	test/googletest-port-test.cc	/^void CallThreadLocalGet(ThreadParam thread_local_param) {$/;"	f	namespace:testing::internal
CanonicalizeForStdLibVersioning	include/gtest/internal/gtest-type-util.h	/^inline std::string CanonicalizeForStdLibVersioning(std::string s) {$/;"	f	namespace:testing::internal
CaptureStderr	src/gtest-port.cc	/^void CaptureStderr() {$/;"	f	namespace:testing::internal
CaptureStdout	src/gtest-port.cc	/^void CaptureStdout() {$/;"	f	namespace:testing::internal
CaptureStream	src/gtest-port.cc	/^static void CaptureStream(int fd, const char* stream_name,$/;"	f	namespace:testing::internal
CapturedStream	src/gtest-port.cc	/^  explicit CapturedStream(int fd) : fd_(fd), uncaptured_fd_(dup(fd)) {$/;"	f	class:testing::internal::CapturedStream
CapturedStream	src/gtest-port.cc	/^class CapturedStream {$/;"	c	namespace:testing::internal	file:
CartesianProductGenerator	include/gtest/internal/gtest-param-util.h	/^  CartesianProductGenerator(const std::tuple<ParamGenerator<T>...>& g)$/;"	f	class:testing::internal::CartesianProductGenerator
CartesianProductGenerator	include/gtest/internal/gtest-param-util.h	/^class CartesianProductGenerator$/;"	c	namespace:testing::internal
CartesianProductHolder	include/gtest/internal/gtest-param-util.h	/^  CartesianProductHolder(const Gen&... g) : generators_(g...) {}$/;"	f	class:testing::internal::CartesianProductHolder
CartesianProductHolder	include/gtest/internal/gtest-param-util.h	/^class CartesianProductHolder {$/;"	c	namespace:testing::internal
CaseInsensitiveCStringEquals	src/gtest.cc	/^bool String::CaseInsensitiveCStringEquals(const char * lhs, const char * rhs) {$/;"	f	class:testing::internal::String
CaseInsensitiveWideCStringEquals	src/gtest.cc	/^bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,$/;"	f	class:testing::internal::String
Castable	test/googletest-port-test.cc	/^  explicit Castable(bool* converted) : converted_(converted) {}$/;"	f	class:testing::internal::Castable
Castable	test/googletest-port-test.cc	/^class Castable {$/;"	c	namespace:testing::internal	file:
CatchCxxExceptionsTest	test/googletest-catch-exceptions-test.py	/^class CatchCxxExceptionsTest(gtest_test_utils.TestCase):$/;"	c
CatchExceptions	test/gtest_unittest.cc	/^  static Flags CatchExceptions(bool catch_exceptions) {$/;"	f	struct:testing::Flags
CatchSehExceptionsTest	test/googletest-catch-exceptions-test.py	/^  class CatchSehExceptionsTest(gtest_test_utils.TestCase):$/;"	c
ChDir	include/gtest/internal/gtest-port.h	/^inline int ChDir(const char* dir) { return chdir(dir); }$/;"	f	namespace:testing::internal::posix
ChangeToRootDir	test/googletest-death-test-test.cc	/^void ChangeToRootDir() { posix::ChDir(GTEST_PATH_SEP_); }$/;"	f	namespace:__anon28
CharFormat	src/gtest-printers.cc	/^enum CharFormat {$/;"	g	namespace:testing::internal	file:
CharsToIndices	test/gtest_unittest.cc	/^std::vector<size_t> CharsToIndices(const std::string& str) {$/;"	f	namespace:__anon40
CharsToLines	test/gtest_unittest.cc	/^std::vector<std::string> CharsToLines(const std::string& str) {$/;"	f	namespace:__anon40
Check	test/gtest_environment_test.cc	/^void Check(bool condition, const char* msg) {$/;"	f	namespace:__anon26
CheckCounts	test/gtest_repeat_test.cc	/^void CheckCounts(int expected) {$/;"	f	namespace:__anon31
CheckDestroyed	test/googletest-port-test.cc	/^  bool CheckDestroyed() const {$/;"	f	class:testing::internal::DestructorCall
CheckFlags	test/gtest_unittest.cc	/^  static void CheckFlags(const Flags& expected) {$/;"	f	class:testing::ParseFlagsTest
CheckForUnknownFiles	scripts/upload.py	/^  def CheckForUnknownFiles(self):$/;"	m	class:VersionControlSystem
CheckPoints	test/googletest-output-test_.cc	/^struct CheckPoints {$/;"	s	file:
CheckTestFailureCount	test/gtest_stress_test.cc	/^void CheckTestFailureCount(int expected_failures) {$/;"	f	namespace:testing::__anon30
CheckedDowncastToActualType	include/gtest/internal/gtest-port.h	/^Derived* CheckedDowncastToActualType(Base* base) {$/;"	f	namespace:testing::internal
ChopLowBits	src/gtest.cc	/^inline UInt32 ChopLowBits(UInt32* bits, int n) {$/;"	f	namespace:testing::internal
ClassUniqueToAlwaysTrue	src/gtest.cc	/^class ClassUniqueToAlwaysTrue {};$/;"	c	namespace:testing::internal::__anon17	file:
Clear	samples/sample3-inl.h	/^  void Clear() {$/;"	f	class:Queue
Clear	src/gtest.cc	/^void TestResult::Clear() {$/;"	f	class:testing::TestResult
ClearAdHocTestResult	src/gtest-internal-inl.h	/^  void ClearAdHocTestResult() {$/;"	f	class:testing::internal::UnitTestImpl
ClearCurrentTestPartResults	test/gtest_unittest.cc	/^static void ClearCurrentTestPartResults() {$/;"	f	namespace:__anon40
ClearInjectableArgvs	src/gtest-port.cc	/^void ClearInjectableArgvs() {$/;"	f	namespace:testing::internal
ClearNonAdHocTestResult	src/gtest-internal-inl.h	/^  void ClearNonAdHocTestResult() {$/;"	f	class:testing::internal::UnitTestImpl
ClearResult	src/gtest.cc	/^void TestSuite::ClearResult() {$/;"	f	class:testing::TestSuite
ClearTestPartResults	src/gtest-internal-inl.h	/^  static void ClearTestPartResults(TestResult* test_result) {$/;"	f	class:testing::internal::TestResultAccessor
ClearTestPartResults	src/gtest.cc	/^void TestResult::ClearTestPartResults() {$/;"	f	class:testing::TestResult
ClearTestResult	include/gtest/gtest.h	/^  static void ClearTestResult(TestInfo* test_info) {$/;"	f	class:testing::TestInfo
ClearTestSuiteResult	include/gtest/gtest.h	/^  static void ClearTestSuiteResult(TestSuite* test_suite) {$/;"	f	class:testing::TestSuite
ClientLoginError	scripts/upload.py	/^class ClientLoginError(urllib2.HTTPError):$/;"	c
Clone	scripts/pump.py	/^  def Clone(self):$/;"	m	class:Cursor
Clone	scripts/pump.py	/^  def Clone(self):$/;"	m	class:Env
Clone	scripts/pump.py	/^  def Clone(self):$/;"	m	class:Token
CloneCString	samples/sample2.cc	/^const char* MyString::CloneCString(const char* a_c_string) {$/;"	f	class:MyString
Close	include/gtest/internal/gtest-port.h	/^inline int Close(int fd) { return close(fd); }$/;"	f	namespace:testing::internal::posix
CloseConnection	src/gtest-internal-inl.h	/^    virtual void CloseConnection() {}$/;"	f	class:testing::internal::StreamingListener::AbstractSocketWriter
CmpHelperEQ	include/gtest/gtest.h	/^AssertionResult CmpHelperEQ(const char* lhs_expression,$/;"	f	namespace:testing::internal
CmpHelperEQ	src/gtest.cc	/^AssertionResult CmpHelperEQ(const char* lhs_expression,$/;"	f	namespace:testing::internal
CmpHelperEQFailure	include/gtest/gtest.h	/^AssertionResult CmpHelperEQFailure(const char* lhs_expression,$/;"	f	namespace:testing::internal
CmpHelperFloatingPointEQ	include/gtest/gtest.h	/^AssertionResult CmpHelperFloatingPointEQ(const char* lhs_expression,$/;"	f	namespace:testing::internal
CmpHelperOpFailure	include/gtest/gtest.h	/^AssertionResult CmpHelperOpFailure(const char* expr1, const char* expr2,$/;"	f	namespace:testing::internal
CmpHelperSTRCASEEQ	src/gtest.cc	/^AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,$/;"	f	namespace:testing::internal
CmpHelperSTRCASENE	src/gtest.cc	/^AssertionResult CmpHelperSTRCASENE(const char* s1_expression,$/;"	f	namespace:testing::internal
CmpHelperSTREQ	src/gtest.cc	/^AssertionResult CmpHelperSTREQ(const char* lhs_expression,$/;"	f	namespace:testing::internal
CmpHelperSTRNE	src/gtest.cc	/^AssertionResult CmpHelperSTRNE(const char* s1_expression,$/;"	f	namespace:testing::internal
CodeLocation	include/gtest/internal/gtest-internal.h	/^  CodeLocation(const std::string& a_file, int a_line)$/;"	f	struct:testing::internal::CodeLocation
CodeLocation	include/gtest/internal/gtest-internal.h	/^struct CodeLocation {$/;"	s	namespace:testing::internal
CodeLocationForTESTF	test/gtest_unittest.cc	/^class CodeLocationForTESTF : public Test {$/;"	c	namespace:testing	file:
CodeLocationForTESTP	test/gtest_unittest.cc	/^class CodeLocationForTESTP : public TestWithParam<int> {$/;"	c	namespace:testing	file:
CodeLocationForTYPEDTEST	test/gtest_unittest.cc	/^class CodeLocationForTYPEDTEST : public Test {$/;"	c	namespace:testing	file:
CodeLocationForTYPEDTESTP	test/gtest_unittest.cc	/^class CodeLocationForTYPEDTESTP : public Test {$/;"	c	namespace:testing	file:
CodeNode	scripts/pump.py	/^class CodeNode:$/;"	c
CodePointToUtf8	src/gtest.cc	/^std::string CodePointToUtf8(UInt32 code_point) {$/;"	f	namespace:testing::internal
ColoredPrintf	src/gtest.cc	/^void ColoredPrintf(GTestColor color, const char* fmt, ...) {$/;"	f	namespace:testing::internal
Combine	include/gtest/gtest-param-test.h	/^internal::CartesianProductHolder<Generator...> Combine(const Generator&... g) {$/;"	f	namespace:testing
CommentTest	test/googletest-param-test-test.cc	/^class CommentTest : public TestWithParam<Unstreamable> {};$/;"	c	file:
CommonTest	test/gtest-typed-test_test.cc	/^  CommonTest() : value_(1) {}$/;"	f	class:CommonTest
CommonTest	test/gtest-typed-test_test.cc	/^class CommonTest : public Test {$/;"	c	file:
Compare	include/gtest/gtest.h	/^  static AssertionResult Compare($/;"	f	class:testing::internal::EqHelper
Compare	include/gtest/gtest.h	/^  static AssertionResult Compare(const char* lhs_expression,$/;"	f	class:testing::internal::EqHelper
CompareAndIncrementCharPtrs	test/gtest_unittest.cc	/^  static void CompareAndIncrementCharPtrs() {$/;"	f	class:__anon40::SingleEvaluationTest
CompareAndIncrementInts	test/gtest_unittest.cc	/^  static void CompareAndIncrementInts() {$/;"	f	class:__anon40::SingleEvaluationTest
CompareTestPartResult	test/gtest_unittest.cc	/^  static void CompareTestPartResult(const TestPartResult& expected,$/;"	f	class:__anon40::TestResultTest
ComparisonBase	include/gtest/gtest-matchers.h	/^  explicit ComparisonBase(const Rhs& rhs) : rhs_(rhs) {}$/;"	f	class:testing::internal::ComparisonBase
ComparisonBase	include/gtest/gtest-matchers.h	/^class ComparisonBase {$/;"	c	namespace:testing::internal
ComputeCurrentValue	include/gtest/internal/gtest-param-util.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator::IteratorImpl
ConcatPaths	src/gtest-filepath.cc	/^FilePath FilePath::ConcatPaths(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
ConditionalPrintAsText	src/gtest-printers.cc	/^void ConditionalPrintAsText(const char* str, size_t length, ostream* os) {$/;"	f	namespace:testing::internal::__anon22
ConfigureStreamingOutput	src/gtest.cc	/^void UnitTestImpl::ConfigureStreamingOutput() {$/;"	f	class:testing::internal::UnitTestImpl
ConfigureXmlOutput	src/gtest.cc	/^void UnitTestImpl::ConfigureXmlOutput() {$/;"	f	class:testing::internal::UnitTestImpl
ConstAndNonConstCastable	test/googletest-port-test.cc	/^  ConstAndNonConstCastable(bool* converted, bool* const_converted)$/;"	f	class:testing::internal::ConstAndNonConstCastable
ConstAndNonConstCastable	test/googletest-port-test.cc	/^class ConstAndNonConstCastable {$/;"	c	namespace:testing::internal	file:
ConstCastable	test/googletest-port-test.cc	/^  explicit ConstCastable(bool* converted) : converted_(converted) {}$/;"	f	class:testing::internal::ConstCastable
ConstCastable	test/googletest-port-test.cc	/^class ConstCastable {$/;"	c	namespace:testing::internal	file:
ConstCharPtr	include/gtest/internal/gtest-internal.h	/^  ConstCharPtr(const char* str) : value(str) {}$/;"	f	struct:testing::internal::ConstCharPtr
ConstCharPtr	include/gtest/internal/gtest-internal.h	/^struct GTEST_API_ ConstCharPtr {$/;"	s	namespace:testing::internal
ConstOnlyContainerWithClassIterator	test/gtest_unittest.cc	/^struct ConstOnlyContainerWithClassIterator {$/;"	s	file:
ConstOnlyContainerWithPointerIterator	test/gtest_unittest.cc	/^struct ConstOnlyContainerWithPointerIterator {$/;"	s	file:
ConstRef	include/gtest/internal/gtest-port.h	/^struct ConstRef { typedef const T& type; };$/;"	s	namespace:testing::internal
ConstRef	include/gtest/internal/gtest-port.h	/^struct ConstRef<T&> { typedef T& type; };$/;"	s	namespace:testing::internal
ContainerTest	test/gtest-typed-test_test.h	/^TYPED_TEST_SUITE_P(ContainerTest);$/;"	v
ContainerTest	test/gtest-typed-test_test.h	/^class ContainerTest : public Test {$/;"	c
ContainerType	include/gtest/internal/gtest-param-util.h	/^  typedef typename ::std::vector<T> ContainerType;$/;"	t	class:testing::internal::ValuesInIteratorRangeGenerator
ContainsRegex	include/gtest/gtest-matchers.h	/^inline PolymorphicMatcher<internal::MatchesRegexMatcher> ContainsRegex($/;"	f	namespace:testing
ContainsUnprintableControlCodes	src/gtest-printers.cc	/^bool ContainsUnprintableControlCodes(const char* str, size_t length) {$/;"	f	namespace:testing::internal::__anon22
ConversionHelperBase	test/gtest_unittest.cc	/^class ConversionHelperBase {};$/;"	c	file:
ConversionHelperDerived	test/gtest_unittest.cc	/^class ConversionHelperDerived : public ConversionHelperBase {};$/;"	c	file:
ConvertFromPumpSource	scripts/pump.py	/^def ConvertFromPumpSource(src_text):$/;"	f
ConvertToAll	test/gtest_unittest.cc	/^struct ConvertToAll {$/;"	s	namespace:__anon40	file:
ConvertToAllButNoPointers	test/gtest_unittest.cc	/^struct ConvertToAllButNoPointers {$/;"	s	namespace:__anon40	file:
ConvertToPointer	test/gtest_unittest.cc	/^struct ConvertToPointer {$/;"	s	namespace:__anon40	file:
ConvertibleToAssertionResult	test/gtest_unittest.cc	/^struct ConvertibleToAssertionResult {$/;"	s	file:
CopyArray	include/gtest/internal/gtest-internal.h	/^inline void CopyArray(const T& from, U* to) { *to = from; }$/;"	f	namespace:testing::internal
CopyArray	include/gtest/internal/gtest-internal.h	/^void CopyArray(const T* from, size_t size, U* to) {$/;"	f	namespace:testing::internal
CountIf	src/gtest-internal-inl.h	/^inline int CountIf(const Container& c, Predicate predicate) {$/;"	f	namespace:testing::internal
Counter	samples/sample4.h	/^  Counter() : counter_(0) {}$/;"	f	class:Counter
Counter	samples/sample4.h	/^class Counter {$/;"	c
CountingThreadFunc	test/googletest-port-test.cc	/^void CountingThreadFunc(pair<AtomicCounterWithMutex*, int> param) {$/;"	f	namespace:testing::internal
Create	src/gtest-death-test.cc	/^bool DeathTest::Create(const char* statement,$/;"	f	class:testing::internal::DeathTest
Create	src/gtest-death-test.cc	/^bool DefaultDeathTestFactory::Create(const char* statement,$/;"	f	class:testing::internal::DefaultDeathTestFactory
Create	test/googletest-death-test-test.cc	/^bool MockDeathTestFactory::Create($/;"	f	class:__anon28::MockDeathTestFactory
CreateCodePointFromUtf16SurrogatePair	src/gtest.cc	/^inline UInt32 CreateCodePointFromUtf16SurrogatePair(wchar_t first,$/;"	f	namespace:testing::internal
CreateDirectoriesRecursively	src/gtest-filepath.cc	/^bool FilePath::CreateDirectoriesRecursively() const {$/;"	f	class:testing::internal::FilePath
CreateFlagfile	test/gtest_unittest.cc	/^  internal::FilePath CreateFlagfile(const char* contents) {$/;"	f	class:testing::FlagfileTest
CreateFolder	src/gtest-filepath.cc	/^bool FilePath::CreateFolder() const {$/;"	f	class:testing::internal::FilePath
CreateKey	include/gtest/internal/gtest-port.h	/^  static pthread_key_t CreateKey() {$/;"	f	class:testing::internal::ThreadLocal
CreateOnTheFlyPrimeTable	samples/sample7_unittest.cc	/^PrimeTable* CreateOnTheFlyPrimeTable() {$/;"	f	namespace:__anon7
CreatePreCalculatedPrimeTable	samples/sample7_unittest.cc	/^PrimeTable* CreatePreCalculatedPrimeTable() {$/;"	f	namespace:__anon7
CreatePrimeTable	samples/sample6_unittest.cc	/^PrimeTable* CreatePrimeTable<OnTheFlyPrimeTable>() {$/;"	f	namespace:__anon1
CreatePrimeTable	samples/sample6_unittest.cc	/^PrimeTable* CreatePrimeTable<PreCalculatedPrimeTable>() {$/;"	f	namespace:__anon1
CreatePrimeTableFunc	samples/sample7_unittest.cc	/^typedef PrimeTable* CreatePrimeTableFunc();$/;"	t	namespace:__anon7	file:
CreateTextFile	test/googletest-filepath-test.cc	/^  void CreateTextFile(const char* filename) {$/;"	f	class:testing::internal::__anon36::DirectoryCreationTest
CreateThread	src/gtest-port.cc	/^  static HANDLE CreateThread(Runnable* runnable,$/;"	f	class:testing::internal::__anon20::ThreadWithParamSupport
CreateUnifiedDiff	src/gtest.cc	/^std::string CreateUnifiedDiff(const std::vector<std::string>& left,$/;"	f	namespace:testing::internal::edit_distance
CurrentOsStackTraceExceptTop	src/gtest.cc	/^std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {$/;"	f	class:testing::internal::UnitTestImpl
CurrentTestInfoTest	test/gtest_unittest.cc	/^class CurrentTestInfoTest : public Test {$/;"	c	namespace:testing	file:
Cursor	scripts/pump.py	/^class Cursor:$/;"	c
CustomFunctionNamingTest	test/googletest-param-test-test.cc	/^class CustomFunctionNamingTest : public TestWithParam<std::string> {};$/;"	c	file:
CustomFunctorNamingTest	test/googletest-param-test-test.cc	/^class CustomFunctorNamingTest : public TestWithParam<std::string> {};$/;"	c	file:
CustomIntegerNamingTest	test/googletest-param-test-test.cc	/^class CustomIntegerNamingTest : public TestWithParam<int> {};$/;"	c	file:
CustomLambdaNamingTest	test/googletest-param-test-test.cc	/^class CustomLambdaNamingTest : public TestWithParam<std::string> {};$/;"	c	file:
CustomParamNameFunction	test/googletest-param-test-test.cc	/^inline std::string CustomParamNameFunction($/;"	f
CustomParamNameFunctor	test/googletest-param-test-test.cc	/^struct CustomParamNameFunctor {$/;"	s	file:
CustomStruct	test/googletest-param-test-test.cc	/^  explicit CustomStruct(int value) : x(value) {}$/;"	f	struct:CustomStruct
CustomStruct	test/googletest-param-test-test.cc	/^struct CustomStruct {$/;"	s	file:
CustomStructNamingTest	test/googletest-param-test-test.cc	/^class CustomStructNamingTest : public TestWithParam<CustomStruct> {};$/;"	c	file:
CxxExceptionInConstructorTest	test/googletest-catch-exceptions-test_.cc	/^  CxxExceptionInConstructorTest() {$/;"	f	class:CxxExceptionInConstructorTest
CxxExceptionInConstructorTest	test/googletest-catch-exceptions-test_.cc	/^class CxxExceptionInConstructorTest : public Test {$/;"	c	file:
CxxExceptionInSetUpTest	test/googletest-catch-exceptions-test_.cc	/^class CxxExceptionInSetUpTest : public Test {$/;"	c	file:
CxxExceptionInSetUpTestSuiteTest	test/googletest-catch-exceptions-test_.cc	/^  CxxExceptionInSetUpTestSuiteTest() {$/;"	f	class:CxxExceptionInSetUpTestSuiteTest
CxxExceptionInSetUpTestSuiteTest	test/googletest-catch-exceptions-test_.cc	/^class CxxExceptionInSetUpTestSuiteTest : public Test {$/;"	c	file:
CxxExceptionInTearDownTest	test/googletest-catch-exceptions-test_.cc	/^class CxxExceptionInTearDownTest : public Test {$/;"	c	file:
CxxExceptionInTearDownTestSuiteTest	test/googletest-catch-exceptions-test_.cc	/^class CxxExceptionInTearDownTestSuiteTest : public Test {$/;"	c	file:
CxxExceptionInTestBodyTest	test/googletest-catch-exceptions-test_.cc	/^class CxxExceptionInTestBodyTest : public Test {$/;"	c	file:
DEATH_TESTS	test/googletest-filter-unittest.py	/^  DEATH_TESTS = [$/;"	v
DEATH_TESTS	test/googletest-filter-unittest.py	/^  DEATH_TESTS = []$/;"	v
DEATH_TEST_STYLE_FLAG	test/gtest_help_test.py	/^DEATH_TEST_STYLE_FLAG = FLAG_PREFIX + 'death_test_style'$/;"	v
DEFAULT_GTEST_ROOT_DIR	scripts/fuse_gtest_files.py	/^DEFAULT_GTEST_ROOT_DIR = os.path.join(os.path.dirname(__file__), '..')$/;"	v
DIED	src/gtest-death-test.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
DISABLED_TESTS	test/googletest-filter-unittest.py	/^DISABLED_TESTS = [$/;"	v
DISABLED_TypedTest	test/gtest_unittest.cc	/^class DISABLED_TypedTest : public Test {$/;"	c	namespace:__anon40	file:
DISABLED_TypedTestP	test/gtest_unittest.cc	/^class DISABLED_TypedTestP : public Test {$/;"	c	namespace:__anon40	file:
DOT_DOT_REGEX	scripts/pump.py	/^DOT_DOT_REGEX = re.compile(r'\\.\\.')$/;"	v
DeathTest	include/gtest/internal/gtest-death-test-internal.h	/^class GTEST_API_ DeathTest {$/;"	c	namespace:testing::internal
DeathTest	src/gtest-death-test.cc	/^DeathTest::DeathTest() {$/;"	f	class:testing::internal::DeathTest
DeathTestAbort	src/gtest-death-test.cc	/^static void DeathTestAbort(const std::string& message) {$/;"	f	namespace:testing::internal
DeathTestAndMultiThreadsTest	test/googletest-output-test_.cc	/^class DeathTestAndMultiThreadsTest : public testing::Test {$/;"	c	file:
DeathTestFactory	include/gtest/internal/gtest-death-test-internal.h	/^class DeathTestFactory {$/;"	c	namespace:testing::internal
DeathTestImpl	src/gtest-death-test.cc	/^  DeathTestImpl(const char* a_statement, Matcher<const std::string&> matcher)$/;"	f	class:testing::internal::DeathTestImpl
DeathTestImpl	src/gtest-death-test.cc	/^class DeathTestImpl : public DeathTest {$/;"	c	namespace:testing::internal	file:
DeathTestOutcome	src/gtest-death-test.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	g	namespace:testing::internal	file:
DeathTestSubroutine	test/googletest-death-test-test.cc	/^void DeathTestSubroutine() {$/;"	f	namespace:__anon28
DeathTestThreadWarning	src/gtest-death-test.cc	/^static std::string DeathTestThreadWarning(size_t thread_count) {$/;"	f	namespace:testing::internal
DeathTestUseFork	test/gtest_unittest.cc	/^  static Flags DeathTestUseFork(bool death_test_use_fork) {$/;"	f	struct:testing::Flags
Decrement	samples/sample4.cc	/^int Counter::Decrement() {$/;"	f	class:Counter
DefaultDeathTestFactory	include/gtest/internal/gtest-death-test-internal.h	/^class DefaultDeathTestFactory : public DeathTestFactory {$/;"	c	namespace:testing::internal
DefaultGlobalTestPartResultReporter	src/gtest-internal-inl.h	/^class DefaultGlobalTestPartResultReporter$/;"	c	namespace:testing::internal
DefaultGlobalTestPartResultReporter	src/gtest.cc	/^DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter($/;"	f	class:testing::internal::DefaultGlobalTestPartResultReporter
DefaultNameGenerator	include/gtest/internal/gtest-internal.h	/^struct DefaultNameGenerator {$/;"	s	namespace:testing::internal
DefaultParamName	include/gtest/internal/gtest-param-util.h	/^std::string DefaultParamName(const TestParamInfo<ParamType>& info) {$/;"	f	namespace:testing::internal
DefaultPerThreadTestPartResultReporter	src/gtest-internal-inl.h	/^class DefaultPerThreadTestPartResultReporter$/;"	c	namespace:testing::internal
DefaultPerThreadTestPartResultReporter	src/gtest.cc	/^DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter($/;"	f	class:testing::internal::DefaultPerThreadTestPartResultReporter
DefaultPrintNonContainerTo	include/gtest/gtest-printers.h	/^void DefaultPrintNonContainerTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing_internal
DefaultPrintTo	include/gtest/gtest-printers.h	/^void DefaultPrintTo(WrapPrinterType<kPrintContainer> \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultPrintTo	include/gtest/gtest-printers.h	/^void DefaultPrintTo(WrapPrinterType<kPrintFunctionPointer> \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultPrintTo	include/gtest/gtest-printers.h	/^void DefaultPrintTo(WrapPrinterType<kPrintOther> \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultPrintTo	include/gtest/gtest-printers.h	/^void DefaultPrintTo(WrapPrinterType<kPrintPointer> \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultPrinterType	include/gtest/gtest-printers.h	/^enum DefaultPrinterType {$/;"	g	namespace:testing::internal
DefaultValueHolderFactory	include/gtest/internal/gtest-port.h	/^    DefaultValueHolderFactory() {}$/;"	f	class:testing::internal::ThreadLocal::DefaultValueHolderFactory
DefaultValueHolderFactory	include/gtest/internal/gtest-port.h	/^  class DefaultValueHolderFactory : public ValueHolderFactory {$/;"	c	class:testing::internal::ThreadLocal
Deinit	test/googletest-output-test_.cc	/^  void Deinit() {$/;"	f	class:FatalFailureInSetUpTest	file:
Deinit	test/googletest-output-test_.cc	/^  void Deinit() {$/;"	f	class:NonFatalFailureInSetUpTest	file:
Delete	src/gtest-internal-inl.h	/^static void Delete(T* x) {$/;"	f	namespace:testing::internal
DeleteFilesAndDir	test/googletest-json-outfiles-test.py	/^  def DeleteFilesAndDir(self):$/;"	m	class:GTestJsonOutFilesTest
DeleteFilesAndDir	test/gtest_xml_outfiles_test.py	/^  def DeleteFilesAndDir(self):$/;"	m	class:GTestXMLOutFilesTest
DeleteSelf_	include/gtest/gtest.h	/^  void DeleteSelf_() { delete this; }$/;"	f	class:testing::Test
DeleteThreadLocalValue	include/gtest/internal/gtest-port.h	/^extern "C" inline void DeleteThreadLocalValue(void* value_holder) {$/;"	f	namespace:testing::internal
Dequeue	samples/sample3-inl.h	/^  E* Dequeue() {$/;"	f	class:Queue
Derived	test/googletest-port-test.cc	/^  explicit Derived(int n) : Base(n) {}$/;"	f	class:testing::internal::Derived
Derived	test/googletest-port-test.cc	/^class Derived : public Base {$/;"	c	namespace:testing::internal	file:
DerivedTest	test/gtest-typed-test_test.cc	/^TYPED_TEST_SUITE_P(DerivedTest);$/;"	v
DerivedTest	test/gtest-typed-test_test.cc	/^class DerivedTest : public CommonTest<T> {$/;"	c	file:
Desc	include/gtest/gtest-matchers.h	/^  static const char* Desc() { return "is <"; }$/;"	f	class:testing::internal::LtMatcher
Desc	include/gtest/gtest-matchers.h	/^  static const char* Desc() { return "is <="; }$/;"	f	class:testing::internal::LeMatcher
Desc	include/gtest/gtest-matchers.h	/^  static const char* Desc() { return "is >"; }$/;"	f	class:testing::internal::GtMatcher
Desc	include/gtest/gtest-matchers.h	/^  static const char* Desc() { return "is >="; }$/;"	f	class:testing::internal::GeMatcher
Desc	include/gtest/gtest-matchers.h	/^  static const char* Desc() { return "is equal to"; }$/;"	f	class:testing::internal::EqMatcher
Desc	include/gtest/gtest-matchers.h	/^  static const char* Desc() { return "isn't equal to"; }$/;"	f	class:testing::internal::NeMatcher
DescribeNegationTo	include/gtest/gtest-matchers.h	/^    virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::PolymorphicMatcher::MonomorphicImpl
DescribeNegationTo	include/gtest/gtest-matchers.h	/^  virtual void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::MatcherDescriberInterface
DescribeNegationTo	include/gtest/gtest-matchers.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::MatcherBase
DescribeNegationTo	include/gtest/gtest-matchers.h	/^  void DescribeNegationTo(::std::ostream* os) const {$/;"	f	class:testing::internal::MatchesRegexMatcher
DescribeTo	include/gtest/gtest-matchers.h	/^    virtual void DescribeTo(::std::ostream* os) const { impl_.DescribeTo(os); }$/;"	f	class:testing::PolymorphicMatcher::MonomorphicImpl
DescribeTo	include/gtest/gtest-matchers.h	/^  void DescribeTo(::std::ostream* os) const { impl_->DescribeTo(os); }$/;"	f	class:testing::internal::MatcherBase
DescribeTo	include/gtest/gtest-matchers.h	/^  void DescribeTo(::std::ostream* os) const {$/;"	f	class:testing::internal::MatchesRegexMatcher
DestructorCall	test/googletest-port-test.cc	/^  DestructorCall() {$/;"	f	class:testing::internal::DestructorCall
DestructorCall	test/googletest-port-test.cc	/^class DestructorCall {$/;"	c	namespace:testing::internal	file:
DestructorTracker	test/googletest-port-test.cc	/^  DestructorTracker() : index_(GetNewIndex()) {}$/;"	f	class:testing::internal::DestructorTracker
DestructorTracker	test/googletest-port-test.cc	/^  DestructorTracker(const DestructorTracker& \/* rhs *\/)$/;"	f	class:testing::internal::DestructorTracker
DestructorTracker	test/googletest-port-test.cc	/^class DestructorTracker {$/;"	c	namespace:testing::internal	file:
DieIf	test/googletest-death-test-test.cc	/^void DieIf(bool should_die) {$/;"	f	namespace:__anon28
DieIf	test/googletest-output-test_.cc	/^void DieIf(bool should_die) {$/;"	f
DieIfLessThan	test/googletest-death-test-test.cc	/^bool DieIfLessThan(int x, int y) {$/;"	f	namespace:__anon28
DieInCRTDebugElse12	test/googletest-death-test-test.cc	/^int DieInCRTDebugElse12(int* sideeffect) {$/;"	f	namespace:__anon28
DieInDebugElse12	test/googletest-death-test-test.cc	/^int DieInDebugElse12(int* sideeffect) {$/;"	f	namespace:__anon28
DieInside	test/googletest-death-test-test.cc	/^void DieInside(const ::std::string& function) {$/;"	f	namespace:__anon28
DieWithEmbeddedNul	test/googletest-death-test-test.cc	/^void DieWithEmbeddedNul() {$/;"	f	namespace:__anon28
DieWithMessage	test/googletest-death-test-test.cc	/^void DieWithMessage(const ::std::string& message) {$/;"	f	namespace:__anon28
DieWithMessage	test/googletest-death-test-test.cc	/^void DieWithMessage(const char* message) {$/;"	f	namespace:__anon28
DirectoryCreationTest	test/googletest-filepath-test.cc	/^class DirectoryCreationTest : public Test {$/;"	c	namespace:testing::internal::__anon36	file:
DirectoryExists	src/gtest-filepath.cc	/^bool FilePath::DirectoryExists() const {$/;"	f	class:testing::internal::FilePath
DisableSigprofActionAndTimer	test/googletest-death-test-test.cc	/^void DisableSigprofActionAndTimer(struct sigaction* old_signal_action) {$/;"	f	namespace:__anon28
DisabledTest	test/gtest_xml_output_unittest_.cc	/^class DisabledTest : public Test {$/;"	c	file:
DisabledTestsTest	test/gtest_unittest.cc	/^class DisabledTestsTest : public Test {$/;"	c	namespace:__anon40	file:
DistanceBetweenSignAndMagnitudeNumbers	include/gtest/internal/gtest-internal.h	/^  static Bits DistanceBetweenSignAndMagnitudeNumbers(const Bits &sam1,$/;"	f	class:testing::internal::FloatingPoint
DoAssertNoFatalFailureOnFails	test/gtest_unittest.cc	/^  void DoAssertNoFatalFailureOnFails() {$/;"	f	class:__anon40::NoFatalFailureTest
DoExpectNoFatalFailureOnFails	test/gtest_unittest.cc	/^  void DoExpectNoFatalFailureOnFails() {$/;"	f	class:__anon40::NoFatalFailureTest
DoesNotAbortHelper	test/gtest_unittest.cc	/^void DoesNotAbortHelper(bool* aborted) {$/;"	f	namespace:__anon40
DogAdder	test/googletest-param-test-test.cc	/^  DogAdder(const DogAdder& other) : value_(other.value_.c_str()) {}$/;"	f	class:DogAdder
DogAdder	test/googletest-param-test-test.cc	/^  explicit DogAdder(const char* a_value) : value_(a_value) {}$/;"	f	class:DogAdder
DogAdder	test/googletest-param-test-test.cc	/^class DogAdder {$/;"	c	file:
Double	include/gtest/internal/gtest-internal.h	/^typedef FloatingPoint<double> Double;$/;"	t	namespace:testing::internal
Double	samples/sample3_unittest.cc	/^  static int Double(int n) {$/;"	f	class:__anon2::QueueTestSmpl3
DoubleLE	src/gtest.cc	/^AssertionResult DoubleLE(const char* expr1, const char* expr2,$/;"	f	namespace:testing
DoubleNearPredFormat	src/gtest.cc	/^AssertionResult DoubleNearPredFormat(const char* expr1,$/;"	f	namespace:testing::internal
DoubleSequence	include/gtest/internal/gtest-internal.h	/^struct DoubleSequence<false, IndexSequence<I...>, sizeofT> {$/;"	s	namespace:testing::internal
DoubleSequence	include/gtest/internal/gtest-internal.h	/^struct DoubleSequence<true, IndexSequence<I...>, sizeofT> {$/;"	s	namespace:testing::internal
DoubleTest	test/gtest_unittest.cc	/^typedef FloatingPointTest<double> DoubleTest;$/;"	t	namespace:__anon40	file:
DownCast_	include/gtest/internal/gtest-port.h	/^inline To DownCast_(From* f) {  \/\/ so we only accept pointers$/;"	f	namespace:testing::internal
DropWikiSuffix	scripts/release_docs.py	/^def DropWikiSuffix(wiki_filename):$/;"	f
DummyMatchResultListener	include/gtest/gtest-matchers.h	/^  DummyMatchResultListener() : MatchResultListener(nullptr) {}$/;"	f	class:testing::internal::DummyMatchResultListener
DummyMatchResultListener	include/gtest/gtest-matchers.h	/^class DummyMatchResultListener : public MatchResultListener {$/;"	c	namespace:testing::internal
DummyTest	test/googletest-param-test-invalid-name1-test_.cc	/^class DummyTest : public ::testing::TestWithParam<const char *> {};$/;"	c	namespace:__anon32	file:
DummyTest	test/googletest-param-test-invalid-name2-test_.cc	/^class DummyTest : public ::testing::TestWithParam<const char *> {};$/;"	c	namespace:__anon39	file:
DynamicFixture	test/googletest-output-test_.cc	/^  DynamicFixture() { printf("DynamicFixture()\\n"); }$/;"	f	class:DynamicFixture
DynamicFixture	test/googletest-output-test_.cc	/^class DynamicFixture : public testing::Test {$/;"	c	file:
DynamicTest	test/googletest-output-test_.cc	/^class DynamicTest : public DynamicFixture {$/;"	c	file:
DynamicTest	test/gtest_unittest.cc	/^class DynamicTest : public DynamicUnitTestFixture {$/;"	c	file:
DynamicUnitTestFixture	test/gtest_unittest.cc	/^class DynamicUnitTestFixture : public testing::Test {};$/;"	c	file:
ENUM1	test/googletest-param-test-test.cc	/^  ENUM1 = 1,$/;"	e	enum:MyEnums	file:
ENUM2	test/googletest-param-test-test.cc	/^  ENUM2 = 3,$/;"	e	enum:MyEnums	file:
ENUM3	test/googletest-param-test-test.cc	/^  ENUM3 = 8,$/;"	e	enum:MyEnums	file:
EQUALS	Makefile	/^EQUALS = =$/;"	m
EQ_REGEX	scripts/pump.py	/^EQ_REGEX = re.compile(r'=')$/;"	v
EXECUTE_TEST	include/gtest/internal/gtest-death-test-internal.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
EXE_PATH	test/googletest-break-on-failure-unittest.py	/^EXE_PATH = gtest_test_utils.GetTestExecutablePath($/;"	v
EXE_PATH	test/googletest-catch-exceptions-test.py	/^EXE_PATH = gtest_test_utils.GetTestExecutablePath($/;"	v
EXE_PATH	test/googletest-list-tests-unittest.py	/^EXE_PATH = gtest_test_utils.GetTestExecutablePath('googletest-list-tests-unittest_')$/;"	v
EXE_PATH	test/googletest-throw-on-failure-test.py	/^EXE_PATH = gtest_test_utils.GetTestExecutablePath($/;"	v
EXE_PATH	test/gtest_skip_environment_check_output_test.py	/^EXE_PATH = gtest_test_utils.GetTestExecutablePath($/;"	v
EXPECTED_1	test/googletest-json-outfiles-test.py	/^EXPECTED_1 = {$/;"	v
EXPECTED_2	test/googletest-json-outfiles-test.py	/^EXPECTED_2 = {$/;"	v
EXPECTED_EMPTY	test/googletest-json-output-unittest.py	/^EXPECTED_EMPTY = {$/;"	v
EXPECTED_FILTERED	test/googletest-json-output-unittest.py	/^EXPECTED_FILTERED = {$/;"	v
EXPECTED_NON_EMPTY	test/googletest-json-output-unittest.py	/^EXPECTED_NON_EMPTY = {$/;"	v
EXPECT_ANY_THROW	include/gtest/gtest.h	/^#define EXPECT_ANY_THROW(/;"	d
EXPECT_DEATH	include/gtest/gtest-death-test.h	/^# define EXPECT_DEATH(/;"	d
EXPECT_DEATH_IF_SUPPORTED	include/gtest/gtest-death-test.h	/^# define EXPECT_DEATH_IF_SUPPORTED(/;"	d
EXPECT_DEBUG_DEATH	include/gtest/gtest-death-test.h	/^#  define EXPECT_DEBUG_DEATH(/;"	d
EXPECT_DOUBLE_EQ	include/gtest/gtest.h	/^#define EXPECT_DOUBLE_EQ(/;"	d
EXPECT_EQ	include/gtest/gtest.h	/^#define EXPECT_EQ(/;"	d
EXPECT_EXIT	include/gtest/gtest-death-test.h	/^# define EXPECT_EXIT(/;"	d
EXPECT_FALSE	include/gtest/gtest.h	/^#define EXPECT_FALSE(/;"	d
EXPECT_FATAL_FAILURE	include/gtest/gtest-spi.h	/^#define EXPECT_FATAL_FAILURE(/;"	d
EXPECT_FATAL_FAILURE_ON_ALL_THREADS	include/gtest/gtest-spi.h	/^#define EXPECT_FATAL_FAILURE_ON_ALL_THREADS(/;"	d
EXPECT_FLOAT_EQ	include/gtest/gtest.h	/^#define EXPECT_FLOAT_EQ(/;"	d
EXPECT_GE	include/gtest/gtest.h	/^#define EXPECT_GE(/;"	d
EXPECT_GT	include/gtest/gtest.h	/^#define EXPECT_GT(/;"	d
EXPECT_HRESULT_FAILED	include/gtest/gtest.h	/^# define EXPECT_HRESULT_FAILED(/;"	d
EXPECT_HRESULT_SUCCEEDED	include/gtest/gtest.h	/^# define EXPECT_HRESULT_SUCCEEDED(/;"	d
EXPECT_LE	include/gtest/gtest.h	/^#define EXPECT_LE(/;"	d
EXPECT_LT	include/gtest/gtest.h	/^#define EXPECT_LT(/;"	d
EXPECT_NE	include/gtest/gtest.h	/^#define EXPECT_NE(/;"	d
EXPECT_NEAR	include/gtest/gtest.h	/^#define EXPECT_NEAR(/;"	d
EXPECT_NONFATAL_FAILURE	include/gtest/gtest-spi.h	/^#define EXPECT_NONFATAL_FAILURE(/;"	d
EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS	include/gtest/gtest-spi.h	/^#define EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(/;"	d
EXPECT_NO_FATAL_FAILURE	include/gtest/gtest.h	/^#define EXPECT_NO_FATAL_FAILURE(/;"	d
EXPECT_NO_THROW	include/gtest/gtest.h	/^#define EXPECT_NO_THROW(/;"	d
EXPECT_PRED1	include/gtest/gtest_pred_impl.h	/^#define EXPECT_PRED1(/;"	d
EXPECT_PRED1Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate1Test EXPECT_PRED1Test;$/;"	t	file:
EXPECT_PRED2	include/gtest/gtest_pred_impl.h	/^#define EXPECT_PRED2(/;"	d
EXPECT_PRED2Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate2Test EXPECT_PRED2Test;$/;"	t	file:
EXPECT_PRED3	include/gtest/gtest_pred_impl.h	/^#define EXPECT_PRED3(/;"	d
EXPECT_PRED3Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate3Test EXPECT_PRED3Test;$/;"	t	file:
EXPECT_PRED4	include/gtest/gtest_pred_impl.h	/^#define EXPECT_PRED4(/;"	d
EXPECT_PRED4Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate4Test EXPECT_PRED4Test;$/;"	t	file:
EXPECT_PRED5	include/gtest/gtest_pred_impl.h	/^#define EXPECT_PRED5(/;"	d
EXPECT_PRED5Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate5Test EXPECT_PRED5Test;$/;"	t	file:
EXPECT_PRED_FORMAT1	include/gtest/gtest_pred_impl.h	/^#define EXPECT_PRED_FORMAT1(/;"	d
EXPECT_PRED_FORMAT1Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate1Test EXPECT_PRED_FORMAT1Test;$/;"	t	file:
EXPECT_PRED_FORMAT2	include/gtest/gtest_pred_impl.h	/^#define EXPECT_PRED_FORMAT2(/;"	d
EXPECT_PRED_FORMAT2Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate2Test EXPECT_PRED_FORMAT2Test;$/;"	t	file:
EXPECT_PRED_FORMAT3	include/gtest/gtest_pred_impl.h	/^#define EXPECT_PRED_FORMAT3(/;"	d
EXPECT_PRED_FORMAT3Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate3Test EXPECT_PRED_FORMAT3Test;$/;"	t	file:
EXPECT_PRED_FORMAT4	include/gtest/gtest_pred_impl.h	/^#define EXPECT_PRED_FORMAT4(/;"	d
EXPECT_PRED_FORMAT4Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate4Test EXPECT_PRED_FORMAT4Test;$/;"	t	file:
EXPECT_PRED_FORMAT5	include/gtest/gtest_pred_impl.h	/^#define EXPECT_PRED_FORMAT5(/;"	d
EXPECT_PRED_FORMAT5Test	test/gtest_pred_impl_unittest.cc	/^typedef Predicate5Test EXPECT_PRED_FORMAT5Test;$/;"	t	file:
EXPECT_PRINT_TO_STRING_	test/googletest-printers-test.cc	/^#define EXPECT_PRINT_TO_STRING_(/;"	d	file:
EXPECT_PRINT_TO_STRING_	test/googletest-printers-test.cc	/^#undef EXPECT_PRINT_TO_STRING_$/;"	d	file:
EXPECT_STRCASEEQ	include/gtest/gtest.h	/^#define EXPECT_STRCASEEQ(/;"	d
EXPECT_STRCASENE	include/gtest/gtest.h	/^#define EXPECT_STRCASENE(/;"	d
EXPECT_STREQ	include/gtest/gtest.h	/^#define EXPECT_STREQ(/;"	d
EXPECT_STRNE	include/gtest/gtest.h	/^#define EXPECT_STRNE(/;"	d
EXPECT_THROW	include/gtest/gtest.h	/^#define EXPECT_THROW(/;"	d
EXPECT_TRUE	include/gtest/gtest.h	/^#define EXPECT_TRUE(/;"	d
EX_BINARY_OUTPUT	test/googletest-catch-exceptions-test.py	/^EX_BINARY_OUTPUT = gtest_test_utils.Subprocess($/;"	v
EX_EXE_PATH	test/googletest-catch-exceptions-test.py	/^EX_EXE_PATH = gtest_test_utils.GetTestExecutablePath($/;"	v
EditType	include/gtest/internal/gtest-internal.h	/^enum EditType { kMatch, kAdd, kRemove, kReplace };$/;"	g	namespace:testing::internal::edit_distance
EditsToString	test/gtest_unittest.cc	/^std::string EditsToString(const std::vector<EditType>& edits) {$/;"	f	namespace:__anon40
ElemFromList	include/gtest/internal/gtest-internal.h	/^struct ElemFromList<N, IndexSequence<I...>, T...>$/;"	s	namespace:testing::internal
ElemFromListImpl	include/gtest/internal/gtest-internal.h	/^struct ElemFromListImpl {};$/;"	s	namespace:testing::internal
ElemFromListImpl	include/gtest/internal/gtest-internal.h	/^struct ElemFromListImpl<T, I, I> {$/;"	s	namespace:testing::internal
ElseNode	scripts/pump.py	/^class ElseNode:$/;"	c
EmptyBasenameParamInst	test/googletest-output-test_.cc	/^class EmptyBasenameParamInst : public testing::TestWithParam<int> {};$/;"	c	file:
EmptyTestEventListener	include/gtest/gtest.h	/^class EmptyTestEventListener : public TestEventListener {$/;"	c	namespace:testing
EncodeMultipartFormData	scripts/upload.py	/^def EncodeMultipartFormData(fields, files):$/;"	f
EndsWithCaseInsensitive	src/gtest.cc	/^bool String::EndsWithCaseInsensitive($/;"	f	class:testing::internal::String
Enqueue	samples/sample3-inl.h	/^  void Enqueue(const E& element) {$/;"	f	class:Queue
EnumWithPrintTo	test/googletest-printers-test.cc	/^enum EnumWithPrintTo {$/;"	g	file:
EnumWithStreaming	test/googletest-printers-test.cc	/^enum EnumWithStreaming {$/;"	g	file:
EnumWithoutPrinter	test/googletest-printers-test.cc	/^enum EnumWithoutPrinter {$/;"	g	file:
Env	scripts/pump.py	/^class Env:$/;"	c
Environment	include/gtest/gtest.h	/^class Environment {$/;"	c	namespace:testing
Environment	test/googletest-param-test-test.cc	/^  typedef TestGenerationEnvironment<PARAMETER_COUNT> Environment;$/;"	t	class:TestGenerationTest	file:
EnvironmentInvocationCatcher	test/googletest-listener-test.cc	/^class EnvironmentInvocationCatcher : public Environment {$/;"	c	namespace:testing::internal	file:
Eof	scripts/pump.py	/^def Eof():$/;"	f
Eq	include/gtest/gtest-matchers.h	/^inline internal::EqMatcher<T> Eq(T x) { return internal::EqMatcher<T>(x); }$/;"	f	namespace:testing
EqFailure	src/gtest.cc	/^AssertionResult EqFailure(const char* lhs_expression,$/;"	f	namespace:testing::internal
EqHelper	include/gtest/gtest.h	/^class EqHelper {$/;"	c	namespace:testing::internal
EqMatcher	include/gtest/gtest-matchers.h	/^  explicit EqMatcher(const Rhs& rhs)$/;"	f	class:testing::internal::EqMatcher
EqMatcher	include/gtest/gtest-matchers.h	/^class EqMatcher : public ComparisonBase<EqMatcher<Rhs>, Rhs, AnyEq> {$/;"	c	namespace:testing::internal
EqualsFormat	test/gtest_unittest.cc	/^AssertionResult EqualsFormat(const char* \/* expr1 *\/, const char* \/* expr2 *\/,$/;"	f	namespace:__anon40
ErrorExit	scripts/upload.py	/^def ErrorExit(msg):$/;"	f
EscapeJson	src/gtest.cc	/^std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {$/;"	f	class:testing::internal::JsonUnitTestResultPrinter
EscapeXml	src/gtest.cc	/^std::string XmlUnitTestResultPrinter::EscapeXml($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
EscapeXmlAttribute	src/gtest.cc	/^  static std::string EscapeXmlAttribute(const std::string& str) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
EscapeXmlText	src/gtest.cc	/^  static std::string EscapeXmlText(const char* str) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
EvalExp	scripts/pump.py	/^  def EvalExp(self, exp):$/;"	m	class:Env
EventForwardingEnabled	src/gtest.cc	/^bool TestEventListeners::EventForwardingEnabled() const {$/;"	f	class:testing::TestEventListeners
EventForwardingEnabled	test/gtest_unittest.cc	/^  static bool EventForwardingEnabled(const TestEventListeners& listeners) {$/;"	f	class:testing::internal::TestEventListenersAccessor
EventRecordingListener	test/googletest-listener-test.cc	/^  explicit EventRecordingListener(const char* name) : name_(name) {}$/;"	f	class:testing::internal::EventRecordingListener
EventRecordingListener	test/googletest-listener-test.cc	/^class EventRecordingListener : public TestEventListener {$/;"	c	namespace:testing::internal	file:
EventRecordingListener2	test/googletest-listener-test.cc	/^  explicit EventRecordingListener2(const char* name) : name_(name) {}$/;"	f	class:testing::internal::EventRecordingListener2
EventRecordingListener2	test/googletest-listener-test.cc	/^class EventRecordingListener2 : public TestEventListener {$/;"	c	namespace:testing::internal	file:
ExecDeathTest	src/gtest-death-test.cc	/^  ExecDeathTest(const char* a_statement, Matcher<const std::string&> matcher,$/;"	f	class:testing::internal::ExecDeathTest
ExecDeathTest	src/gtest-death-test.cc	/^class ExecDeathTest : public ForkingDeathTest {$/;"	c	namespace:testing::internal	file:
ExecDeathTestArgs	src/gtest-death-test.cc	/^struct ExecDeathTestArgs {$/;"	s	namespace:testing::internal	file:
ExecDeathTestChildMain	src/gtest-death-test.cc	/^static int ExecDeathTestChildMain(void* child_arg) {$/;"	f	namespace:testing::internal
ExecDeathTestSpawnChild	src/gtest-death-test.cc	/^static pid_t ExecDeathTestSpawnChild(char* const* argv, int close_fd) {$/;"	f	namespace:testing::internal
ExitSummary	src/gtest-death-test.cc	/^static std::string ExitSummary(int exit_code) {$/;"	f	namespace:testing::internal
ExitWithExceptionCode	test/googletest-break-on-failure-unittest_.cc	/^LONG WINAPI ExitWithExceptionCode($/;"	f	namespace:__anon33
ExitedUnsuccessfully	src/gtest-death-test.cc	/^bool ExitedUnsuccessfully(int exit_status) {$/;"	f	namespace:testing::internal
ExitedWithCode	include/gtest/gtest-death-test.h	/^class GTEST_API_ ExitedWithCode {$/;"	c	namespace:testing
ExitedWithCode	src/gtest-death-test.cc	/^ExitedWithCode::ExitedWithCode(int exit_code) : exit_code_(exit_code) {$/;"	f	class:testing::ExitedWithCode
ExpNode	scripts/pump.py	/^class ExpNode:$/;"	c
ExpectDeathTestHelper	test/googletest-death-test-test.cc	/^void ExpectDeathTestHelper(bool* aborted) {$/;"	f	namespace:__anon28
ExpectDebugDeathHelper	test/googletest-death-test-test.cc	/^void ExpectDebugDeathHelper(bool* aborted) {$/;"	f	namespace:__anon28
ExpectFailureTest	test/googletest-output-test_.cc	/^class ExpectFailureTest : public testing::Test {$/;"	c	file:
ExpectFailureWithThreadsTest	test/googletest-output-test_.cc	/^class ExpectFailureWithThreadsTest : public ExpectFailureTest {$/;"	c	file:
ExpectFailureWithThreadsTest	test/gtest_unittest.cc	/^    ExpectFailureWithThreadsTest;$/;"	t	namespace:__anon40	file:
ExpectFatalFailureTest	test/gtest_unittest.cc	/^typedef ScopedFakeTestPartResultReporterTest ExpectFatalFailureTest;$/;"	t	namespace:__anon40	file:
ExpectKeyAndValueWereRecordedForId	test/gtest_stress_test.cc	/^void ExpectKeyAndValueWereRecordedForId($/;"	f	namespace:testing::__anon30
ExpectNonFatalFailureRecordingPropertyWithReservedKey	test/gtest_unittest.cc	/^void ExpectNonFatalFailureRecordingPropertyWithReservedKey($/;"	f	namespace:__anon40
ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTest	test/gtest_unittest.cc	/^void ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTest($/;"	f	namespace:__anon40
ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTestSuite	test/gtest_unittest.cc	/^void ExpectNonFatalFailureRecordingPropertyWithReservedKeyForCurrentTestSuite($/;"	f	namespace:__anon40
ExpectNonFatalFailureRecordingPropertyWithReservedKeyOutsideOfTestSuite	test/gtest_unittest.cc	/^void ExpectNonFatalFailureRecordingPropertyWithReservedKeyOutsideOfTestSuite($/;"	f	namespace:__anon40
ExpectNonfatalFailureTest	test/gtest_unittest.cc	/^typedef ScopedFakeTestPartResultReporterTest ExpectNonfatalFailureTest;$/;"	t	namespace:__anon40	file:
ExplainMatchResultTo	include/gtest/gtest-matchers.h	/^  void ExplainMatchResultTo(const T& x, ::std::ostream* os) const {$/;"	f	class:testing::internal::MatcherBase
ExternalGeneratorTest	test/googletest-param-test-test.cc	/^class ExternalGeneratorTest : public TestWithParam<int> {};$/;"	c	file:
ExternalInstantiationTest	test/googletest-param-test-test.h	/^class ExternalInstantiationTest : public ::testing::TestWithParam<int> {$/;"	c
ExternalUtilityThatCallsRecordProperty	test/gtest_xml_output_unittest_.cc	/^void ExternalUtilityThatCallsRecordProperty(const std::string& key, int value) {$/;"	f
ExternalUtilityThatCallsRecordProperty	test/gtest_xml_output_unittest_.cc	/^void ExternalUtilityThatCallsRecordProperty(const std::string& key,$/;"	f
ExtractSummary	src/gtest-test-part.cc	/^std::string TestPartResult::ExtractSummary(const char* message) {$/;"	f	class:testing::TestPartResult
FAIL	include/gtest/gtest.h	/^# define FAIL(/;"	d
FATAL_FAILURE	test/googletest-output-test_.cc	/^    FATAL_FAILURE,$/;"	e	enum:ExpectFailureTest::FailureMode	file:
FATAL_FAILURE	test/gtest_environment_test.cc	/^  NO_FAILURE, NON_FATAL_FAILURE, FATAL_FAILURE$/;"	e	enum:__anon26::FailureType	file:
FATAL_FAILURE	test/gtest_unittest.cc	/^    FATAL_FAILURE,$/;"	e	enum:__anon40::ScopedFakeTestPartResultReporterTest::FailureMode	file:
FClose	include/gtest/internal/gtest-port.h	/^inline int FClose(FILE* fp) { return fclose(fp); }$/;"	f	namespace:testing::internal::posix
FDOpen	include/gtest/internal/gtest-port.h	/^inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }$/;"	f	namespace:testing::internal::posix
FILTERED_TESTS	test/googletest-shuffle-test.py	/^FILTERED_TESTS = []$/;"	v
FILTER_ENV_VAR	test/googletest-filter-unittest.py	/^FILTER_ENV_VAR = 'GTEST_FILTER'$/;"	v
FILTER_FLAG	test/googletest-catch-exceptions-test.py	/^FILTER_FLAG = FLAG_PREFIX + 'filter'$/;"	v
FILTER_FLAG	test/googletest-filter-unittest.py	/^FILTER_FLAG = 'gtest_filter'$/;"	v
FLAG_PREFIX	test/googletest-catch-exceptions-test.py	/^FLAG_PREFIX = '--gtest_'$/;"	v
FLAG_PREFIX	test/gtest_help_test.py	/^FLAG_PREFIX = '--gtest_'$/;"	v
FOpen	include/gtest/internal/gtest-port.h	/^inline FILE* FOpen(const char* path, const char* mode) {$/;"	f	namespace:testing::internal::posix
FRIEND_TEST	include/gtest/gtest_prod.h	/^#define FRIEND_TEST(/;"	d
FRIEND_TEST_Test2	test/gtest_unittest.cc	/^class FRIEND_TEST_Test2 : public Test {$/;"	c	namespace:__anon42	file:
FReopen	include/gtest/internal/gtest-port.h	/^inline FILE *FReopen(const char* path, const char* mode, FILE* stream) {$/;"	f	namespace:testing::internal::posix
FUSED_GTEST_ALL_CC	scripts/test/Makefile	/^FUSED_GTEST_ALL_CC = $(FUSED_GTEST_DIR)\/gtest\/gtest-all.cc$/;"	m
FUSED_GTEST_DIR	scripts/test/Makefile	/^FUSED_GTEST_DIR = output$/;"	m
FUSED_GTEST_H	scripts/test/Makefile	/^FUSED_GTEST_H = $(FUSED_GTEST_DIR)\/gtest\/gtest.h$/;"	m
Factorial	samples/sample1.cc	/^int Factorial(int n) {$/;"	f
Fail	test/gtest_assert_by_exception_test.cc	/^void Fail(const char* msg) {$/;"	f
Fail	test/gtest_throw_on_failure_ex_test.cc	/^void Fail(const char* msg) {$/;"	f
FailFatally	test/gtest_unittest.cc	/^static void FailFatally() { FAIL(); }$/;"	f	file:
FailFromInternalError	src/gtest-death-test.cc	/^static void FailFromInternalError(int fd) {$/;"	f	namespace:testing::internal
Failed	include/gtest/gtest.h	/^  bool Failed() const { return failed_test_count() > 0; }$/;"	f	class:testing::TestSuite
Failed	src/gtest-internal-inl.h	/^  bool Failed() const {$/;"	f	class:testing::internal::UnitTestImpl
Failed	src/gtest.cc	/^bool TestResult::Failed() const {$/;"	f	class:testing::TestResult
Failed	src/gtest.cc	/^bool UnitTest::Failed() const { return impl()->Failed(); }$/;"	f	class:testing::UnitTest
FailedTest	test/gtest_xml_output_unittest_.cc	/^class FailedTest : public Test {$/;"	c	file:
FailingParamTest	test/googletest-output-test_.cc	/^class FailingParamTest : public testing::TestWithParam<int> {};$/;"	c	file:
FailingThread	test/gtest_stress_test.cc	/^void FailingThread(bool is_fatal) {$/;"	f	namespace:testing::__anon30
Fails	test/gtest_unittest.cc	/^  void Fails() {$/;"	f	class:__anon40::NoFatalFailureTest
FailsNonFatal	test/gtest_unittest.cc	/^  void FailsNonFatal() {$/;"	f	class:__anon40::NoFatalFailureTest
FailureMode	test/googletest-output-test_.cc	/^  enum FailureMode {$/;"	g	class:ExpectFailureTest	file:
FailureMode	test/gtest_unittest.cc	/^  enum FailureMode {$/;"	g	class:__anon40::ScopedFakeTestPartResultReporterTest	file:
FailureType	test/gtest_environment_test.cc	/^enum FailureType {$/;"	g	namespace:__anon26	file:
FakeSocketWriter	test/gtest_unittest.cc	/^  class FakeSocketWriter : public StreamingListener::AbstractSocketWriter {$/;"	c	class:testing::internal::StreamingListenerTest	file:
FalseHRESULTSuccess	test/gtest_unittest.cc	/^static HRESULT FalseHRESULTSuccess() {$/;"	f	namespace:__anon40
FatalFailure	test/googletest-output-test_.cc	/^void FatalFailure() {$/;"	f
FatalFailureInFixtureConstructorTest	test/googletest-output-test_.cc	/^  FatalFailureInFixtureConstructorTest() {$/;"	f	class:FatalFailureInFixtureConstructorTest
FatalFailureInFixtureConstructorTest	test/googletest-output-test_.cc	/^class FatalFailureInFixtureConstructorTest : public testing::Test {$/;"	c	file:
FatalFailureInSetUpTest	test/googletest-output-test_.cc	/^class FatalFailureInSetUpTest : public testing::Test {$/;"	c	file:
FileExists	test/gtest_premature_exit_test.cc	/^  static bool FileExists(const char* filepath) {$/;"	f	class:__anon35::PrematureExitTest
FileNo	include/gtest/internal/gtest-port.h	/^inline int FileNo(FILE* file) { return _fileno(file); }$/;"	f	namespace:testing::internal::posix
FileNo	include/gtest/internal/gtest-port.h	/^inline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }$/;"	f	namespace:testing::internal::posix
FileOrDirectoryExists	src/gtest-filepath.cc	/^bool FilePath::FileOrDirectoryExists() const {$/;"	f	class:testing::internal::FilePath
FilePath	include/gtest/internal/gtest-filepath.h	/^  FilePath() : pathname_("") { }$/;"	f	class:testing::internal::FilePath
FilePath	include/gtest/internal/gtest-filepath.h	/^  FilePath(const FilePath& rhs) : pathname_(rhs.pathname_) { }$/;"	f	class:testing::internal::FilePath
FilePath	include/gtest/internal/gtest-filepath.h	/^  explicit FilePath(const std::string& pathname) : pathname_(pathname) {$/;"	f	class:testing::internal::FilePath
FilePath	include/gtest/internal/gtest-filepath.h	/^class GTEST_API_ FilePath {$/;"	c	namespace:testing::internal
Filter	test/gtest_unittest.cc	/^  static Flags Filter(const char* filter) {$/;"	f	struct:testing::Flags
FilterFlag	test/googletest-shuffle-test.py	/^def FilterFlag(test_filter):$/;"	f
FilterMatchesTest	src/gtest.cc	/^bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,$/;"	f	class:testing::internal::UnitTestOptions
FilterTests	src/gtest.cc	/^int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {$/;"	f	class:testing::internal::UnitTestImpl
FinalSuccessChecker	test/gtest-unittest-api_test.cc	/^class FinalSuccessChecker : public Environment {$/;"	c	namespace:testing::internal	file:
FindFirst	scripts/pump.py	/^def FindFirst(lines, token_table, cursor):$/;"	f
FindFirstInLine	scripts/pump.py	/^def FindFirstInLine(line, token_table):$/;"	f
FindLastPathSeparator	src/gtest-filepath.cc	/^const char* FilePath::FindLastPathSeparator() const {$/;"	f	class:testing::internal::FilePath
FindTestSuite	test/gtest-unittest-api_test.cc	/^  static const TestSuite* FindTestSuite(const char* name) {$/;"	f	class:testing::internal::UnitTestHelper
Fixture	test/gtest_skip_test.cc	/^class Fixture : public Test {$/;"	c	file:
FixtureConstructorExecuted	test/googletest-param-test-test.cc	/^  void FixtureConstructorExecuted() { fixture_constructor_count_++; }$/;"	f	class:TestGenerationEnvironment
FlagToEnvVar	src/gtest-port.cc	/^static std::string FlagToEnvVar(const char* flag) {$/;"	f	namespace:testing::internal
FlagfileTest	test/gtest_unittest.cc	/^class FlagfileTest : public ParseFlagsTest {$/;"	c	namespace:testing	file:
Flags	test/gtest_unittest.cc	/^  Flags() : also_run_disabled_tests(false),$/;"	f	struct:testing::Flags
Flags	test/gtest_unittest.cc	/^struct Flags {$/;"	s	namespace:testing	file:
FlatTuple	include/gtest/internal/gtest-internal.h	/^  explicit FlatTuple(T... t) : FlatTuple::FlatTupleBase(std::move(t)...) {}$/;"	f	class:testing::internal::FlatTuple
FlatTuple	include/gtest/internal/gtest-internal.h	/^class FlatTuple$/;"	c	namespace:testing::internal
FlatTupleBase	include/gtest/internal/gtest-internal.h	/^  explicit FlatTupleBase(T... t)$/;"	f	struct:testing::internal::FlatTupleBase
FlatTupleBase	include/gtest/internal/gtest-internal.h	/^struct FlatTupleBase<FlatTuple<T...>, IndexSequence<Idx...>>$/;"	s	namespace:testing::internal
FlatTupleElemBase	include/gtest/internal/gtest-internal.h	/^  explicit FlatTupleElemBase(value_type t) : value(std::move(t)) {}$/;"	f	struct:testing::internal::FlatTupleElemBase
FlatTupleElemBase	include/gtest/internal/gtest-internal.h	/^struct FlatTupleElemBase<FlatTuple<T...>, I> {$/;"	s	namespace:testing::internal
Float	include/gtest/internal/gtest-internal.h	/^typedef FloatingPoint<float> Float;$/;"	t	namespace:testing::internal
FloatLE	src/gtest.cc	/^AssertionResult FloatLE(const char* expr1, const char* expr2,$/;"	f	namespace:testing
FloatTest	test/gtest_unittest.cc	/^typedef FloatingPointTest<float> FloatTest;$/;"	t	namespace:__anon40	file:
Floating	test/gtest_unittest.cc	/^  typedef typename testing::internal::FloatingPoint<RawType> Floating;$/;"	t	class:__anon40::FloatingPointTest	file:
FloatingPoint	include/gtest/internal/gtest-internal.h	/^  explicit FloatingPoint(const RawType& x) { u_.value_ = x; }$/;"	f	class:testing::internal::FloatingPoint
FloatingPoint	include/gtest/internal/gtest-internal.h	/^class FloatingPoint {$/;"	c	namespace:testing::internal
FloatingPointLE	src/gtest.cc	/^AssertionResult FloatingPointLE(const char* expr1,$/;"	f	namespace:testing::internal
FloatingPointTest	test/gtest_unittest.cc	/^class FloatingPointTest : public Test {$/;"	c	namespace:__anon40	file:
FloatingPointUnion	include/gtest/internal/gtest-internal.h	/^  union FloatingPointUnion {$/;"	u	class:testing::internal::FloatingPoint
FlushEdits	src/gtest.cc	/^  void FlushEdits() {$/;"	f	class:testing::internal::edit_distance::__anon12::Hunk	file:
FlushInfoLog	include/gtest/internal/gtest-port.h	/^inline void FlushInfoLog() { fflush(nullptr); }$/;"	f	namespace:testing::internal
Foo	test/googletest-printers-test.cc	/^struct Foo {$/;"	s	namespace:testing::gtest_printers_test	file:
Foo	test/gtest_unittest.cc	/^  Foo() {}$/;"	f	class:__anon42::Foo
Foo	test/gtest_unittest.cc	/^class Foo {$/;"	c	namespace:__anon42	file:
FooEnvironment	test/googletest-output-test_.cc	/^class FooEnvironment : public testing::Environment {$/;"	c	file:
FooTest	test/googletest-filter-unittest_.cc	/^class FooTest : public testing::Test {$/;"	c	namespace:__anon27	file:
FooTest	test/googletest-list-tests-unittest_.cc	/^class FooTest : public testing::Test {$/;"	c	file:
For	scripts/fuse_gtest_files.py	/^  from sets import Set as set  # For Python 2.3 compatibility$/;"	i
For	test/googletest-filter-unittest.py	/^  from sets import Set as set  # For Python 2.3 compatibility$/;"	i
ForEach	src/gtest-internal-inl.h	/^void ForEach(const Container& c, Functor functor) {$/;"	f	namespace:testing::internal
ForNode	scripts/pump.py	/^class ForNode:$/;"	c
ForkingDeathTest	src/gtest-death-test.cc	/^ForkingDeathTest::ForkingDeathTest(const char* a_statement,$/;"	f	class:testing::internal::ForkingDeathTest
ForkingDeathTest	src/gtest-death-test.cc	/^class ForkingDeathTest : public DeathTestImpl {$/;"	c	namespace:testing::internal	file:
Format	include/gtest/gtest-printers.h	/^  static ::std::string Format(const ToPrint& value) {$/;"	f	class:testing::internal::FormatForComparison
Format	include/gtest/gtest-printers.h	/^  static ::std::string Format(const ToPrint* value) {$/;"	f	class:testing::internal::FormatForComparison
FormatBool	src/gtest-internal-inl.h	/^  std::string FormatBool(bool value) { return value ? "1" : "0"; }$/;"	f	class:testing::internal::StreamingListener
FormatByte	src/gtest.cc	/^std::string String::FormatByte(unsigned char value) {$/;"	f	class:testing::internal::String
FormatCompilerIndependentFileLocation	src/gtest-port.cc	/^GTEST_API_ ::std::string FormatCompilerIndependentFileLocation($/;"	f	namespace:testing::internal
FormatCountableNoun	src/gtest.cc	/^static std::string FormatCountableNoun(int count,$/;"	f	namespace:testing
FormatCxxExceptionMessage	src/gtest.cc	/^static std::string FormatCxxExceptionMessage(const char* description,$/;"	f	namespace:testing::internal
FormatDeathTestOutput	src/gtest-death-test.cc	/^static ::std::string FormatDeathTestOutput(const ::std::string& output) {$/;"	f	namespace:testing::internal
FormatEpochTimeInMillisAsIso8601	src/gtest.cc	/^std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {$/;"	f	namespace:testing::internal
FormatEpochTimeInMillisAsIso8601Test	test/gtest_unittest.cc	/^class FormatEpochTimeInMillisAsIso8601Test : public Test {$/;"	c	namespace:__anon40	file:
FormatEpochTimeInMillisAsRFC3339	src/gtest.cc	/^static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {$/;"	f	namespace:testing::internal
FormatFileLocation	src/gtest-port.cc	/^GTEST_API_ ::std::string FormatFileLocation(const char* file, int line) {$/;"	f	namespace:testing::internal
FormatForComparison	include/gtest/gtest-printers.h	/^class FormatForComparison {$/;"	c	namespace:testing::internal
FormatForComparison	include/gtest/gtest-printers.h	/^class FormatForComparison<ToPrint[N], OtherOperand> {$/;"	c	namespace:testing::internal
FormatForComparisonFailureMessage	include/gtest/gtest-printers.h	/^std::string FormatForComparisonFailureMessage($/;"	f	namespace:testing::internal
FormatHexInt	src/gtest.cc	/^std::string String::FormatHexInt(int value) {$/;"	f	class:testing::internal::String
FormatHexUInt32	src/gtest.cc	/^std::string String::FormatHexUInt32(UInt32 value) {$/;"	f	class:testing::internal::String
FormatIntWidth2	src/gtest.cc	/^std::string String::FormatIntWidth2(int value) {$/;"	f	class:testing::internal::String
FormatRegexSyntaxError	src/gtest-port.cc	/^static std::string FormatRegexSyntaxError(const char* regex, int index) {$/;"	f	namespace:testing::internal
FormatSehExceptionMessage	src/gtest.cc	/^static std::string* FormatSehExceptionMessage(DWORD exception_code,$/;"	f	namespace:testing
FormatTestCount	src/gtest.cc	/^static std::string FormatTestCount(int test_count) {$/;"	f	namespace:testing
FormatTestSuiteCount	src/gtest.cc	/^static std::string FormatTestSuiteCount(int test_suite_count) {$/;"	f	namespace:testing
FormatTimeInMillisAsDuration	src/gtest.cc	/^static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {$/;"	f	namespace:testing::internal
FormatTimeInMillisAsSeconds	src/gtest.cc	/^std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {$/;"	f	namespace:testing::internal
FormatWordList	src/gtest.cc	/^static std::string FormatWordList(const std::vector<std::string>& words) {$/;"	f	namespace:testing
FuchsiaDeathTest	src/gtest-death-test.cc	/^  FuchsiaDeathTest(const char* a_statement, Matcher<const std::string&> matcher,$/;"	f	class:testing::internal::FuchsiaDeathTest
FuchsiaDeathTest	src/gtest-death-test.cc	/^class FuchsiaDeathTest : public DeathTestImpl {$/;"	c	namespace:testing::internal	file:
FullMatch	include/gtest/internal/gtest-port.h	/^  static bool FullMatch(const ::std::string& str, const RE& re) {$/;"	f	class:testing::internal::RE
FullMatch	src/gtest-port.cc	/^bool RE::FullMatch(const char* str, const RE& re) {$/;"	f	class:testing::internal::RE
FuseGTest	scripts/fuse_gtest_files.py	/^def FuseGTest(gtest_root, output_dir):$/;"	f
FuseGTestAllCc	scripts/fuse_gtest_files.py	/^def FuseGTestAllCc(gtest_root, output_dir):$/;"	f
FuseGTestAllCcToFile	scripts/fuse_gtest_files.py	/^def FuseGTestAllCcToFile(gtest_root, output_file):$/;"	f
FuseGTestH	scripts/fuse_gtest_files.py	/^def FuseGTestH(gtest_root, output_dir):$/;"	f
GENGOLDEN_FLAG	test/googletest-output-test.py	/^GENGOLDEN_FLAG = '--gengolden'$/;"	v
GMOCK_UNVERSIONED_WIKIS	scripts/release_docs.py	/^GMOCK_UNVERSIONED_WIKIS = [$/;"	v
GOLDEN_NAME	test/googletest-output-test.py	/^GOLDEN_NAME = 'googletest-output-test-golden-lin.txt'$/;"	v
GOLDEN_PATH	test/googletest-output-test.py	/^GOLDEN_PATH = os.path.join(gtest_test_utils.GetSourceDir(), GOLDEN_NAME)$/;"	v
GTEST_ALL_CC_OUTPUT	scripts/fuse_gtest_files.py	/^GTEST_ALL_CC_OUTPUT = 'gtest\/gtest-all.cc'$/;"	v
GTEST_ALL_CC_SEED	scripts/fuse_gtest_files.py	/^GTEST_ALL_CC_SEED = 'src\/gtest-all.cc'$/;"	v
GTEST_AMBIGUOUS_ELSE_BLOCKER_	include/gtest/internal/gtest-port.h	/^# define GTEST_AMBIGUOUS_ELSE_BLOCKER_ /;"	d
GTEST_AMBIGUOUS_ELSE_BLOCKER_	include/gtest/internal/gtest-port.h	/^# define GTEST_AMBIGUOUS_ELSE_BLOCKER_$/;"	d
GTEST_API_	include/gtest/internal/gtest-port.h	/^#  define GTEST_API_ /;"	d
GTEST_API_	include/gtest/internal/gtest-port.h	/^# define GTEST_API_ /;"	d
GTEST_API_	include/gtest/internal/gtest-port.h	/^# define GTEST_API_$/;"	d
GTEST_ARRAY_SIZE_	include/gtest/internal/gtest-port.h	/^#define GTEST_ARRAY_SIZE_(/;"	d
GTEST_ASSERT_	include/gtest/gtest_pred_impl.h	/^#define GTEST_ASSERT_(/;"	d
GTEST_ASSERT_EQ	include/gtest/gtest.h	/^#define GTEST_ASSERT_EQ(/;"	d
GTEST_ASSERT_GE	include/gtest/gtest.h	/^#define GTEST_ASSERT_GE(/;"	d
GTEST_ASSERT_GT	include/gtest/gtest.h	/^#define GTEST_ASSERT_GT(/;"	d
GTEST_ASSERT_LE	include/gtest/gtest.h	/^#define GTEST_ASSERT_LE(/;"	d
GTEST_ASSERT_LT	include/gtest/gtest.h	/^#define GTEST_ASSERT_LT(/;"	d
GTEST_ASSERT_NE	include/gtest/gtest.h	/^#define GTEST_ASSERT_NE(/;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_	include/gtest/internal/gtest-port.h	/^#  define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ /;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_	include/gtest/internal/gtest-port.h	/^#  define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_$/;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_	include/gtest/internal/gtest-port.h	/^# define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_$/;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_	include/gtest/internal/gtest-port.h	/^#  define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_ /;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_	include/gtest/internal/gtest-port.h	/^#  define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_$/;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_	include/gtest/internal/gtest-port.h	/^# define GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_$/;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_	include/gtest/internal/gtest-port.h	/^#  define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ /;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_	include/gtest/internal/gtest-port.h	/^#  define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_$/;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_	include/gtest/internal/gtest-port.h	/^# define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_$/;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_	include/gtest/internal/gtest-port.h	/^#  define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ /;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_	include/gtest/internal/gtest-port.h	/^#  define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_$/;"	d
GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_	include/gtest/internal/gtest-port.h	/^# define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_$/;"	d
GTEST_ATTRIBUTE_PRINTF_	include/gtest/internal/gtest-port.h	/^#  define GTEST_ATTRIBUTE_PRINTF_(/;"	d
GTEST_ATTRIBUTE_PRINTF_	include/gtest/internal/gtest-port.h	/^# define GTEST_ATTRIBUTE_PRINTF_(/;"	d
GTEST_ATTRIBUTE_UNUSED_	include/gtest/gtest.h	/^} GTEST_ATTRIBUTE_UNUSED_;  \/\/ A ScopedTrace object does its job in its$/;"	m	namespace:testing	typeref:class:testing::ScopedTrace
GTEST_ATTRIBUTE_UNUSED_	include/gtest/internal/gtest-death-test-internal.h	/^  } GTEST_ATTRIBUTE_UNUSED_;$/;"	m	class:testing::internal::DeathTest	typeref:class:testing::internal::DeathTest::ReturnSentinel
GTEST_ATTRIBUTE_UNUSED_	include/gtest/internal/gtest-port.h	/^#  define GTEST_ATTRIBUTE_UNUSED_ /;"	d
GTEST_ATTRIBUTE_UNUSED_	include/gtest/internal/gtest-port.h	/^# define GTEST_ATTRIBUTE_UNUSED_ /;"	d
GTEST_ATTRIBUTE_UNUSED_	include/gtest/internal/gtest-port.h	/^# define GTEST_ATTRIBUTE_UNUSED_$/;"	d
GTEST_ATTRIBUTE_UNUSED_	src/gtest-internal-inl.h	/^} GTEST_ATTRIBUTE_UNUSED_;$/;"	m	namespace:testing::internal	typeref:class:testing::internal::GTestFlagSaver
GTEST_ATTRIBUTE_UNUSED_	test/gtest_unittest.cc	/^static Environment* record_property_env GTEST_ATTRIBUTE_UNUSED_ =$/;"	m	namespace:__anon40	file:
GTEST_ATTRIBUTE_UNUSED_	test/gtest_unittest.cc	/^static bool dummy1 GTEST_ATTRIBUTE_UNUSED_ = StaticAssertTypeEq<bool, bool>();$/;"	v	file:
GTEST_ATTRIBUTE_UNUSED_	test/gtest_unittest.cc	/^static bool dummy2 GTEST_ATTRIBUTE_UNUSED_ =$/;"	v	file:
GTEST_BIND_	include/gtest/internal/gtest-type-util.h	/^# define GTEST_BIND_(/;"	d
GTEST_CAN_STREAM_RESULTS_	include/gtest/internal/gtest-port.h	/^# define GTEST_CAN_STREAM_RESULTS_ /;"	d
GTEST_CHECK_	include/gtest/internal/gtest-port.h	/^# define GTEST_CHECK_(/;"	d
GTEST_CHECK_INT_EQ_	test/gtest_repeat_test.cc	/^#define GTEST_CHECK_INT_EQ_(/;"	d	file:
GTEST_CHECK_POSIX_SUCCESS_	include/gtest/internal/gtest-port.h	/^#define GTEST_CHECK_POSIX_SUCCESS_(/;"	d
GTEST_COMPILE_ASSERT_	include/gtest/internal/gtest-port.h	/^#define GTEST_COMPILE_ASSERT_(/;"	d
GTEST_CONCAT_TOKEN_	include/gtest/internal/gtest-internal.h	/^#define GTEST_CONCAT_TOKEN_(/;"	d
GTEST_CONCAT_TOKEN_IMPL_	include/gtest/internal/gtest-internal.h	/^#define GTEST_CONCAT_TOKEN_IMPL_(/;"	d
GTEST_CRITICAL_SECTION	include/gtest/internal/gtest-port.h	/^typedef struct _CRITICAL_SECTION GTEST_CRITICAL_SECTION;$/;"	t	typeref:struct:_CRITICAL_SECTION
GTEST_CRITICAL_SECTION	include/gtest/internal/gtest-port.h	/^typedef struct _RTL_CRITICAL_SECTION GTEST_CRITICAL_SECTION;$/;"	t	typeref:struct:_RTL_CRITICAL_SECTION
GTEST_DEATH_TEST_	include/gtest/internal/gtest-death-test-internal.h	/^#define GTEST_DEATH_TEST_(/;"	d
GTEST_DEATH_TEST_CHECK_	src/gtest-death-test.cc	/^# define GTEST_DEATH_TEST_CHECK_(/;"	d	file:
GTEST_DEATH_TEST_CHECK_SYSCALL_	src/gtest-death-test.cc	/^# define GTEST_DEATH_TEST_CHECK_SYSCALL_(/;"	d	file:
GTEST_DECLARE_STATIC_MUTEX_	include/gtest/internal/gtest-port.h	/^#  define GTEST_DECLARE_STATIC_MUTEX_(/;"	d
GTEST_DECLARE_STATIC_MUTEX_	include/gtest/internal/gtest-port.h	/^# define GTEST_DECLARE_STATIC_MUTEX_(/;"	d
GTEST_DECLARE_bool_	include/gtest/internal/gtest-port.h	/^# define GTEST_DECLARE_bool_(/;"	d
GTEST_DECLARE_int32_	include/gtest/internal/gtest-port.h	/^# define GTEST_DECLARE_int32_(/;"	d
GTEST_DECLARE_string_	include/gtest/internal/gtest-port.h	/^# define GTEST_DECLARE_string_(/;"	d
GTEST_DEFAULT_DEATH_TEST_STYLE	include/gtest/internal/gtest-port.h	/^# define GTEST_DEFAULT_DEATH_TEST_STYLE /;"	d
GTEST_DEFAULT_OUTPUT_FILE	test/googletest-json-output-unittest.py	/^GTEST_DEFAULT_OUTPUT_FILE = 'test_detail.json'$/;"	v
GTEST_DEFAULT_OUTPUT_FILE	test/gtest_xml_output_unittest.py	/^GTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'$/;"	v
GTEST_DEFAULT_OUTPUT_FILE	test/gtest_xml_test_utils.py	/^GTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'$/;"	v
GTEST_DEFINE_STATIC_MUTEX_	include/gtest/internal/gtest-port.h	/^# define GTEST_DEFINE_STATIC_MUTEX_(/;"	d
GTEST_DEFINE_STATIC_MUTEX_	include/gtest/internal/gtest-port.h	/^#define GTEST_DEFINE_STATIC_MUTEX_(/;"	d
GTEST_DEFINE_bool_	include/gtest/internal/gtest-port.h	/^# define GTEST_DEFINE_bool_(/;"	d
GTEST_DEFINE_int32_	include/gtest/internal/gtest-port.h	/^# define GTEST_DEFINE_int32_(/;"	d
GTEST_DEFINE_string_	include/gtest/internal/gtest-port.h	/^# define GTEST_DEFINE_string_(/;"	d
GTEST_DEV_EMAIL_	include/gtest/internal/gtest-port.h	/^# define GTEST_DEV_EMAIL_ /;"	d
GTEST_DISABLE_MSC_DEPRECATED_POP_	include/gtest/internal/gtest-port.h	/^# define GTEST_DISABLE_MSC_DEPRECATED_POP_(/;"	d
GTEST_DISABLE_MSC_DEPRECATED_POP_	include/gtest/internal/gtest-port.h	/^#define GTEST_DISABLE_MSC_DEPRECATED_POP_(/;"	d
GTEST_DISABLE_MSC_DEPRECATED_PUSH_	include/gtest/internal/gtest-port.h	/^# define GTEST_DISABLE_MSC_DEPRECATED_PUSH_(/;"	d
GTEST_DISABLE_MSC_WARNINGS_POP_	include/gtest/internal/gtest-port.h	/^# define GTEST_DISABLE_MSC_WARNINGS_POP_(/;"	d
GTEST_DISABLE_MSC_WARNINGS_PUSH_	include/gtest/internal/gtest-port.h	/^# define GTEST_DISABLE_MSC_WARNINGS_PUSH_(/;"	d
GTEST_DISALLOW_ASSIGN_	include/gtest/internal/gtest-port.h	/^#define GTEST_DISALLOW_ASSIGN_(/;"	d
GTEST_DISALLOW_COPY_AND_ASSIGN_	include/gtest/internal/gtest-port.h	/^#define GTEST_DISALLOW_COPY_AND_ASSIGN_(/;"	d
GTEST_ERROR	include/gtest/internal/gtest-port.h	/^  GTEST_ERROR,$/;"	e	enum:testing::internal::GTestLogSeverity
GTEST_EXCLUSIVE_LOCK_REQUIRED_	include/gtest/internal/gtest-port.h	/^# define GTEST_EXCLUSIVE_LOCK_REQUIRED_(/;"	d
GTEST_EXECUTE_DEATH_TEST_STATEMENT_	include/gtest/internal/gtest-death-test-internal.h	/^#  define GTEST_EXECUTE_DEATH_TEST_STATEMENT_(/;"	d
GTEST_EXECUTE_STATEMENT_	include/gtest/internal/gtest-death-test-internal.h	/^#define GTEST_EXECUTE_STATEMENT_(/;"	d
GTEST_EXPAND_	include/gtest/gtest-param-test.h	/^#define GTEST_EXPAND_(/;"	d
GTEST_FAIL	include/gtest/gtest.h	/^#define GTEST_FAIL(/;"	d
GTEST_FAIL_AT	include/gtest/gtest.h	/^#define GTEST_FAIL_AT(/;"	d
GTEST_FATAL	include/gtest/internal/gtest-port.h	/^  GTEST_FATAL$/;"	e	enum:testing::internal::GTestLogSeverity
GTEST_FATAL_FAILURE_	include/gtest/internal/gtest-internal.h	/^#define GTEST_FATAL_FAILURE_(/;"	d
GTEST_FILTER_FLAG	test/googletest-json-output-unittest.py	/^GTEST_FILTER_FLAG = '--gtest_filter'$/;"	v
GTEST_FILTER_FLAG	test/gtest_xml_output_unittest.py	/^GTEST_FILTER_FLAG = '--gtest_filter'$/;"	v
GTEST_FLAG	include/gtest/internal/gtest-port.h	/^# define GTEST_FLAG(/;"	d
GTEST_FLAG_PREFIX_	include/gtest/internal/gtest-port.h	/^# define GTEST_FLAG_PREFIX_ /;"	d
GTEST_FLAG_PREFIX_DASH_	include/gtest/internal/gtest-port.h	/^# define GTEST_FLAG_PREFIX_DASH_ /;"	d
GTEST_FLAG_PREFIX_UPPER_	include/gtest/internal/gtest-port.h	/^# define GTEST_FLAG_PREFIX_UPPER_ /;"	d
GTEST_FLAG_SAVER_	include/gtest/internal/gtest-port.h	/^# define GTEST_FLAG_SAVER_ /;"	d
GTEST_FLAT_TUPLE_INT128	test/gtest_unittest.cc	/^#define GTEST_FLAT_TUPLE_INT128 /;"	d	file:
GTEST_FLAT_TUPLE_INT16	test/gtest_unittest.cc	/^#define GTEST_FLAT_TUPLE_INT16 /;"	d	file:
GTEST_FLAT_TUPLE_INT256	test/gtest_unittest.cc	/^#define GTEST_FLAT_TUPLE_INT256 /;"	d	file:
GTEST_FLAT_TUPLE_INT32	test/gtest_unittest.cc	/^#define GTEST_FLAT_TUPLE_INT32 /;"	d	file:
GTEST_FLAT_TUPLE_INT64	test/gtest_unittest.cc	/^#define GTEST_FLAT_TUPLE_INT64 /;"	d	file:
GTEST_FLAT_TUPLE_INT8	test/gtest_unittest.cc	/^#define GTEST_FLAT_TUPLE_INT8 /;"	d	file:
GTEST_GCC_VER_	include/gtest/internal/gtest-port.h	/^# define GTEST_GCC_VER_ /;"	d
GTEST_GET_FIRST_	include/gtest/gtest-param-test.h	/^#define GTEST_GET_FIRST_(/;"	d
GTEST_GET_SECOND_	include/gtest/gtest-param-test.h	/^#define GTEST_GET_SECOND_(/;"	d
GTEST_GROUP	scripts/upload_gtest.py	/^GTEST_GROUP = 'googletestframework@googlegroups.com'$/;"	v
GTEST_HAS_ALT_PATH_SEP_	include/gtest/internal/gtest-port.h	/^# define GTEST_HAS_ALT_PATH_SEP_ /;"	d
GTEST_HAS_CLONE	include/gtest/internal/gtest-port.h	/^#     define GTEST_HAS_CLONE /;"	d
GTEST_HAS_CLONE	include/gtest/internal/gtest-port.h	/^#   define GTEST_HAS_CLONE /;"	d
GTEST_HAS_CLONE	include/gtest/internal/gtest-port.h	/^#  define GTEST_HAS_CLONE /;"	d
GTEST_HAS_CXXABI_H_	include/gtest/internal/gtest-port.h	/^#  define GTEST_HAS_CXXABI_H_ /;"	d
GTEST_HAS_DEATH_TEST	include/gtest/internal/gtest-port.h	/^# define GTEST_HAS_DEATH_TEST /;"	d
GTEST_HAS_EXCEPTIONS	include/gtest/internal/gtest-port.h	/^#  define GTEST_HAS_EXCEPTIONS /;"	d
GTEST_HAS_GETTIMEOFDAY_	src/gtest.cc	/^#  define GTEST_HAS_GETTIMEOFDAY_ /;"	d	file:
GTEST_HAS_GETTIMEOFDAY_	src/gtest.cc	/^# define GTEST_HAS_GETTIMEOFDAY_ /;"	d	file:
GTEST_HAS_POSIX_RE	include/gtest/internal/gtest-port.h	/^#  define GTEST_HAS_POSIX_RE /;"	d
GTEST_HAS_PTHREAD	include/gtest/internal/gtest-port.h	/^#define GTEST_HAS_PTHREAD /;"	d
GTEST_HAS_RTTI	include/gtest/internal/gtest-port.h	/^#    define GTEST_HAS_RTTI /;"	d
GTEST_HAS_RTTI	include/gtest/internal/gtest-port.h	/^#   define GTEST_HAS_RTTI /;"	d
GTEST_HAS_RTTI	include/gtest/internal/gtest-port.h	/^#  define GTEST_HAS_RTTI /;"	d
GTEST_HAS_SEH	include/gtest/internal/gtest-port.h	/^#  define GTEST_HAS_SEH /;"	d
GTEST_HAS_STD_STRING	include/gtest/internal/gtest-port.h	/^# define GTEST_HAS_STD_STRING /;"	d
GTEST_HAS_STD_WSTRING	include/gtest/internal/gtest-port.h	/^#define GTEST_HAS_STD_WSTRING /;"	d
GTEST_HAS_STREAM_REDIRECTION	include/gtest/internal/gtest-port.h	/^#  define GTEST_HAS_STREAM_REDIRECTION /;"	d
GTEST_HAS_TYPED_TEST	include/gtest/internal/gtest-port.h	/^# define GTEST_HAS_TYPED_TEST /;"	d
GTEST_HAS_TYPED_TEST_P	include/gtest/internal/gtest-port.h	/^# define GTEST_HAS_TYPED_TEST_P /;"	d
GTEST_H_OUTPUT	scripts/fuse_gtest_files.py	/^GTEST_H_OUTPUT = 'gtest\/gtest.h'$/;"	v
GTEST_H_SEED	scripts/fuse_gtest_files.py	/^GTEST_H_SEED = 'include\/gtest\/gtest.h'$/;"	v
GTEST_IMPL_CMP_HELPER_	include/gtest/gtest.h	/^#define GTEST_IMPL_CMP_HELPER_(/;"	d
GTEST_IMPL_CMP_HELPER_	include/gtest/gtest.h	/^#undef GTEST_IMPL_CMP_HELPER_$/;"	d
GTEST_IMPL_CMP_HELPER_	src/gtest.cc	/^#define GTEST_IMPL_CMP_HELPER_(/;"	d	file:
GTEST_IMPL_CMP_HELPER_	src/gtest.cc	/^#undef GTEST_IMPL_CMP_HELPER_$/;"	d	file:
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_	include/gtest/gtest-printers.h	/^#define GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(/;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_	include/gtest/gtest-printers.h	/^#undef GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_$/;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_	include/gtest/gtest-printers.h	/^#define GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(/;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_	include/gtest/gtest-printers.h	/^#undef GTEST_IMPL_FORMAT_C_STRING_AS_STRING_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_	include/gtest/gtest-death-test.h	/^#define GTEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_H_	include/gtest/gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_MATCHERS_H_	include/gtest/gtest-matchers.h	/^#define GTEST_INCLUDE_GTEST_GTEST_MATCHERS_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_	include/gtest/gtest-message.h	/^#define GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_	include/gtest/gtest-param-test.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_	include/gtest/gtest_pred_impl.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_	include/gtest/gtest-printers.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PROD_H_	include/gtest/gtest_prod.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PROD_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_SPI_H_	include/gtest/gtest-spi.h	/^#define GTEST_INCLUDE_GTEST_GTEST_SPI_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_TEST_PART_H_	include/gtest/gtest-test-part.h	/^#define GTEST_INCLUDE_GTEST_GTEST_TEST_PART_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_	include/gtest/gtest-typed-test.h	/^#define GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_H_	include/gtest/internal/custom/gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PORT_H_	include/gtest/internal/custom/gtest-port.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PORT_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PRINTERS_H_	include/gtest/internal/custom/gtest-printers.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PRINTERS_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_	include/gtest/internal/gtest-death-test-internal.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_	include/gtest/internal/gtest-filepath.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_	include/gtest/internal/gtest-internal.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_	include/gtest/internal/gtest-param-util.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_ARCH_H_	include/gtest/internal/gtest-port-arch.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_ARCH_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_	include/gtest/internal/gtest-port.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_	include/gtest/internal/gtest-string.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_	include/gtest/internal/gtest-type-util.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_$/;"	d
GTEST_INFO	include/gtest/internal/gtest-port.h	/^  GTEST_INFO,$/;"	e	enum:testing::internal::GTestLogSeverity
GTEST_INIT_GOOGLE_TEST_NAME_	include/gtest/internal/gtest-port.h	/^# define GTEST_INIT_GOOGLE_TEST_NAME_ /;"	d
GTEST_INTENTIONAL_CONST_COND_POP_	include/gtest/internal/gtest-port.h	/^# define GTEST_INTENTIONAL_CONST_COND_POP_(/;"	d
GTEST_INTENTIONAL_CONST_COND_PUSH_	include/gtest/internal/gtest-port.h	/^# define GTEST_INTENTIONAL_CONST_COND_PUSH_(/;"	d
GTEST_INTERNAL_DEPRECATED	include/gtest/internal/gtest-port.h	/^#define GTEST_INTERNAL_DEPRECATED(/;"	d
GTEST_IS_THREADSAFE	include/gtest/internal/gtest-port.h	/^#define GTEST_IS_THREADSAFE /;"	d
GTEST_LIST_TESTS_FLAG	test/googletest-json-output-unittest.py	/^GTEST_LIST_TESTS_FLAG = '--gtest_list_tests'$/;"	v
GTEST_LIST_TESTS_FLAG	test/gtest_list_output_unittest.py	/^GTEST_LIST_TESTS_FLAG = '--gtest_list_tests'$/;"	v
GTEST_LIST_TESTS_FLAG	test/gtest_xml_output_unittest.py	/^GTEST_LIST_TESTS_FLAG = '--gtest_list_tests'$/;"	v
GTEST_LOCK_EXCLUDED_	include/gtest/internal/gtest-port.h	/^# define GTEST_LOCK_EXCLUDED_(/;"	d
GTEST_LOCK_EXCLUDED_	src/gtest.cc	/^    GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing
GTEST_LOCK_EXCLUDED_	src/gtest.cc	/^    GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing::internal
GTEST_LOCK_EXCLUDED_	src/gtest.cc	/^    const std::string& os_stack_trace) GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing
GTEST_LOCK_EXCLUDED_	src/gtest.cc	/^UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing
GTEST_LOCK_EXCLUDED_	src/gtest.cc	/^void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {$/;"	f	namespace:testing::internal
GTEST_LOG_	include/gtest/internal/gtest-port.h	/^# define GTEST_LOG_(/;"	d
GTEST_MAIN_CC	scripts/test/Makefile	/^GTEST_MAIN_CC = ..\/..\/src\/gtest_main.cc$/;"	m
GTEST_MAYBE_5046_	include/gtest/gtest-matchers.h	/^#define GTEST_MAYBE_5046_ /;"	d
GTEST_MAYBE_5046_	include/gtest/gtest-matchers.h	/^#define GTEST_MAYBE_5046_$/;"	d
GTEST_MESSAGE_	include/gtest/internal/gtest-internal.h	/^#define GTEST_MESSAGE_(/;"	d
GTEST_MESSAGE_AT_	include/gtest/internal/gtest-internal.h	/^#define GTEST_MESSAGE_AT_(/;"	d
GTEST_MUST_USE_RESULT_	include/gtest/gtest.h	/^  int Run() GTEST_MUST_USE_RESULT_;$/;"	m	class:testing::UnitTest
GTEST_MUST_USE_RESULT_	include/gtest/internal/gtest-port.h	/^# define GTEST_MUST_USE_RESULT_ /;"	d
GTEST_MUST_USE_RESULT_	include/gtest/internal/gtest-port.h	/^# define GTEST_MUST_USE_RESULT_$/;"	d
GTEST_NAME_	include/gtest/internal/gtest-port.h	/^# define GTEST_NAME_ /;"	d
GTEST_NAME_GENERATOR_	include/gtest/gtest-typed-test.h	/^#define GTEST_NAME_GENERATOR_(/;"	d
GTEST_NONFATAL_FAILURE_	include/gtest/internal/gtest-internal.h	/^#define GTEST_NONFATAL_FAILURE_(/;"	d
GTEST_NO_INLINE_	include/gtest/internal/gtest-port.h	/^# define GTEST_NO_INLINE_ /;"	d
GTEST_NO_INLINE_	include/gtest/internal/gtest-port.h	/^# define GTEST_NO_INLINE_$/;"	d
GTEST_NO_INLINE_	src/gtest-death-test.cc	/^                                  bool* result) GTEST_NO_INLINE_;$/;"	m	namespace:testing::internal	file:
GTEST_NO_INLINE_	src/gtest-internal-inl.h	/^  std::string CurrentOsStackTraceExceptTop(int skip_count) GTEST_NO_INLINE_;$/;"	m	class:testing::internal::UnitTestImpl
GTEST_OS_AIX	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_AIX /;"	d
GTEST_OS_CYGWIN	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_CYGWIN /;"	d
GTEST_OS_DRAGONFLY	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_DRAGONFLY /;"	d
GTEST_OS_FREEBSD	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_FREEBSD /;"	d
GTEST_OS_FUCHSIA	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_FUCHSIA /;"	d
GTEST_OS_GNU_KFREEBSD	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_GNU_KFREEBSD /;"	d
GTEST_OS_HAIKU	include/gtest/internal/gtest-port-arch.h	/^#define GTEST_OS_HAIKU /;"	d
GTEST_OS_HPUX	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_HPUX /;"	d
GTEST_OS_IOS	include/gtest/internal/gtest-port-arch.h	/^#  define GTEST_OS_IOS /;"	d
GTEST_OS_LINUX	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_LINUX /;"	d
GTEST_OS_LINUX_ANDROID	include/gtest/internal/gtest-port-arch.h	/^#  define GTEST_OS_LINUX_ANDROID /;"	d
GTEST_OS_MAC	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_MAC /;"	d
GTEST_OS_NACL	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_NACL /;"	d
GTEST_OS_NETBSD	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_NETBSD /;"	d
GTEST_OS_OPENBSD	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_OPENBSD /;"	d
GTEST_OS_OS2	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_OS2 /;"	d
GTEST_OS_QNX	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_QNX /;"	d
GTEST_OS_SOLARIS	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_SOLARIS /;"	d
GTEST_OS_WINDOWS	include/gtest/internal/gtest-port-arch.h	/^#  define GTEST_OS_WINDOWS /;"	d
GTEST_OS_WINDOWS	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_WINDOWS /;"	d
GTEST_OS_WINDOWS_DESKTOP	include/gtest/internal/gtest-port-arch.h	/^#   define GTEST_OS_WINDOWS_DESKTOP /;"	d
GTEST_OS_WINDOWS_DESKTOP	include/gtest/internal/gtest-port-arch.h	/^#  define GTEST_OS_WINDOWS_DESKTOP /;"	d
GTEST_OS_WINDOWS_MINGW	include/gtest/internal/gtest-port-arch.h	/^#  define GTEST_OS_WINDOWS_MINGW /;"	d
GTEST_OS_WINDOWS_MOBILE	include/gtest/internal/gtest-port-arch.h	/^#  define GTEST_OS_WINDOWS_MOBILE /;"	d
GTEST_OS_WINDOWS_PHONE	include/gtest/internal/gtest-port-arch.h	/^#   define GTEST_OS_WINDOWS_PHONE /;"	d
GTEST_OS_WINDOWS_RT	include/gtest/internal/gtest-port-arch.h	/^#   define GTEST_OS_WINDOWS_RT /;"	d
GTEST_OS_WINDOWS_TV_TITLE	include/gtest/internal/gtest-port-arch.h	/^#   define GTEST_OS_WINDOWS_TV_TITLE /;"	d
GTEST_OS_ZOS	include/gtest/internal/gtest-port-arch.h	/^# define GTEST_OS_ZOS /;"	d
GTEST_OUTPUT_1_TEST	test/googletest-json-outfiles-test.py	/^GTEST_OUTPUT_1_TEST = 'gtest_xml_outfile1_test_'$/;"	v
GTEST_OUTPUT_1_TEST	test/gtest_xml_outfiles_test.py	/^GTEST_OUTPUT_1_TEST = "gtest_xml_outfile1_test_"$/;"	v
GTEST_OUTPUT_2_TEST	test/googletest-json-outfiles-test.py	/^GTEST_OUTPUT_2_TEST = 'gtest_xml_outfile2_test_'$/;"	v
GTEST_OUTPUT_2_TEST	test/gtest_xml_outfiles_test.py	/^GTEST_OUTPUT_2_TEST = "gtest_xml_outfile2_test_"$/;"	v
GTEST_OUTPUT_FLAG	test/googletest-json-output-unittest.py	/^GTEST_OUTPUT_FLAG = '--gtest_output'$/;"	v
GTEST_OUTPUT_FLAG	test/gtest_list_output_unittest.py	/^GTEST_OUTPUT_FLAG = '--gtest_output'$/;"	v
GTEST_OUTPUT_FLAG	test/gtest_xml_output_unittest.py	/^GTEST_OUTPUT_FLAG = '--gtest_output'$/;"	v
GTEST_OUTPUT_SUBDIR	test/googletest-json-outfiles-test.py	/^GTEST_OUTPUT_SUBDIR = 'json_outfiles'$/;"	v
GTEST_OUTPUT_SUBDIR	test/gtest_xml_outfiles_test.py	/^GTEST_OUTPUT_SUBDIR = "xml_outfiles"$/;"	v
GTEST_OUTPUT_VAR_NAME	test/gtest_test_utils.py	/^GTEST_OUTPUT_VAR_NAME = 'GTEST_OUTPUT'$/;"	v
GTEST_PATH_MAX_	src/gtest-filepath.cc	/^# define GTEST_PATH_MAX_ /;"	d	file:
GTEST_PATH_SEP_	include/gtest/internal/gtest-port.h	/^# define GTEST_PATH_SEP_ /;"	d
GTEST_PRED1_	include/gtest/gtest_pred_impl.h	/^#define GTEST_PRED1_(/;"	d
GTEST_PRED2_	include/gtest/gtest_pred_impl.h	/^#define GTEST_PRED2_(/;"	d
GTEST_PRED3_	include/gtest/gtest_pred_impl.h	/^#define GTEST_PRED3_(/;"	d
GTEST_PRED4_	include/gtest/gtest_pred_impl.h	/^#define GTEST_PRED4_(/;"	d
GTEST_PRED5_	include/gtest/gtest_pred_impl.h	/^#define GTEST_PRED5_(/;"	d
GTEST_PRED_FORMAT1_	include/gtest/gtest_pred_impl.h	/^#define GTEST_PRED_FORMAT1_(/;"	d
GTEST_PRED_FORMAT2_	include/gtest/gtest_pred_impl.h	/^#define GTEST_PRED_FORMAT2_(/;"	d
GTEST_PRED_FORMAT3_	include/gtest/gtest_pred_impl.h	/^#define GTEST_PRED_FORMAT3_(/;"	d
GTEST_PRED_FORMAT4_	include/gtest/gtest_pred_impl.h	/^#define GTEST_PRED_FORMAT4_(/;"	d
GTEST_PRED_FORMAT5_	include/gtest/gtest_pred_impl.h	/^#define GTEST_PRED_FORMAT5_(/;"	d
GTEST_PROGRAM_NAME	test/googletest-json-output-unittest.py	/^GTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'$/;"	v
GTEST_PROGRAM_NAME	test/gtest_xml_output_unittest.py	/^GTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'$/;"	v
GTEST_PROGRAM_PATH	test/googletest-json-output-unittest.py	/^GTEST_PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath(GTEST_PROGRAM_NAME)$/;"	v
GTEST_PROGRAM_PATH	test/gtest_xml_output_unittest.py	/^GTEST_PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath(GTEST_PROGRAM_NAME)$/;"	v
GTEST_PROJECT_URL_	include/gtest/internal/gtest-port.h	/^# define GTEST_PROJECT_URL_ /;"	d
GTEST_REFERENCE_TO_CONST_	include/gtest/internal/gtest-port.h	/^#define GTEST_REFERENCE_TO_CONST_(/;"	d
GTEST_REGISTERED_TEST_NAMES_	include/gtest/gtest-typed-test.h	/^#define GTEST_REGISTERED_TEST_NAMES_(/;"	d
GTEST_REMOVE_REFERENCE_AND_CONST_	include/gtest/internal/gtest-internal.h	/^#define GTEST_REMOVE_REFERENCE_AND_CONST_(/;"	d
GTEST_REPEATER_METHOD_	src/gtest.cc	/^#define GTEST_REPEATER_METHOD_(/;"	d	file:
GTEST_REPEATER_METHOD_	src/gtest.cc	/^#undef GTEST_REPEATER_METHOD_$/;"	d	file:
GTEST_REVERSE_REPEATER_METHOD_	src/gtest.cc	/^#define GTEST_REVERSE_REPEATER_METHOD_(/;"	d	file:
GTEST_REVERSE_REPEATER_METHOD_	src/gtest.cc	/^#undef GTEST_REVERSE_REPEATER_METHOD_$/;"	d	file:
GTEST_SAMPLES_PRIME_TABLES_H_	samples/prime_tables.h	/^#define GTEST_SAMPLES_PRIME_TABLES_H_$/;"	d
GTEST_SAMPLES_SAMPLE1_H_	samples/sample1.h	/^#define GTEST_SAMPLES_SAMPLE1_H_$/;"	d
GTEST_SAMPLES_SAMPLE2_H_	samples/sample2.h	/^#define GTEST_SAMPLES_SAMPLE2_H_$/;"	d
GTEST_SAMPLES_SAMPLE3_INL_H_	samples/sample3-inl.h	/^#define GTEST_SAMPLES_SAMPLE3_INL_H_$/;"	d
GTEST_SAMPLES_SAMPLE4_H_	samples/sample4.h	/^#define GTEST_SAMPLES_SAMPLE4_H_$/;"	d
GTEST_SKIP	include/gtest/gtest.h	/^#define GTEST_SKIP(/;"	d
GTEST_SKIP_	include/gtest/internal/gtest-internal.h	/^#define GTEST_SKIP_(/;"	d
GTEST_SNPRINTF_	include/gtest/internal/gtest-port.h	/^# define GTEST_SNPRINTF_(/;"	d
GTEST_SPI_H_SEED	scripts/fuse_gtest_files.py	/^GTEST_SPI_H_SEED = 'include\/gtest\/gtest-spi.h'$/;"	v
GTEST_SRC_GTEST_INTERNAL_INL_H_	src/gtest-internal-inl.h	/^#define GTEST_SRC_GTEST_INTERNAL_INL_H_$/;"	d
GTEST_STRINGIFY_	include/gtest/internal/gtest-internal.h	/^#define GTEST_STRINGIFY_(/;"	d
GTEST_SUCCEED	include/gtest/gtest.h	/^#define GTEST_SUCCEED(/;"	d
GTEST_SUCCESS_	include/gtest/internal/gtest-internal.h	/^#define GTEST_SUCCESS_(/;"	d
GTEST_SUITE_NAMESPACE_	include/gtest/gtest-typed-test.h	/^#define GTEST_SUITE_NAMESPACE_(/;"	d
GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_	include/gtest/internal/gtest-internal.h	/^#define GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(/;"	d
GTEST_TEMPLATE_	include/gtest/internal/gtest-type-util.h	/^# define GTEST_TEMPLATE_ /;"	d
GTEST_TEST	include/gtest/gtest.h	/^#define GTEST_TEST(/;"	d
GTEST_TEST	test/gtest_unittest.cc	/^GTEST_TEST(AlternativeNameTest, Works) {  \/\/ GTEST_TEST is the same as TEST.$/;"	f
GTEST_TEST_	include/gtest/internal/gtest-internal.h	/^#define GTEST_TEST_(/;"	d
GTEST_TEST_ANY_THROW_	include/gtest/internal/gtest-internal.h	/^#define GTEST_TEST_ANY_THROW_(/;"	d
GTEST_TEST_BOOLEAN_	include/gtest/internal/gtest-internal.h	/^#define GTEST_TEST_BOOLEAN_(/;"	d
GTEST_TEST_CLASS_NAME_	include/gtest/internal/gtest-internal.h	/^#define GTEST_TEST_CLASS_NAME_(/;"	d
GTEST_TEST_GTEST_PARAM_TEST_TEST_H_	test/googletest-param-test-test.h	/^#define GTEST_TEST_GTEST_PARAM_TEST_TEST_H_$/;"	d
GTEST_TEST_GTEST_TYPED_TEST_TEST_H_	test/gtest-typed-test_test.h	/^#define GTEST_TEST_GTEST_TYPED_TEST_TEST_H_$/;"	d
GTEST_TEST_NO_FATAL_FAILURE_	include/gtest/internal/gtest-internal.h	/^#define GTEST_TEST_NO_FATAL_FAILURE_(/;"	d
GTEST_TEST_NO_THROW_	include/gtest/internal/gtest-internal.h	/^#define GTEST_TEST_NO_THROW_(/;"	d
GTEST_TEST_PARSING_FLAGS_	test/gtest_unittest.cc	/^# define GTEST_TEST_PARSING_FLAGS_(/;"	d	file:
GTEST_TEST_PRODUCTION_H_	test/production.h	/^#define GTEST_TEST_PRODUCTION_H_$/;"	d
GTEST_TEST_THROW_	include/gtest/internal/gtest-internal.h	/^#define GTEST_TEST_THROW_(/;"	d
GTEST_TYPED_TEST_SUITE_P_STATE_	include/gtest/gtest-typed-test.h	/^#define GTEST_TYPED_TEST_SUITE_P_STATE_(/;"	d
GTEST_TYPE_PARAMS_	include/gtest/gtest-typed-test.h	/^#define GTEST_TYPE_PARAMS_(/;"	d
GTEST_UNSUPPORTED_DEATH_TEST	include/gtest/gtest-death-test.h	/^# define GTEST_UNSUPPORTED_DEATH_TEST(/;"	d
GTEST_UNVERSIONED_WIKIS	scripts/release_docs.py	/^GTEST_UNVERSIONED_WIKIS = ['DevGuide.wiki']$/;"	v
GTEST_USES_POSIX_RE	include/gtest/internal/gtest-port.h	/^# define GTEST_USES_POSIX_RE /;"	d
GTEST_USES_SIMPLE_RE	include/gtest/internal/gtest-port.h	/^# define GTEST_USES_SIMPLE_RE /;"	d
GTEST_USE_OWN_FLAGFILE_FLAG_	include/gtest/internal/gtest-port.h	/^# define GTEST_USE_OWN_FLAGFILE_FLAG_ /;"	d
GTEST_USE_UNPROTECTED_COMMA_	test/gtest_unittest.cc	/^#define GTEST_USE_UNPROTECTED_COMMA_ /;"	d	file:
GTEST_WARNING	include/gtest/internal/gtest-port.h	/^  GTEST_WARNING,$/;"	e	enum:testing::internal::GTestLogSeverity
GTEST_WIDE_STRING_USES_UTF16_	include/gtest/internal/gtest-port.h	/^#define GTEST_WIDE_STRING_USES_UTF16_ /;"	d
GTestBreakOnFailureUnitTest	test/googletest-break-on-failure-unittest.py	/^class GTestBreakOnFailureUnitTest(gtest_test_utils.TestCase):$/;"	c
GTestColor	include/gtest/gtest.h	/^enum GTestColor { COLOR_DEFAULT, COLOR_RED, COLOR_GREEN, COLOR_YELLOW };$/;"	g	namespace:testing::internal
GTestColorTest	test/googletest-color-test.py	/^class GTestColorTest(gtest_test_utils.TestCase):$/;"	c
GTestEnvVarTest	test/googletest-env-var-test.py	/^class GTestEnvVarTest(gtest_test_utils.TestCase):$/;"	c
GTestFilterUnitTest	test/googletest-filter-unittest.py	/^class GTestFilterUnitTest(gtest_test_utils.TestCase):$/;"	c
GTestFlagSaver	src/gtest-internal-inl.h	/^  GTestFlagSaver() {$/;"	f	class:testing::internal::GTestFlagSaver
GTestFlagSaver	src/gtest-internal-inl.h	/^class GTestFlagSaver {$/;"	c	namespace:testing::internal
GTestFlagSaverTest	test/gtest_unittest.cc	/^class GTestFlagSaverTest : public Test {$/;"	c	namespace:__anon40	file:
GTestHelpTest	test/gtest_help_test.py	/^class GTestHelpTest(gtest_test_utils.TestCase):$/;"	c
GTestIsInitialized	src/gtest.cc	/^static bool GTestIsInitialized() { return GetArgvs().size() > 0; }$/;"	f	namespace:testing::internal
GTestJsonOutFilesTest	test/googletest-json-outfiles-test.py	/^class GTestJsonOutFilesTest(gtest_test_utils.TestCase):$/;"	c
GTestJsonOutputUnitTest	test/googletest-json-output-unittest.py	/^class GTestJsonOutputUnitTest(gtest_test_utils.TestCase):$/;"	c
GTestListTestsOutputUnitTest	test/gtest_list_output_unittest.py	/^class GTestListTestsOutputUnitTest(gtest_test_utils.TestCase):$/;"	c
GTestListTestsUnitTest	test/googletest-list-tests-unittest.py	/^class GTestListTestsUnitTest(gtest_test_utils.TestCase):$/;"	c
GTestLog	include/gtest/internal/gtest-port.h	/^class GTEST_API_ GTestLog {$/;"	c	namespace:testing::internal
GTestLog	src/gtest-port.cc	/^GTestLog::GTestLog(GTestLogSeverity severity, const char* file, int line)$/;"	f	class:testing::internal::GTestLog
GTestLogSeverity	include/gtest/internal/gtest-port.h	/^enum GTestLogSeverity {$/;"	g	namespace:testing::internal
GTestMutexLock	include/gtest/internal/gtest-port.h	/^  explicit GTestMutexLock(Mutex* mutex)$/;"	f	class:testing::internal::GTestMutexLock
GTestMutexLock	include/gtest/internal/gtest-port.h	/^  explicit GTestMutexLock(Mutex*) {}  \/\/ NOLINT$/;"	f	class:testing::internal::GTestMutexLock
GTestMutexLock	include/gtest/internal/gtest-port.h	/^  explicit GTestMutexLock(MutexBase* mutex)$/;"	f	class:testing::internal::GTestMutexLock
GTestMutexLock	include/gtest/internal/gtest-port.h	/^class GTestMutexLock {$/;"	c	namespace:testing::internal
GTestOutputTest	test/googletest-output-test.py	/^class GTestOutputTest(gtest_test_utils.TestCase):$/;"	c
GTestParamTestInvalidName1Test	test/googletest-param-test-invalid-name1-test.py	/^class GTestParamTestInvalidName1Test(gtest_test_utils.TestCase):$/;"	c
GTestParamTestInvalidName2Test	test/googletest-param-test-invalid-name2-test.py	/^class GTestParamTestInvalidName2Test(gtest_test_utils.TestCase):$/;"	c
GTestShouldProcessSEH	src/gtest.cc	/^int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {$/;"	f	class:testing::internal::UnitTestOptions
GTestShuffleUnitTest	test/googletest-shuffle-test.py	/^class GTestShuffleUnitTest(gtest_test_utils.TestCase):$/;"	c
GTestTestFilterTest	test/gtest_testbridge_test.py	/^class GTestTestFilterTest(gtest_test_utils.TestCase):$/;"	c
GTestUninitializedTest	test/googletest-uninitialized-test.py	/^class GTestUninitializedTest(gtest_test_utils.TestCase):$/;"	c
GTestXMLOutFilesTest	test/gtest_xml_outfiles_test.py	/^class GTestXMLOutFilesTest(gtest_xml_test_utils.GTestXMLTestCase):$/;"	c
GTestXMLOutputUnitTest	test/gtest_xml_output_unittest.py	/^class GTestXMLOutputUnitTest(gtest_xml_test_utils.GTestXMLTestCase):$/;"	c
GTestXMLTestCase	test/gtest_xml_test_utils.py	/^class GTestXMLTestCase(gtest_test_utils.TestCase):$/;"	c
Ge	include/gtest/gtest-matchers.h	/^inline internal::GeMatcher<Rhs> Ge(Rhs x) {$/;"	f	namespace:testing
GeMatcher	include/gtest/gtest-matchers.h	/^  explicit GeMatcher(const Rhs& rhs)$/;"	f	class:testing::internal::GeMatcher
GeMatcher	include/gtest/gtest-matchers.h	/^class GeMatcher : public ComparisonBase<GeMatcher<Rhs>, Rhs, AnyGe> {$/;"	c	namespace:testing::internal
Generate	src/gtest.cc	/^UInt32 Random::Generate(UInt32 range) {$/;"	f	class:testing::internal::Random
GenerateDiff	scripts/upload.py	/^  def GenerateDiff(self, args):$/;"	m	class:SubversionVCS
GenerateDiff	scripts/upload.py	/^  def GenerateDiff(self, args):$/;"	m	class:VersionControlSystem
GenerateDiff	scripts/upload.py	/^  def GenerateDiff(self, extra_args):$/;"	m	class:GitVCS
GenerateDiff	scripts/upload.py	/^  def GenerateDiff(self, extra_args):$/;"	m	class:MercurialVCS
GenerateFatalFailureInAnotherThread	test/gtest_stress_test.cc	/^void GenerateFatalFailureInAnotherThread(bool is_fatal) {$/;"	f	namespace:testing::__anon30
GenerateNames	include/gtest/internal/gtest-internal.h	/^std::vector<std::string> GenerateNames() {$/;"	f	namespace:testing::internal
GenerateNamesRecursively	include/gtest/internal/gtest-internal.h	/^void GenerateNamesRecursively(Types, std::vector<std::string>* result, int i) {$/;"	f	namespace:testing::internal
GenerateNamesRecursively	include/gtest/internal/gtest-internal.h	/^void GenerateNamesRecursively(Types0, std::vector<std::string>*, int) {}$/;"	f	namespace:testing::internal
GenerateUniqueFileName	src/gtest-filepath.cc	/^FilePath FilePath::GenerateUniqueFileName(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
GeneratorCreationFunc	include/gtest/internal/gtest-param-util.h	/^  typedef ParamGenerator<ParamType>(GeneratorCreationFunc)();$/;"	t	class:testing::internal::ParameterizedTestSuiteInfo
GeneratorEvaluationTest	test/googletest-param-test-test.cc	/^class GeneratorEvaluationTest : public TestWithParam<int> {$/;"	c	file:
Get	include/gtest/internal/gtest-internal.h	/^  const typename ElemFromList<I, Indices, T...>::type& Get() const {$/;"	f	class:testing::internal::FlatTuple
Get	include/gtest/internal/gtest-internal.h	/^  typename ElemFromList<I, Indices, T...>::type& Get() {$/;"	f	class:testing::internal::FlatTuple
Get	src/gtest-port.cc	/^AutoHandle::Handle AutoHandle::Get() const {$/;"	f	class:testing::internal::AutoHandle
GetAbsolutePathOf	test/googletest-options-test.cc	/^FilePath GetAbsolutePathOf(const FilePath& relative_path) {$/;"	f	namespace:testing::internal::__anon45
GetAbsolutePathToOutputFile	src/gtest.cc	/^std::string UnitTestOptions::GetAbsolutePathToOutputFile() {$/;"	f	class:testing::internal::UnitTestOptions
GetAnsiColorCode	src/gtest.cc	/^static const char* GetAnsiColorCode(GTestColor color) {$/;"	f	namespace:testing::internal
GetArgvs	src/gtest.cc	/^::std::vector<std::string> GetArgvs() {$/;"	f	namespace:testing::internal
GetArgvsForDeathTestChildProcess	src/gtest-death-test.cc	/^  static ::std::vector<std::string> GetArgvsForDeathTestChildProcess() {$/;"	f	class:testing::internal::ExecDeathTest	file:
GetBaseFile	scripts/upload.py	/^  def GetBaseFile(self, filename):$/;"	m	class:GitVCS
GetBaseFile	scripts/upload.py	/^  def GetBaseFile(self, filename):$/;"	m	class:MercurialVCS
GetBaseFile	scripts/upload.py	/^  def GetBaseFile(self, filename):$/;"	m	class:SubversionVCS
GetBaseFile	scripts/upload.py	/^  def GetBaseFile(self, filename):$/;"	m	class:VersionControlSystem
GetBaseFiles	scripts/upload.py	/^  def GetBaseFiles(self, diff):$/;"	m	class:VersionControlSystem
GetBitOffset	src/gtest.cc	/^static int GetBitOffset(WORD color_mask) {$/;"	f	namespace:testing::internal
GetBoolAssertionFailureMessage	src/gtest.cc	/^std::string GetBoolAssertionFailureMessage($/;"	f	namespace:testing::internal
GetBuildDir	test/gtest_test_utils.py	/^def GetBuildDir():$/;"	f
GetCapturedStderr	src/gtest-port.cc	/^std::string GetCapturedStderr() {$/;"	f	namespace:testing::internal
GetCapturedStdout	src/gtest-port.cc	/^std::string GetCapturedStdout() {$/;"	f	namespace:testing::internal
GetCapturedStream	src/gtest-port.cc	/^static std::string GetCapturedStream(CapturedStream** captured_stream) {$/;"	f	namespace:testing::internal
GetCapturedString	src/gtest-port.cc	/^  std::string GetCapturedString() {$/;"	f	class:testing::internal::CapturedStream
GetCodeLocation	include/gtest/internal/gtest-internal.h	/^  const CodeLocation& GetCodeLocation(const std::string& test_name) const {$/;"	f	class:testing::internal::TypedTestSuitePState
GetColorAttribute	src/gtest.cc	/^static WORD GetColorAttribute(GTestColor color) {$/;"	f	namespace:testing::internal
GetCommandOutput	scripts/common.py	/^def GetCommandOutput(command):$/;"	f
GetCommandOutput	test/googletest-output-test.py	/^def GetCommandOutput(env_cmd):$/;"	f
GetContentType	scripts/upload.py	/^def GetContentType(filename):$/;"	f
GetCurrentDir	src/gtest-filepath.cc	/^FilePath FilePath::GetCurrentDir() {$/;"	f	class:testing::internal::FilePath
GetCurrentExecutableName	src/gtest.cc	/^FilePath GetCurrentExecutableName() {$/;"	f	namespace:testing::internal
GetCurrentOsStackTraceExceptTop	src/gtest.cc	/^std::string GetCurrentOsStackTraceExceptTop(UnitTest* \/*unit_test*\/,$/;"	f	namespace:testing::internal
GetDefaultFilter	src/gtest.cc	/^static const char* GetDefaultFilter() {$/;"	f	namespace:testing
GetDescriber	include/gtest/gtest-matchers.h	/^  const MatcherDescriberInterface* GetDescriber() const {$/;"	f	class:testing::internal::MatcherBase
GetElementOr	src/gtest-internal-inl.h	/^inline E GetElementOr(const std::vector<E>& v, int i, E default_value) {$/;"	f	namespace:testing::internal
GetEmail	scripts/upload.py	/^def GetEmail(prompt):$/;"	f
GetEnv	include/gtest/internal/gtest-port.h	/^inline const char* GetEnv(const char* name) {$/;"	f	namespace:testing::internal::posix
GetEnviron	src/gtest-death-test.cc	/^inline char** GetEnviron() { return environ; }$/;"	f	namespace:testing::internal
GetEnviron	src/gtest-death-test.cc	/^inline char** GetEnviron() {$/;"	f	namespace:testing::internal
GetErrorLogs	src/gtest-death-test.cc	/^std::string DeathTestImpl::GetErrorLogs() {$/;"	f	class:testing::internal::DeathTestImpl
GetErrorLogs	src/gtest-death-test.cc	/^std::string FuchsiaDeathTest::GetErrorLogs() {$/;"	f	class:testing::internal::FuchsiaDeathTest
GetEventDescription	test/gtest_unittest.cc	/^  std::string GetEventDescription(const char* method) {$/;"	f	class:SequenceTestingListener	file:
GetExitStatus	test/gtest_test_utils.py	/^def GetExitStatus(exit_code):$/;"	f
GetFileSize	src/gtest-port.cc	/^size_t GetFileSize(FILE* file) {$/;"	f	namespace:testing::internal
GetFilesToBranch	scripts/release_docs.py	/^  def GetFilesToBranch(self):$/;"	m	class:WikiBrancher
GetFlag	test/googletest-env-var-test.py	/^def GetFlag(flag):$/;"	f
GetFlag	test/gtest_test_utils.py	/^def GetFlag(flag):$/;"	f
GetFullMethodName	test/googletest-listener-test.cc	/^  std::string GetFullMethodName(const char* name) { return name_ + "." + name; }$/;"	f	class:testing::internal::EventRecordingListener2	file:
GetFullMethodName	test/googletest-listener-test.cc	/^  std::string GetFullMethodName(const char* name) {$/;"	f	class:testing::internal::EventRecordingListener	file:
GetGlobalTestPartResultReporter	src/gtest.cc	/^UnitTestImpl::GetGlobalTestPartResultReporter() {$/;"	f	class:testing::internal::UnitTestImpl
GetId	src/gtest.cc	/^  size_t GetId(const std::string& str) {$/;"	f	class:testing::internal::edit_distance::__anon11::InternalStrings
GetInjectableArgvs	src/gtest-port.cc	/^std::vector<std::string> GetInjectableArgvs() {$/;"	f	namespace:testing::internal
GetInstance	src/gtest.cc	/^UnitTest* UnitTest::GetInstance() {$/;"	f	class:testing::UnitTest
GetLastErrnoDescription	src/gtest-death-test.cc	/^std::string GetLastErrnoDescription() {$/;"	f	namespace:testing::internal
GetLastLine	scripts/pump.py	/^  def GetLastLine(self):$/;"	m	class:Output
GetMutableSuiteCase	src/gtest-internal-inl.h	/^  TestSuite* GetMutableSuiteCase(int i) {$/;"	f	class:testing::internal::UnitTestImpl
GetMutableTestInfo	src/gtest.cc	/^TestInfo* TestSuite::GetMutableTestInfo(int i) {$/;"	f	class:testing::TestSuite
GetMutableTestSuite	src/gtest.cc	/^TestSuite* UnitTest::GetMutableTestSuite(int i) {$/;"	f	class:testing::UnitTest
GetName	include/gtest/internal/gtest-internal.h	/^  static std::string GetName(int i) {$/;"	f	struct:testing::internal::DefaultNameGenerator
GetName	test/googletest-output-test_.cc	/^  static std::string GetName(int i) {$/;"	f	class:TypedTestNames
GetName	test/googletest-output-test_.cc	/^  static std::string GetName(int i) {$/;"	f	class:TypedTestPNames
GetName	test/gtest-typed-test_test.cc	/^  static std::string GetName(int i) {$/;"	f	class:TypeParametrizedTestNames
GetName	test/gtest-typed-test_test.cc	/^  static std::string GetName(int i) {$/;"	f	class:TypedTestNames
GetNewColor	src/gtest.cc	/^static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {$/;"	f	namespace:testing::internal
GetNewIndex	test/googletest-port-test.cc	/^  static size_t GetNewIndex() {$/;"	f	class:testing::internal::DestructorTracker	file:
GetNextRandomSeed	src/gtest-internal-inl.h	/^inline int GetNextRandomSeed(int seed) {$/;"	f	namespace:testing::internal
GetNotDefaultOrNull	include/gtest/internal/gtest-internal.h	/^inline SetUpTearDownSuiteFuncType GetNotDefaultOrNull($/;"	f	namespace:testing::internal
GetOrCreateValue	include/gtest/internal/gtest-port.h	/^  T* GetOrCreateValue() const {$/;"	f	class:testing::internal::ThreadLocal
GetOutputFormat	src/gtest.cc	/^std::string UnitTestOptions::GetOutputFormat() {$/;"	f	class:testing::internal::UnitTestOptions
GetOutputOfAllCommands	test/googletest-output-test.py	/^def GetOutputOfAllCommands():$/;"	f
GetParam	include/gtest/gtest.h	/^  static const ParamType& GetParam() {$/;"	f	class:testing::WithParamInterface
GetPrefixUntilComma	include/gtest/internal/gtest-internal.h	/^inline std::string GetPrefixUntilComma(const char* str) {$/;"	f	namespace:testing::internal
GetRandomSeedFromFlag	src/gtest-internal-inl.h	/^inline int GetRandomSeedFromFlag(Int32 random_seed_flag) {$/;"	f	namespace:testing::internal
GetRange	scripts/pump.py	/^  def GetRange(self, identifier):$/;"	m	class:Env
GetRepeater	test/gtest_unittest.cc	/^  static TestEventListener* GetRepeater(TestEventListeners* listeners) {$/;"	f	class:testing::internal::TestEventListenersAccessor
GetReservedAttributesForElement	src/gtest.cc	/^static std::vector<std::string> GetReservedAttributesForElement($/;"	f	namespace:testing
GetReservedOutputAttributesForElement	src/gtest.cc	/^static std::vector<std::string> GetReservedOutputAttributesForElement($/;"	f	namespace:testing
GetRpcServer	scripts/upload.py	/^def GetRpcServer(options):$/;"	f
GetSetUpCaseOrSuite	include/gtest/internal/gtest-internal.h	/^  static SetUpTearDownSuiteFuncType GetSetUpCaseOrSuite(const char* filename,$/;"	f	struct:testing::internal::SuiteApiResolver
GetShellCommandOutput	test/googletest-output-test.py	/^def GetShellCommandOutput(env_cmd):$/;"	f
GetSortedTestSuites	test/gtest-unittest-api_test.cc	/^  static TestSuite const** GetSortedTestSuites() {$/;"	f	class:testing::internal::UnitTestHelper
GetSortedTests	test/gtest-unittest-api_test.cc	/^  static TestInfo const** GetSortedTests(const TestSuite* test_suite) {$/;"	f	class:testing::internal::UnitTestHelper
GetSourceDir	test/gtest_test_utils.py	/^def GetSourceDir():$/;"	f
GetStatus	scripts/upload.py	/^  def GetStatus(self, filename):$/;"	m	class:SubversionVCS
GetStatusFileDescriptor	src/gtest-death-test.cc	/^static int GetStatusFileDescriptor(unsigned int parent_process_id,$/;"	f	namespace:testing::internal
GetStream	include/gtest/internal/gtest-port.h	/^  ::std::ostream& GetStream() { return ::std::cerr; }$/;"	f	class:testing::internal::GTestLog
GetString	src/gtest.cc	/^std::string Message::GetString() const {$/;"	f	class:testing::Message
GetSvnInfo	scripts/common.py	/^def GetSvnInfo():$/;"	f
GetSvnTrunk	scripts/common.py	/^def GetSvnTrunk():$/;"	f
GetTearDownCaseOrSuite	include/gtest/internal/gtest-internal.h	/^  static SetUpTearDownSuiteFuncType GetTearDownCaseOrSuite(const char* filename,$/;"	f	struct:testing::internal::SuiteApiResolver
GetTempDir	test/gtest_test_utils.py	/^def GetTempDir():$/;"	f
GetTestCase	src/gtest-internal-inl.h	/^  TestCase* GetTestCase(const char* test_case_name, const char* type_param,$/;"	f	class:testing::internal::UnitTestImpl
GetTestCase	src/gtest-internal-inl.h	/^  const TestCase* GetTestCase(int i) const { return GetTestSuite(i); }$/;"	f	class:testing::internal::UnitTestImpl
GetTestCase	src/gtest.cc	/^const TestCase* UnitTest::GetTestCase(int i) const {$/;"	f	class:testing::UnitTest
GetTestCasePatternHolder	include/gtest/internal/gtest-param-util.h	/^  ParameterizedTestCaseInfo<TestCase>* GetTestCasePatternHolder($/;"	f	class:testing::internal::ParameterizedTestSuiteRegistry
GetTestCases	test/googletest-shuffle-test.py	/^def GetTestCases(tests):$/;"	f
GetTestExecutablePath	test/gtest_test_utils.py	/^def GetTestExecutablePath(executable_name, build_dir=None):$/;"	f
GetTestInfo	src/gtest.cc	/^const TestInfo* TestSuite::GetTestInfo(int i) const {$/;"	f	class:testing::TestSuite
GetTestInfo	test/gtest_unittest.cc	/^  static const TestInfo* GetTestInfo(const char* test_name) {$/;"	f	class:testing::TestInfoTest
GetTestName	test/gtest-typed-test_test.cc	/^static const char* GetTestName() {$/;"	f	namespace:library2
GetTestPartResult	src/gtest-test-part.cc	/^const TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {$/;"	f	class:testing::TestPartResultArray
GetTestPartResult	src/gtest.cc	/^const TestPartResult& TestResult::GetTestPartResult(int i) const {$/;"	f	class:testing::TestResult
GetTestPartResultReporterForCurrentThread	src/gtest.cc	/^UnitTestImpl::GetTestPartResultReporterForCurrentThread() {$/;"	f	class:testing::internal::UnitTestImpl
GetTestProperty	src/gtest.cc	/^const TestProperty& TestResult::GetTestProperty(int i) const {$/;"	f	class:testing::TestResult
GetTestResult	test/gtest_unittest.cc	/^  static const TestResult* GetTestResult($/;"	f	class:testing::TestInfoTest
GetTestSuite	src/gtest-internal-inl.h	/^  const TestSuite* GetTestSuite(int i) const {$/;"	f	class:testing::internal::UnitTestImpl
GetTestSuite	src/gtest.cc	/^TestSuite* UnitTestImpl::GetTestSuite($/;"	f	class:testing::internal::UnitTestImpl
GetTestSuite	src/gtest.cc	/^const TestSuite* UnitTest::GetTestSuite(int i) const {$/;"	f	class:testing::UnitTest
GetTestSuitePatternHolder	include/gtest/internal/gtest-param-util.h	/^  ParameterizedTestSuiteInfo<TestSuite>* GetTestSuitePatternHolder($/;"	f	class:testing::internal::ParameterizedTestSuiteRegistry
GetTestTypeId	src/gtest.cc	/^TypeId GetTestTypeId() {$/;"	f	namespace:testing::internal
GetTestsForAllIterations	test/googletest-shuffle-test.py	/^def GetTestsForAllIterations(extra_env, args):$/;"	f
GetThreadCount	src/gtest-port.cc	/^size_t GetThreadCount() {$/;"	f	namespace:testing::internal
GetThreadLocalsMapLocked	src/gtest-port.cc	/^  static ThreadIdToThreadLocals* GetThreadLocalsMapLocked() {$/;"	f	class:testing::internal::ThreadLocalRegistryImpl	file:
GetTimeInMillis	src/gtest.cc	/^TimeInMillis GetTimeInMillis() {$/;"	f	namespace:testing::internal
GetTypeId	include/gtest/internal/gtest-internal.h	/^TypeId GetTypeId() {$/;"	f	namespace:testing::internal
GetTypeName	include/gtest/internal/gtest-type-util.h	/^std::string GetTypeName() {$/;"	f	namespace:testing::internal
GetUnitTestImpl	src/gtest-internal-inl.h	/^inline UnitTestImpl* GetUnitTestImpl() {$/;"	f	namespace:testing::internal
GetUnknownFiles	scripts/upload.py	/^  def GetUnknownFiles(self):$/;"	m	class:GitVCS
GetUnknownFiles	scripts/upload.py	/^  def GetUnknownFiles(self):$/;"	m	class:MercurialVCS
GetUnknownFiles	scripts/upload.py	/^  def GetUnknownFiles(self):$/;"	m	class:SubversionVCS
GetUnknownFiles	scripts/upload.py	/^  def GetUnknownFiles(self):$/;"	m	class:VersionControlSystem
GetUserCredentials	scripts/upload.py	/^  def GetUserCredentials():$/;"	f	function:GetRpcServer
GetValue	scripts/pump.py	/^  def GetValue(self, identifier):$/;"	m	class:Env
GetValueOnCurrentThread	src/gtest-port.cc	/^  static ThreadLocalValueHolderBase* GetValueOnCurrentThread($/;"	f	class:testing::internal::ThreadLocalRegistryImpl
GetValueOnCurrentThread	src/gtest-port.cc	/^ThreadLocalValueHolderBase* ThreadLocalRegistry::GetValueOnCurrentThread($/;"	f	class:testing::internal::ThreadLocalRegistry
GitVCS	scripts/upload.py	/^class GitVCS(VersionControlSystem):$/;"	c
GlobalFunction	test/googletest-death-test-test.cc	/^void GlobalFunction() { DieInside("GlobalFunction"); }$/;"	f	namespace:__anon28
GoogleTestFailureException	include/gtest/internal/gtest-internal.h	/^class GTEST_API_ GoogleTestFailureException : public ::std::runtime_error {$/;"	c	namespace:testing::internal
GoogleTestFailureException	src/gtest.cc	/^GoogleTestFailureException::GoogleTestFailureException($/;"	f	class:testing::internal::GoogleTestFailureException
GreaterThan	test/gtest_unittest.cc	/^bool GreaterThan(T1 x1, T2 x2) {$/;"	f	namespace:__anon40
Gt	include/gtest/gtest-matchers.h	/^inline internal::GtMatcher<Rhs> Gt(Rhs x) {$/;"	f	namespace:testing
GtMatcher	include/gtest/gtest-matchers.h	/^  explicit GtMatcher(const Rhs& rhs)$/;"	f	class:testing::internal::GtMatcher
GtMatcher	include/gtest/gtest-matchers.h	/^class GtMatcher : public ComparisonBase<GtMatcher<Rhs>, Rhs, AnyGt> {$/;"	c	namespace:testing::internal
GuessBase	scripts/upload.py	/^  def GuessBase(self, required):$/;"	m	class:SubversionVCS
GuessVCS	scripts/upload.py	/^def GuessVCS(options):$/;"	f
HEADER	scripts/gen_gtest_pred_impl.py	/^HEADER = os.path.join(SCRIPT_DIR, '..\/include\/gtest\/gtest_pred_impl.h')$/;"	v
HELP_REGEX	test/gtest_help_test.py	/^HELP_REGEX = re.compile($/;"	v
HONOR_SHARDING_PROTOCOL	src/gtest-internal-inl.h	/^    HONOR_SHARDING_PROTOCOL,$/;"	e	enum:testing::internal::UnitTestImpl::ReactionToSharding
HRESULTFailureHelper	src/gtest.cc	/^AssertionResult HRESULTFailureHelper(const char* expr,$/;"	f	namespace:testing::internal::__anon15
HUNDRED_TESTS_	test/gtest_test_macro_stack_footprint_test.cc	/^#define HUNDRED_TESTS_(/;"	d	file:
Handle	include/gtest/internal/gtest-port.h	/^  typedef void* Handle;$/;"	t	class:testing::internal::AutoHandle
HandleExceptionsInMethodIfSupported	src/gtest.cc	/^Result HandleExceptionsInMethodIfSupported($/;"	f	namespace:testing::internal
HandleSehExceptionsInMethodIfSupported	src/gtest.cc	/^Result HandleSehExceptionsInMethodIfSupported($/;"	f	namespace:testing::internal
HasFailure	include/gtest/gtest.h	/^  static bool HasFailure() { return HasFatalFailure() || HasNonfatalFailure(); }$/;"	f	class:testing::Test
HasFailureHelper	test/gtest_unittest.cc	/^static bool HasFailureHelper() { return testing::Test::HasFailure(); }$/;"	f	file:
HasFatalFailure	src/gtest.cc	/^bool Test::HasFatalFailure() {$/;"	f	class:testing::Test
HasFatalFailure	src/gtest.cc	/^bool TestResult::HasFatalFailure() const {$/;"	f	class:testing::TestResult
HasGoogleTestFlagPrefix	src/gtest.cc	/^static bool HasGoogleTestFlagPrefix(const char* str) {$/;"	f	namespace:testing::internal
HasNewFatalFailureHelper	include/gtest/gtest-test-part.h	/^class GTEST_API_ HasNewFatalFailureHelper$/;"	c	namespace:testing::internal
HasNewFatalFailureHelper	src/gtest-test-part.cc	/^HasNewFatalFailureHelper::HasNewFatalFailureHelper()$/;"	f	class:testing::internal::HasNewFatalFailureHelper
HasNonfatalFailure	src/gtest.cc	/^bool Test::HasNonfatalFailure() {$/;"	f	class:testing::Test
HasNonfatalFailure	src/gtest.cc	/^bool TestResult::HasNonfatalFailure() const {$/;"	f	class:testing::TestResult
HasNonfatalFailureHelper	test/gtest_unittest.cc	/^static bool HasNonfatalFailureHelper() {$/;"	f	file:
HasOneFailure	src/gtest.cc	/^static AssertionResult HasOneFailure(const char* \/* results_expr *\/,$/;"	f	namespace:testing::internal
HasPrefix	test/googletest-printers-test.cc	/^AssertionResult HasPrefix(const StringType& str, const StringType& prefix) {$/;"	f	namespace:testing::gtest_printers_test
HasSameFixtureClass	src/gtest.cc	/^bool Test::HasSameFixtureClass() {$/;"	f	class:testing::Test
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types1
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types10
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types11
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types12
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types13
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types14
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types15
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types16
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types17
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types18
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types19
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types2
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types20
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types21
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types22
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types23
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types24
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types25
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types26
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types27
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types28
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types29
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types3
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types30
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types31
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types32
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types33
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types34
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types35
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types36
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types37
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types38
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types39
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types4
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types40
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types41
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types42
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types43
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types44
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types45
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types46
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types47
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types48
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types49
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types5
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types50
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types6
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types7
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types8
Head	include/gtest/internal/gtest-type-util.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types9
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates1
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates10
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates11
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates12
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates13
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates14
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates15
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates16
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates17
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates18
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates19
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates2
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates20
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates21
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates22
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates23
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates24
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates25
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates26
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates27
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates28
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates29
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates3
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates30
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates31
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates32
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates33
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates34
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates35
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates36
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates37
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates38
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates39
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates4
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates40
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates41
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates42
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates43
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates44
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates45
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates46
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates47
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates48
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates49
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates5
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates50
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates6
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates7
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates8
Head	include/gtest/internal/gtest-type-util.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates9
Head	samples/sample3-inl.h	/^  QueueNode<E>* Head() { return head_; }$/;"	f	class:Queue
Head	samples/sample3-inl.h	/^  const QueueNode<E>* Head() const { return head_; }$/;"	f	class:Queue
HeaderPreamble	scripts/gen_gtest_pred_impl.py	/^def HeaderPreamble(n):$/;"	f
HttpRpcServer	scripts/upload.py	/^class HttpRpcServer(AbstractRpcServer):$/;"	c
Hunk	src/gtest.cc	/^  Hunk(size_t left_start, size_t right_start)$/;"	f	class:testing::internal::edit_distance::__anon12::Hunk
Hunk	src/gtest.cc	/^class Hunk {$/;"	c	namespace:testing::internal::edit_distance::__anon12	file:
HybridPrimeTable	samples/sample8_unittest.cc	/^  HybridPrimeTable(bool force_on_the_fly, int max_precalculated)$/;"	f	class:__anon10::HybridPrimeTable
HybridPrimeTable	samples/sample8_unittest.cc	/^class HybridPrimeTable : public PrimeTable {$/;"	c	namespace:__anon10	file:
ID_REGEX	scripts/pump.py	/^ID_REGEX = re.compile(r'[_A-Za-z]\\w*')$/;"	v
IGNORE_SHARDING_PROTOCOL	src/gtest-internal-inl.h	/^    IGNORE_SHARDING_PROTOCOL$/;"	e	enum:testing::internal::UnitTestImpl::ReactionToSharding
INCLUDE_GTEST_FILE_REGEX	scripts/fuse_gtest_files.py	/^INCLUDE_GTEST_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*"(gtest\/.+)"')$/;"	v
INCLUDE_SRC_FILE_REGEX	scripts/fuse_gtest_files.py	/^INCLUDE_SRC_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*"(src\/.+)"')$/;"	v
INCORRECT_FLAG_VARIANTS	test/gtest_help_test.py	/^INCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),$/;"	v
INSTANTIATE_TEST_CASE_P	include/gtest/gtest-param-test.h	/^#define INSTANTIATE_TEST_CASE_P /;"	d
INSTANTIATE_TEST_SUITE_P	include/gtest/gtest-param-test.h	/^#define INSTANTIATE_TEST_SUITE_P(/;"	d
INSTANTIATE_TYPED_TEST_CASE_P	include/gtest/gtest-typed-test.h	/^#define INSTANTIATE_TYPED_TEST_CASE_P /;"	d
INSTANTIATE_TYPED_TEST_SUITE_P	include/gtest/gtest-typed-test.h	/^#define INSTANTIATE_TYPED_TEST_SUITE_P(/;"	d
INTERCEPT_ALL_THREADS	include/gtest/gtest-spi.h	/^    INTERCEPT_ALL_THREADS           \/\/ Intercepts all failures.$/;"	e	enum:testing::ScopedFakeTestPartResultReporter::InterceptMode
INTERCEPT_ONLY_CURRENT_THREAD	include/gtest/gtest-spi.h	/^    INTERCEPT_ONLY_CURRENT_THREAD,  \/\/ Intercepts only thread local failures.$/;"	e	enum:testing::ScopedFakeTestPartResultReporter::InterceptMode
INTERNAL_FLAG_FOR_TESTING	test/gtest_help_test.py	/^INTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'$/;"	v
IN_PROGRESS	src/gtest-death-test.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
IdMap	src/gtest.cc	/^  typedef std::map<std::string, size_t> IdMap;$/;"	t	class:testing::internal::edit_distance::__anon11::InternalStrings	file:
IdToKey	test/gtest_stress_test.cc	/^std::string IdToKey(int id, const char* suffix) {$/;"	f	namespace:testing::__anon30
IdToString	test/gtest_stress_test.cc	/^std::string IdToString(int id) {$/;"	f	namespace:testing::__anon30
IfNode	scripts/pump.py	/^class IfNode:$/;"	c
IgnoredValue	include/gtest/internal/gtest-internal.h	/^  IgnoredValue(const T& \/* ignored *\/) {}  \/\/ NOLINT(runtime\/explicit)$/;"	f	class:testing::internal::IgnoredValue
IgnoredValue	include/gtest/internal/gtest-internal.h	/^class IgnoredValue {$/;"	c	namespace:testing::internal
Impl	include/gtest/gtest-matchers.h	/^    explicit Impl(const Rhs& rhs) : rhs_(rhs) {}$/;"	f	class:testing::internal::ComparisonBase::Impl
Impl	include/gtest/gtest-matchers.h	/^  class Impl : public MatcherInterface<Lhs> {$/;"	c	class:testing::internal::ComparisonBase
ImplementationForArity	scripts/gen_gtest_pred_impl.py	/^def ImplementationForArity(n):$/;"	f
Implementations	samples/sample6_unittest.cc	/^typedef Types<OnTheFlyPrimeTable, PreCalculatedPrimeTable> Implementations;$/;"	t	namespace:__anon1	file:
ImplicitCast_	include/gtest/internal/gtest-port.h	/^inline To ImplicitCast_(To x) { return x; }$/;"	f	namespace:testing::internal
InDeathTestChild	src/gtest-death-test.cc	/^bool InDeathTestChild() {$/;"	f	namespace:testing::internal
Increment	samples/sample4.cc	/^int Counter::Increment() {$/;"	f	class:Counter
Increment	test/googletest-port-test.cc	/^  void Increment() {$/;"	f	class:testing::internal::AtomicCounterWithMutex
Indent	src/gtest.cc	/^static inline std::string Indent(size_t width) {$/;"	f	namespace:testing::internal
IndexSequence	include/gtest/internal/gtest-internal.h	/^struct IndexSequence {$/;"	s	namespace:testing::internal
Infinity	include/gtest/internal/gtest-internal.h	/^  static RawType Infinity() {$/;"	f	class:testing::internal::FloatingPoint
Init	src/gtest-port.cc	/^void RE::Init(const char* regex) {$/;"	f	class:testing::internal::RE
Init	src/gtest.cc	/^void ScopedFakeTestPartResultReporter::Init() {$/;"	f	class:testing::ScopedFakeTestPartResultReporter
Init	test/googletest-output-test_.cc	/^  void Init() {$/;"	f	class:FatalFailureInFixtureConstructorTest	file:
InitCopy	include/gtest/internal/gtest-internal.h	/^  void InitCopy(const Element* array, size_t a_size) {$/;"	f	class:testing::internal::NativeArray
InitDeathTestSubprocessControlInfo	src/gtest-internal-inl.h	/^  void InitDeathTestSubprocessControlInfo() {$/;"	f	class:testing::internal::UnitTestImpl
InitGoogleTest	src/gtest.cc	/^void InitGoogleTest() {$/;"	f	namespace:testing
InitGoogleTest	src/gtest.cc	/^void InitGoogleTest(int* argc, char** argv) {$/;"	f	namespace:testing
InitGoogleTest	src/gtest.cc	/^void InitGoogleTest(int* argc, wchar_t** argv) {$/;"	f	namespace:testing
InitGoogleTestImpl	src/gtest.cc	/^void InitGoogleTestImpl(int* argc, CharType** argv) {$/;"	f	namespace:testing::internal
InitRef	include/gtest/internal/gtest-internal.h	/^  void InitRef(const Element* array, size_t a_size) {$/;"	f	class:testing::internal::NativeArray
Instance	test/googletest-param-test-test.cc	/^  static TestGenerationEnvironment* Instance() {$/;"	f	class:TestGenerationEnvironment
InstanceValueHolderFactory	include/gtest/internal/gtest-port.h	/^    explicit InstanceValueHolderFactory(const T& value) : value_(value) {}$/;"	f	class:testing::internal::ThreadLocal::InstanceValueHolderFactory
InstanceValueHolderFactory	include/gtest/internal/gtest-port.h	/^  class InstanceValueHolderFactory : public ValueHolderFactory {$/;"	c	class:testing::internal::ThreadLocal
InstantiateTestCase_P_IsDeprecated	include/gtest/internal/gtest-internal.h	/^constexpr bool InstantiateTestCase_P_IsDeprecated() { return true; }$/;"	f	namespace:testing::internal
InstantiateTypedTestCase_P_IsDeprecated	include/gtest/internal/gtest-internal.h	/^constexpr bool InstantiateTypedTestCase_P_IsDeprecated() { return true; }$/;"	f	namespace:testing::internal
InstantiationContainer	include/gtest/internal/gtest-param-util.h	/^  typedef ::std::vector<InstantiationInfo> InstantiationContainer;$/;"	t	class:testing::internal::ParameterizedTestSuiteInfo
InstantiationInMultipleTranslationUnitsTest	test/googletest-param-test-test.h	/^class InstantiationInMultipleTranslationUnitsTest$/;"	c
InstantiationInfo	include/gtest/internal/gtest-param-util.h	/^      InstantiationInfo(const std::string &name_in,$/;"	f	struct:testing::internal::ParameterizedTestSuiteInfo::InstantiationInfo
InstantiationInfo	include/gtest/internal/gtest-param-util.h	/^  struct InstantiationInfo {$/;"	s	class:testing::internal::ParameterizedTestSuiteInfo
Int	include/gtest/internal/gtest-port.h	/^  typedef __int64 Int;$/;"	t	class:testing::internal::TypeWithSize
Int	include/gtest/internal/gtest-port.h	/^  typedef int Int;$/;"	t	class:testing::internal::TypeWithSize
Int32	include/gtest/internal/gtest-port.h	/^typedef TypeWithSize<4>::Int Int32;$/;"	t	namespace:testing::internal
Int32FromEnvOrDie	src/gtest.cc	/^Int32 Int32FromEnvOrDie(const char* var, Int32 default_val) {$/;"	f	namespace:testing::internal
Int32FromGTestEnv	src/gtest-port.cc	/^Int32 Int32FromGTestEnv(const char* flag, Int32 default_value) {$/;"	f	namespace:testing::internal
Int64	include/gtest/internal/gtest-port.h	/^typedef TypeWithSize<8>::Int Int64;$/;"	t	namespace:testing::internal
IntAlias	test/gtest_unittest.cc	/^typedef int IntAlias;$/;"	t	file:
IntSet	test/gtest-typed-test_test.cc	/^  typedef std::set<int> IntSet;$/;"	t	class:CommonTest	file:
IntWrapper	test/googletest-param-test-test.cc	/^  IntWrapper(const IntWrapper& other) : value_(other.value_) {}$/;"	f	class:IntWrapper
IntWrapper	test/googletest-param-test-test.cc	/^  explicit IntWrapper(int a_value) : value_(a_value) {}$/;"	f	class:IntWrapper
IntWrapper	test/googletest-param-test-test.cc	/^class IntWrapper {$/;"	c	file:
IntegerFunctionTest	samples/sample5_unittest.cc	/^class IntegerFunctionTest : public QuickTest {$/;"	c	namespace:__anon5	file:
InterceptMode	include/gtest/gtest-spi.h	/^  enum InterceptMode {$/;"	g	class:testing::ScopedFakeTestPartResultReporter
InternalRunDeathTestFlag	include/gtest/internal/gtest-death-test-internal.h	/^  InternalRunDeathTestFlag(const std::string& a_file,$/;"	f	class:testing::internal::InternalRunDeathTestFlag
InternalRunDeathTestFlag	include/gtest/internal/gtest-death-test-internal.h	/^class InternalRunDeathTestFlag {$/;"	c	namespace:testing::internal
InternalStrings	src/gtest.cc	/^class InternalStrings {$/;"	c	namespace:testing::internal::edit_distance::__anon11	file:
InvokeWithModifiedEnv	test/googletest-filter-unittest.py	/^def InvokeWithModifiedEnv(extra_env, function, *args, **kwargs):$/;"	f
IsAProtocolMessage	include/gtest/internal/gtest-internal.h	/^struct IsAProtocolMessage$/;"	s	namespace:testing::internal
IsATTY	include/gtest/internal/gtest-port.h	/^inline int IsATTY(int \/* fd *\/) { return 0; }$/;"	f	namespace:testing::internal::posix
IsATTY	include/gtest/internal/gtest-port.h	/^inline int IsATTY(int fd) { return _isatty(fd); }$/;"	f	namespace:testing::internal::posix
IsATTY	include/gtest/internal/gtest-port.h	/^inline int IsATTY(int fd) { return isatty(fd); }$/;"	f	namespace:testing::internal::posix
IsAbsolutePath	src/gtest-filepath.cc	/^bool FilePath::IsAbsolutePath() const {$/;"	f	class:testing::internal::FilePath
IsAlNum	include/gtest/internal/gtest-port.h	/^inline bool IsAlNum(char ch) {$/;"	f	namespace:testing::internal
IsAlpha	include/gtest/internal/gtest-port.h	/^inline bool IsAlpha(char ch) {$/;"	f	namespace:testing::internal
IsAsciiDigit	src/gtest-port.cc	/^bool IsAsciiDigit(char ch) { return '0' <= ch && ch <= '9'; }$/;"	f	namespace:testing::internal
IsAsciiPunct	src/gtest-port.cc	/^bool IsAsciiPunct(char ch) {$/;"	f	namespace:testing::internal
IsAsciiWhiteSpace	src/gtest-port.cc	/^bool IsAsciiWhiteSpace(char ch) { return IsInSet(ch, " \\f\\n\\r\\t\\v"); }$/;"	f	namespace:testing::internal
IsAsciiWordChar	src/gtest-port.cc	/^bool IsAsciiWordChar(char ch) {$/;"	f	namespace:testing::internal
IsCloseable	src/gtest-port.cc	/^bool AutoHandle::IsCloseable() const {$/;"	f	class:testing::internal::AutoHandle
IsContainer	include/gtest/internal/gtest-internal.h	/^typedef int IsContainer;$/;"	t	namespace:testing::internal
IsContainerTest	include/gtest/internal/gtest-internal.h	/^IsContainer IsContainerTest(int \/* dummy *\/) {$/;"	f	namespace:testing::internal
IsContainerTest	include/gtest/internal/gtest-internal.h	/^IsNotContainer IsContainerTest(long \/* dummy *\/) { return '\\0'; }$/;"	f	namespace:testing::internal
IsDigit	include/gtest/internal/gtest-port.h	/^inline bool IsDigit(char ch) {$/;"	f	namespace:testing::internal
IsDir	include/gtest/internal/gtest-port.h	/^inline bool IsDir(const StatStruct& st) {$/;"	f	namespace:testing::internal::posix
IsDirectory	src/gtest-filepath.cc	/^bool FilePath::IsDirectory() const {$/;"	f	class:testing::internal::FilePath
IsEmpty	include/gtest/internal/gtest-filepath.h	/^  bool IsEmpty() const { return pathname_.empty(); }$/;"	f	class:testing::internal::FilePath
IsEven	test/gtest_unittest.cc	/^bool IsEven(int n) {$/;"	f	namespace:__anon40
IsEvenFunctor	test/gtest_unittest.cc	/^struct IsEvenFunctor {$/;"	s	namespace:__anon40	file:
IsHRESULTFailure	src/gtest.cc	/^AssertionResult IsHRESULTFailure(const char* expr, long hr) {  \/\/ NOLINT$/;"	f	namespace:testing::internal
IsHRESULTSuccess	src/gtest.cc	/^AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  \/\/ NOLINT$/;"	f	namespace:testing::internal
IsHashTable	include/gtest/internal/gtest-internal.h	/^struct IsHashTable {$/;"	s	namespace:testing::internal
IsHeaderGuardIncludeOrOneLineIWYUPragma	scripts/pump.py	/^def IsHeaderGuardIncludeOrOneLineIWYUPragma(line):$/;"	f
IsImage	scripts/upload.py	/^  def IsImage(self, filename):$/;"	m	class:VersionControlSystem
IsInGMockSvn	scripts/common.py	/^def IsInGMockSvn():$/;"	f
IsInGTestSvn	scripts/common.py	/^def IsInGTestSvn():$/;"	f
IsInPreprocessorDirective	scripts/pump.py	/^def IsInPreprocessorDirective(prev_lines, cur_line):$/;"	f
IsInSet	src/gtest-port.cc	/^bool IsInSet(char ch, const char* str) {$/;"	f	namespace:testing::internal
IsInterested	include/gtest/gtest-matchers.h	/^  bool IsInterested() const { return stream_ != nullptr; }$/;"	f	class:testing::MatchResultListener
IsLower	include/gtest/internal/gtest-port.h	/^inline bool IsLower(char ch) {$/;"	f	namespace:testing::internal
IsMultiLineIWYUPragma	scripts/pump.py	/^def IsMultiLineIWYUPragma(line):$/;"	f
IsNegative	test/gtest_unittest.cc	/^bool IsNegative(T x) {$/;"	f	namespace:__anon40
IsNegativeFormat	test/gtest_unittest.cc	/^AssertionResult IsNegativeFormat(const char* \/* expr *\/, T x) {$/;"	f	namespace:__anon40
IsNormalizableWhitespace	src/gtest.cc	/^  static bool IsNormalizableWhitespace(char c) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
IsNotContainer	include/gtest/internal/gtest-internal.h	/^typedef char IsNotContainer;$/;"	t	namespace:testing::internal
IsNotSubstring	src/gtest.cc	/^AssertionResult IsNotSubstring($/;"	f	namespace:testing
IsNull	test/gtest-unittest-api_test.cc	/^AssertionResult IsNull(const char* str) {$/;"	f	namespace:testing::internal
IsPathSeparator	src/gtest-filepath.cc	/^static bool IsPathSeparator(char c) {$/;"	f	namespace:testing::internal
IsPositive	test/gtest_unittest.cc	/^bool IsPositive(double x) {$/;"	f	namespace:__anon40
IsPositive	test/gtest_unittest.cc	/^static bool IsPositive(int n) { return n > 0; }$/;"	f	namespace:__anon40
IsPositiveFormat	test/gtest_unittest.cc	/^AssertionResult IsPositiveFormat(const char* \/* expr *\/, double x) {$/;"	f	namespace:__anon40
IsPositiveFormat	test/gtest_unittest.cc	/^AssertionResult IsPositiveFormat(const char* \/* expr *\/, int n) {$/;"	f	namespace:__anon40
IsPositiveUncopyable	test/gtest_unittest.cc	/^bool IsPositiveUncopyable(const Uncopyable& x) {$/;"	f	namespace:__anon40
IsPrime	samples/sample1.cc	/^bool IsPrime(int n) {$/;"	f
IsPrintableAscii	src/gtest-printers.cc	/^inline bool IsPrintableAscii(wchar_t c) {$/;"	f	namespace:testing::internal
IsRecursiveContainer	include/gtest/internal/gtest-internal.h	/^struct IsRecursiveContainer : public IsRecursiveContainerImpl<C>::type {};$/;"	s	namespace:testing::internal
IsRecursiveContainerImpl	include/gtest/internal/gtest-internal.h	/^struct IsRecursiveContainerImpl<C, false> : public std::false_type {};$/;"	s	namespace:testing::internal
IsRecursiveContainerImpl	include/gtest/internal/gtest-internal.h	/^struct IsRecursiveContainerImpl<C, true> {$/;"	s	namespace:testing::internal
IsRepeat	src/gtest-port.cc	/^bool IsRepeat(char ch) { return IsInSet(ch, "?*+"); }$/;"	f	namespace:testing::internal
IsRootDirectory	src/gtest-filepath.cc	/^bool FilePath::IsRootDirectory() const {$/;"	f	class:testing::internal::FilePath
IsSingleLineComment	scripts/pump.py	/^def IsSingleLineComment(cur_line):$/;"	f
IsSkipped	src/gtest.cc	/^bool Test::IsSkipped() {$/;"	f	class:testing::Test
IsSpace	include/gtest/internal/gtest-port.h	/^inline bool IsSpace(char ch) {$/;"	f	namespace:testing::internal
IsSubstring	src/gtest.cc	/^AssertionResult IsSubstring($/;"	f	namespace:testing
IsSubstringImpl	src/gtest.cc	/^AssertionResult IsSubstringImpl($/;"	f	namespace:testing::__anon14
IsSubstringPred	src/gtest.cc	/^bool IsSubstringPred(const StringType& needle,$/;"	f	namespace:testing::__anon14
IsSubstringPred	src/gtest.cc	/^bool IsSubstringPred(const char* needle, const char* haystack) {$/;"	f	namespace:testing::__anon14
IsSubstringPred	src/gtest.cc	/^bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {$/;"	f	namespace:testing::__anon14
IsTrue	src/gtest.cc	/^bool IsTrue(bool condition) { return condition; }$/;"	f	namespace:testing::internal
IsUTF8TrailByte	src/gtest-printers.cc	/^bool IsUTF8TrailByte(unsigned char t) { return 0x80 <= t && t<= 0xbf; }$/;"	f	namespace:testing::internal::__anon22
IsUpper	include/gtest/internal/gtest-port.h	/^inline bool IsUpper(char ch) {$/;"	f	namespace:testing::internal
IsUtf16SurrogatePair	src/gtest.cc	/^inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {$/;"	f	namespace:testing::internal
IsValidEscape	src/gtest-port.cc	/^bool IsValidEscape(char c) {$/;"	f	namespace:testing::internal
IsValidParamName	include/gtest/internal/gtest-param-util.h	/^  static bool IsValidParamName(const std::string& name) {$/;"	f	class:testing::internal::ParameterizedTestSuiteInfo
IsValidUTF8	src/gtest-printers.cc	/^bool IsValidUTF8(const char* str, size_t length) {$/;"	f	namespace:testing::internal::__anon22
IsValidXmlCharacter	src/gtest.cc	/^  static bool IsValidXmlCharacter(char c) {$/;"	f	class:testing::internal::XmlUnitTestResultPrinter	file:
IsXDigit	include/gtest/internal/gtest-port.h	/^inline bool IsXDigit(char ch) {$/;"	f	namespace:testing::internal
IsXDigit	include/gtest/internal/gtest-port.h	/^inline bool IsXDigit(wchar_t ch) {$/;"	f	namespace:testing::internal
Iter	scripts/gen_gtest_pred_impl.py	/^def Iter(n, format, sep=''):$/;"	f
Iterator	include/gtest/internal/gtest-param-util.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	include/gtest/internal/gtest-param-util.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	include/gtest/internal/gtest-param-util.h	/^    Iterator(const ParamGeneratorInterface<T>* base, T value, int index,$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	include/gtest/internal/gtest-param-util.h	/^    Iterator(const ParamGeneratorInterface<T>* base,$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	include/gtest/internal/gtest-param-util.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::RangeGenerator
Iterator	include/gtest/internal/gtest-param-util.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::ValuesInIteratorRangeGenerator
IteratorImpl	include/gtest/internal/gtest-param-util.h	/^    IteratorImpl(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator::IteratorImpl
IteratorImpl	include/gtest/internal/gtest-param-util.h	/^  class IteratorImpl<IndexSequence<I...>>$/;"	c	class:testing::internal::CartesianProductGenerator
Join	include/gtest/internal/gtest-port.h	/^  void Join() {$/;"	f	class:testing::internal::ThreadWithParam
Join	src/gtest-port.cc	/^void ThreadWithParamBase::Join() {$/;"	f	class:testing::internal::ThreadWithParamBase
JsonUnitTestResultPrinter	src/gtest.cc	/^JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)$/;"	f	class:testing::internal::JsonUnitTestResultPrinter
JsonUnitTestResultPrinter	src/gtest.cc	/^class JsonUnitTestResultPrinter : public EmptyTestEventListener {$/;"	c	namespace:testing::internal	file:
KERN_PROC	src/gtest-port.cc	/^#define KERN_PROC /;"	d	file:
KERN_PROC	src/gtest-port.cc	/^#undef KERN_PROC$/;"	d	file:
KP_NLWP	src/gtest-port.cc	/^#define KP_NLWP(/;"	d	file:
KilledBySignal	include/gtest/gtest-death-test.h	/^class GTEST_API_ KilledBySignal {$/;"	c	namespace:testing
KilledBySignal	src/gtest-death-test.cc	/^KilledBySignal::KilledBySignal(int signum) : signum_(signum) {$/;"	f	class:testing::KilledBySignal
KilledExitStatus	test/googletest-death-test-test.cc	/^static int KilledExitStatus(int signum) {$/;"	f	namespace:__anon28
LIST_TESTS_FLAG	test/googletest-catch-exceptions-test.py	/^LIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'$/;"	v
LIST_TESTS_FLAG	test/googletest-filter-unittest.py	/^LIST_TESTS_FLAG = '--gtest_list_tests'$/;"	v
LIST_TESTS_FLAG	test/googletest-list-tests-unittest.py	/^LIST_TESTS_FLAG = 'gtest_list_tests'$/;"	v
LIST_TESTS_FLAG	test/gtest_help_test.py	/^LIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'$/;"	v
LIVED	src/gtest-death-test.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
Last	samples/sample3-inl.h	/^  QueueNode<E>* Last() { return last_; }$/;"	f	class:Queue
Last	samples/sample3-inl.h	/^  const QueueNode<E>* Last() const { return last_; }$/;"	f	class:Queue
LastMessage	src/gtest-death-test.cc	/^const char* DeathTest::LastMessage() {$/;"	f	class:testing::internal::DeathTest
Le	include/gtest/gtest-matchers.h	/^inline internal::LeMatcher<Rhs> Le(Rhs x) {$/;"	f	namespace:testing
LeMatcher	include/gtest/gtest-matchers.h	/^  explicit LeMatcher(const Rhs& rhs)$/;"	f	class:testing::internal::LeMatcher
LeMatcher	include/gtest/gtest-matchers.h	/^class LeMatcher : public ComparisonBase<LeMatcher<Rhs>, Rhs, AnyLe> {$/;"	c	namespace:testing::internal
LeakChecker	samples/sample10_unittest.cc	/^class LeakChecker : public EmptyTestEventListener {$/;"	c	namespace:__anon4	file:
Length	samples/sample2.h	/^  size_t Length() const { return c_string_ == nullptr ? 0 : strlen(c_string_); }$/;"	f	class:MyString
LessByName	test/gtest-unittest-api_test.cc	/^struct LessByName {$/;"	s	namespace:testing::internal	file:
List	test/googletest-port-test.cc	/^  static std::vector<DestructorCall*>& List() { return *list_; }$/;"	f	class:testing::internal::DestructorCall
ListTests	test/gtest_unittest.cc	/^  static Flags ListTests(bool list_tests) {$/;"	f	struct:testing::Flags
ListTestsMatchingFilter	src/gtest.cc	/^void UnitTestImpl::ListTestsMatchingFilter() {$/;"	f	class:testing::internal::UnitTestImpl
ListTestsMatchingFilter	src/gtest.cc	/^void XmlUnitTestResultPrinter::ListTestsMatchingFilter($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
ListenerTest	test/googletest-listener-test.cc	/^class ListenerTest : public Test {$/;"	c	namespace:testing::internal	file:
LiteralDollarNode	scripts/pump.py	/^class LiteralDollarNode:$/;"	c
LoadFlagsFromFile	src/gtest.cc	/^static void LoadFlagsFromFile(const std::string& path) {$/;"	f	namespace:testing::internal
Lock	include/gtest/internal/gtest-port.h	/^  void Lock() {$/;"	f	class:testing::internal::MutexBase
Lock	include/gtest/internal/gtest-port.h	/^  void Lock() {}$/;"	f	class:testing::internal::Mutex
Lock	src/gtest-port.cc	/^void Mutex::Lock() {$/;"	f	class:testing::internal::Mutex
LogToStderr	include/gtest/internal/gtest-port.h	/^inline void LogToStderr() {}$/;"	f	namespace:testing::internal
Lt	include/gtest/gtest-matchers.h	/^inline internal::LtMatcher<Rhs> Lt(Rhs x) {$/;"	f	namespace:testing
LtMatcher	include/gtest/gtest-matchers.h	/^  explicit LtMatcher(const Rhs& rhs)$/;"	f	class:testing::internal::LtMatcher
LtMatcher	include/gtest/gtest-matchers.h	/^class LtMatcher : public ComparisonBase<LtMatcher<Rhs>, Rhs, AnyLt> {$/;"	c	namespace:testing::internal
MAX_UPLOAD_SIZE	scripts/upload.py	/^MAX_UPLOAD_SIZE = 900 * 1024$/;"	v
MacroLogicDeathTest	test/googletest-death-test-test.cc	/^class MacroLogicDeathTest : public testing::Test {$/;"	c	namespace:__anon28	file:
MacroNamingTest	test/googletest-param-test-test.cc	/^class MacroNamingTest : public TestWithParam<int> {};$/;"	c	file:
MacroNamingTestNonParametrized	test/googletest-param-test-test.cc	/^class MacroNamingTestNonParametrized : public ::testing::Test {};$/;"	c	file:
Main	test/gtest_test_utils.py	/^def Main():$/;"	f
MakeAndRegisterTestInfo	src/gtest.cc	/^TestInfo* MakeAndRegisterTestInfo($/;"	f	namespace:testing::internal
MakeConnection	src/gtest.cc	/^void StreamingListener::SocketWriter::MakeConnection() {$/;"	f	class:testing::internal::StreamingListener::SocketWriter
MakeDeathTestMatcher	include/gtest/internal/gtest-death-test-internal.h	/^inline Matcher<const ::std::string&> MakeDeathTestMatcher($/;"	f	namespace:testing::internal
MakeDeathTestMatcher	include/gtest/internal/gtest-death-test-internal.h	/^inline Matcher<const ::std::string&> MakeDeathTestMatcher(const char* regex) {$/;"	f	namespace:testing::internal
MakeFileName	src/gtest-filepath.cc	/^FilePath FilePath::MakeFileName(const FilePath& directory,$/;"	f	class:testing::internal::FilePath
MakeIndexSequence	include/gtest/internal/gtest-internal.h	/^struct MakeIndexSequence$/;"	s	namespace:testing::internal
MakeIndexSequence	include/gtest/internal/gtest-internal.h	/^struct MakeIndexSequence<0> : IndexSequence<> {};$/;"	s	namespace:testing::internal
MakeMatcher	include/gtest/gtest-matchers.h	/^inline Matcher<T> MakeMatcher(const MatcherInterface<T>* impl) {$/;"	f	namespace:testing
MakeNewHolder	include/gtest/internal/gtest-port.h	/^    virtual ValueHolder* MakeNewHolder() const { return new ValueHolder(); }$/;"	f	class:testing::internal::ThreadLocal::DefaultValueHolderFactory
MakeNewHolder	include/gtest/internal/gtest-port.h	/^    virtual ValueHolder* MakeNewHolder() const {$/;"	f	class:testing::internal::ThreadLocal::InstanceValueHolderFactory
MakePolymorphicMatcher	include/gtest/gtest-matchers.h	/^inline PolymorphicMatcher<Impl> MakePolymorphicMatcher(const Impl& impl) {$/;"	f	namespace:testing
MakeToken	scripts/pump.py	/^def MakeToken(lines, start, end, token_type):$/;"	f
MakeVector	include/gtest/internal/gtest-param-util.h	/^  std::vector<T> MakeVector(IndexSequence<I...>) const {$/;"	f	class:testing::internal::ValueArray
ManyAsserts	test/gtest_stress_test.cc	/^void ManyAsserts(int id) {$/;"	f	namespace:testing::__anon30
Map	samples/sample3-inl.h	/^  Queue* Map(F function) const {$/;"	f	class:Queue
MapTester	samples/sample3_unittest.cc	/^  void MapTester(const Queue<int> * q) {$/;"	f	class:__anon2::QueueTestSmpl3
MatchAndExplain	include/gtest/gtest-matchers.h	/^    virtual bool MatchAndExplain(T x, MatchResultListener* listener) const {$/;"	f	class:testing::PolymorphicMatcher::MonomorphicImpl
MatchAndExplain	include/gtest/gtest-matchers.h	/^  bool MatchAndExplain(CharType* s, MatchResultListener* listener) const {$/;"	f	class:testing::internal::MatchesRegexMatcher
MatchAndExplain	include/gtest/gtest-matchers.h	/^  bool MatchAndExplain(const MatcheeStringType& s,$/;"	f	class:testing::internal::MatchesRegexMatcher
MatchAndExplain	include/gtest/gtest-matchers.h	/^  bool MatchAndExplain(const T& x, MatchResultListener* listener) const {$/;"	f	class:testing::internal::MatcherBase
MatchAndExplain	include/gtest/gtest-matchers.h	/^  bool MatchAndExplain(const absl::string_view& s,$/;"	f	class:testing::internal::MatchesRegexMatcher
MatchRegexAnywhere	src/gtest-port.cc	/^bool MatchRegexAnywhere(const char* regex, const char* str) {$/;"	f	namespace:testing::internal
MatchRegexAtHead	src/gtest-port.cc	/^bool MatchRegexAtHead(const char* regex, const char* str) {$/;"	f	namespace:testing::internal
MatchRepetitionAndRegexAtHead	src/gtest-port.cc	/^bool MatchRepetitionAndRegexAtHead($/;"	f	namespace:testing::internal
MatchResultListener	include/gtest/gtest-matchers.h	/^  explicit MatchResultListener(::std::ostream* os) : stream_(os) {}$/;"	f	class:testing::MatchResultListener
MatchResultListener	include/gtest/gtest-matchers.h	/^class MatchResultListener {$/;"	c	namespace:testing
Matcher	include/gtest/gtest-matchers.h	/^  Matcher() {}$/;"	f	class:testing::Matcher
Matcher	include/gtest/gtest-matchers.h	/^  explicit Matcher($/;"	f	class:testing::Matcher
Matcher	include/gtest/gtest-matchers.h	/^  explicit Matcher() {}  \/\/ NOLINT$/;"	f	class:testing::Matcher
Matcher	include/gtest/gtest-matchers.h	/^  explicit Matcher(const MatcherInterface<absl::string_view>* impl)$/;"	f	class:testing::Matcher
Matcher	include/gtest/gtest-matchers.h	/^  explicit Matcher(const MatcherInterface<const T&>* impl)$/;"	f	class:testing::Matcher
Matcher	include/gtest/gtest-matchers.h	/^  explicit Matcher(const MatcherInterface<const absl::string_view&>* impl)$/;"	f	class:testing::Matcher
Matcher	include/gtest/gtest-matchers.h	/^  explicit Matcher(const MatcherInterface<const std::string&>* impl)$/;"	f	class:testing::Matcher
Matcher	include/gtest/gtest-matchers.h	/^  explicit Matcher(const MatcherInterface<std::string>* impl)$/;"	f	class:testing::Matcher
Matcher	include/gtest/gtest-matchers.h	/^Matcher<T>::Matcher(T value) { *this = Eq(value); }$/;"	f	class:testing::Matcher
Matcher	include/gtest/gtest-matchers.h	/^class GTEST_API_ Matcher<absl::string_view>$/;"	c	namespace:testing
Matcher	include/gtest/gtest-matchers.h	/^class GTEST_API_ Matcher<const absl::string_view&>$/;"	c	namespace:testing
Matcher	include/gtest/gtest-matchers.h	/^class GTEST_API_ Matcher<const std::string&>$/;"	c	namespace:testing
Matcher	include/gtest/gtest-matchers.h	/^class GTEST_API_ Matcher<std::string>$/;"	c	namespace:testing
Matcher	include/gtest/gtest-matchers.h	/^class Matcher : public internal::MatcherBase<T> {$/;"	c	namespace:testing
Matcher	src/gtest-matchers.cc	/^Matcher<absl::string_view>::Matcher(absl::string_view s) {$/;"	f	class:testing::Matcher
Matcher	src/gtest-matchers.cc	/^Matcher<absl::string_view>::Matcher(const char* s) {$/;"	f	class:testing::Matcher
Matcher	src/gtest-matchers.cc	/^Matcher<absl::string_view>::Matcher(const std::string& s) { *this = Eq(s); }$/;"	f	class:testing::Matcher
Matcher	src/gtest-matchers.cc	/^Matcher<const absl::string_view&>::Matcher(absl::string_view s) {$/;"	f	class:testing::Matcher
Matcher	src/gtest-matchers.cc	/^Matcher<const absl::string_view&>::Matcher(const char* s) {$/;"	f	class:testing::Matcher
Matcher	src/gtest-matchers.cc	/^Matcher<const absl::string_view&>::Matcher(const std::string& s) {$/;"	f	class:testing::Matcher
Matcher	src/gtest-matchers.cc	/^Matcher<const std::string&>::Matcher(const char* s) {$/;"	f	class:testing::Matcher
Matcher	src/gtest-matchers.cc	/^Matcher<const std::string&>::Matcher(const std::string& s) { *this = Eq(s); }$/;"	f	class:testing::Matcher
Matcher	src/gtest-matchers.cc	/^Matcher<std::string>::Matcher(const char* s) { *this = Eq(std::string(s)); }$/;"	f	class:testing::Matcher
Matcher	src/gtest-matchers.cc	/^Matcher<std::string>::Matcher(const std::string& s) { *this = Eq(s); }$/;"	f	class:testing::Matcher
MatcherBase	include/gtest/gtest-matchers.h	/^  MatcherBase() {}$/;"	f	class:testing::internal::MatcherBase
MatcherBase	include/gtest/gtest-matchers.h	/^  explicit MatcherBase($/;"	f	class:testing::internal::MatcherBase
MatcherBase	include/gtest/gtest-matchers.h	/^  explicit MatcherBase(const MatcherInterface<const T&>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::MatcherBase
MatcherBase	include/gtest/gtest-matchers.h	/^class MatcherBase {$/;"	c	namespace:testing::internal
MatcherDescriberInterface	include/gtest/gtest-matchers.h	/^class MatcherDescriberInterface {$/;"	c	namespace:testing
MatcherInterface	include/gtest/gtest-matchers.h	/^class MatcherInterface : public MatcherDescriberInterface {$/;"	c	namespace:testing
MatcherInterfaceAdapter	include/gtest/gtest-matchers.h	/^  explicit MatcherInterfaceAdapter(const MatcherInterface<T>* impl)$/;"	f	class:testing::internal::MatcherInterfaceAdapter
MatcherInterfaceAdapter	include/gtest/gtest-matchers.h	/^class MatcherInterfaceAdapter : public MatcherInterface<const T&> {$/;"	c	namespace:testing::internal
Matches	include/gtest/gtest-matchers.h	/^  bool Matches(const T& x) const {$/;"	f	class:testing::internal::MatcherBase
MatchesFilter	src/gtest.cc	/^bool UnitTestOptions::MatchesFilter($/;"	f	class:testing::internal::UnitTestOptions
MatchesRegex	include/gtest/gtest-matchers.h	/^inline PolymorphicMatcher<internal::MatchesRegexMatcher> MatchesRegex($/;"	f	namespace:testing
MatchesRegexMatcher	include/gtest/gtest-matchers.h	/^  MatchesRegexMatcher(const RE* regex, bool full_match)$/;"	f	class:testing::internal::MatchesRegexMatcher
MatchesRegexMatcher	include/gtest/gtest-matchers.h	/^class MatchesRegexMatcher {$/;"	c	namespace:testing::internal
Max	include/gtest/internal/gtest-internal.h	/^inline double FloatingPoint<double>::Max() { return DBL_MAX; }$/;"	f	class:testing::internal::FloatingPoint
Max	include/gtest/internal/gtest-internal.h	/^inline float FloatingPoint<float>::Max() { return FLT_MAX; }$/;"	f	class:testing::internal::FloatingPoint
MayDie	test/googletest-death-test-test.cc	/^  explicit MayDie(bool should_die) : should_die_(should_die) {}$/;"	f	class:__anon28::MayDie
MayDie	test/googletest-death-test-test.cc	/^class MayDie {$/;"	c	namespace:__anon28	file:
MemberFunction	test/googletest-death-test-test.cc	/^  void MemberFunction() const {$/;"	f	class:__anon28::MayDie
MemberFunction	test/googletest-death-test-test.cc	/^  void MemberFunction() {$/;"	f	class:__anon28::TestForDeathTest
MemoryIsNotDeallocated	src/gtest-port.cc	/^  MemoryIsNotDeallocated() : old_crtdbg_flag_(0) {$/;"	f	class:testing::internal::__anon19::MemoryIsNotDeallocated
MemoryIsNotDeallocated	src/gtest-port.cc	/^class MemoryIsNotDeallocated$/;"	c	namespace:testing::internal::__anon19	file:
MercurialVCS	scripts/upload.py	/^class MercurialVCS(VersionControlSystem):$/;"	c
Message	include/gtest/gtest-message.h	/^  Message(const Message& msg) : ss_(new ::std::stringstream) {  \/\/ NOLINT$/;"	f	class:testing::Message
Message	include/gtest/gtest-message.h	/^  explicit Message(const char* str) : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Message	include/gtest/gtest-message.h	/^class GTEST_API_ Message {$/;"	c	namespace:testing
Message	src/gtest.cc	/^Message::Message() : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Message	test/gtest_unittest.cc	/^class Message {};$/;"	c	namespace:my_namespace::testing	file:
MixedUpTestSuiteTest	test/googletest-output-test_.cc	/^class MixedUpTestSuiteTest : public testing::Test {$/;"	c	namespace:bar	file:
MixedUpTestSuiteTest	test/googletest-output-test_.cc	/^class MixedUpTestSuiteTest : public testing::Test {$/;"	c	namespace:foo	file:
MixedUpTestSuiteWithSameTestNameTest	test/googletest-output-test_.cc	/^class MixedUpTestSuiteWithSameTestNameTest : public testing::Test {$/;"	c	namespace:bar	file:
MixedUpTestSuiteWithSameTestNameTest	test/googletest-output-test_.cc	/^class MixedUpTestSuiteWithSameTestNameTest : public testing::Test {$/;"	c	namespace:foo	file:
MockDeathTest	test/googletest-death-test-test.cc	/^  MockDeathTest(MockDeathTestFactory *parent,$/;"	f	class:__anon28::MockDeathTest
MockDeathTest	test/googletest-death-test-test.cc	/^class MockDeathTest : public DeathTest {$/;"	c	namespace:__anon28	file:
MockDeathTestFactory	test/googletest-death-test-test.cc	/^MockDeathTestFactory::MockDeathTestFactory()$/;"	f	class:__anon28::MockDeathTestFactory
MockDeathTestFactory	test/googletest-death-test-test.cc	/^class MockDeathTestFactory : public DeathTestFactory {$/;"	c	namespace:__anon28	file:
MonomorphicImpl	include/gtest/gtest-matchers.h	/^    explicit MonomorphicImpl(const Impl& impl) : impl_(impl) {}$/;"	f	class:testing::PolymorphicMatcher::MonomorphicImpl
MonomorphicImpl	include/gtest/gtest-matchers.h	/^  class MonomorphicImpl : public MatcherInterface<T> {$/;"	c	class:testing::PolymorphicMatcher
MultipleInstantiationTest	test/googletest-param-test-test.cc	/^class MultipleInstantiationTest : public TestWithParam<int> {};$/;"	c	file:
Mutex	include/gtest/internal/gtest-port.h	/^  Mutex() {$/;"	f	class:testing::internal::Mutex
Mutex	include/gtest/internal/gtest-port.h	/^  Mutex() {}$/;"	f	class:testing::internal::Mutex
Mutex	include/gtest/internal/gtest-port.h	/^  explicit Mutex(StaticConstructorSelector \/*dummy*\/) {}$/;"	f	class:testing::internal::Mutex
Mutex	include/gtest/internal/gtest-port.h	/^class GTEST_API_ Mutex {$/;"	c	namespace:testing::internal
Mutex	include/gtest/internal/gtest-port.h	/^class Mutex : public MutexBase {$/;"	c	namespace:testing::internal
Mutex	include/gtest/internal/gtest-port.h	/^class Mutex {$/;"	c	namespace:testing::internal
Mutex	src/gtest-port.cc	/^Mutex::Mutex()$/;"	f	class:testing::internal::Mutex
MutexBase	include/gtest/internal/gtest-port.h	/^class MutexBase {$/;"	c	namespace:testing::internal
MutexLock	include/gtest/internal/gtest-port.h	/^typedef GTestMutexLock MutexLock;$/;"	t	namespace:testing::internal
MutexType	include/gtest/internal/gtest-port.h	/^  enum MutexType { kStatic = 0, kDynamic = 1 };$/;"	g	class:testing::internal::Mutex
MyArray	test/googletest-list-tests-unittest_.cc	/^class MyArray {$/;"	c	file:
MyContainers	test/gtest-typed-test_test.cc	/^typedef Types<std::vector<double>, std::set<char> > MyContainers;$/;"	t	file:
MyEnumTest	test/googletest-param-test-test.cc	/^class MyEnumTest : public testing::TestWithParam<MyEnums> {};$/;"	c	file:
MyEnums	test/googletest-param-test-test.cc	/^enum MyEnums {$/;"	g	file:
MyEnvironment	test/gtest_environment_test.cc	/^  MyEnvironment() { Reset(); }$/;"	f	class:__anon26::MyEnvironment
MyEnvironment	test/gtest_environment_test.cc	/^class MyEnvironment : public testing::Environment {$/;"	c	namespace:__anon26	file:
MyEnvironment	test/gtest_repeat_test.cc	/^  MyEnvironment() {}$/;"	f	class:__anon31::MyEnvironment
MyEnvironment	test/gtest_repeat_test.cc	/^class MyEnvironment : public testing::Environment {$/;"	c	namespace:__anon31	file:
MyFunction	test/googletest-printers-test.cc	/^void MyFunction(int \/* n *\/) {}$/;"	f	namespace:testing::gtest_printers_test
MyMethod	test/googletest-printers-test.cc	/^  int MyMethod(char x) { return x + 1; }$/;"	f	struct:testing::gtest_printers_test::Foo
MyPair	test/gtest-typed-test_test.cc	/^template <typename T1, typename T2> struct MyPair {};$/;"	s	namespace:library2	file:
MyParamTest	test/gtest_repeat_test.cc	/^class MyParamTest : public testing::TestWithParam<int> {};$/;"	c	namespace:__anon31	file:
MyString	samples/sample2.h	/^  MyString() : c_string_(nullptr) {}$/;"	f	class:MyString
MyString	samples/sample2.h	/^  MyString(const MyString& string) : c_string_(nullptr) {$/;"	f	class:MyString
MyString	samples/sample2.h	/^  explicit MyString(const char* a_c_string) : c_string_(nullptr) {$/;"	f	class:MyString
MyString	samples/sample2.h	/^class MyString {$/;"	c
MyTwoTypes	test/gtest-typed-test_test.cc	/^typedef Types<short, long> MyTwoTypes;$/;"	t	file:
MyType	test/googletest-list-tests-unittest_.cc	/^  explicit MyType(const std::string& a_value) : value_(a_value) {}$/;"	f	class:MyType
MyType	test/googletest-list-tests-unittest_.cc	/^class MyType {$/;"	c	file:
MyType	test/gtest_unittest.cc	/^struct MyType {};$/;"	s	namespace:__anon40	file:
MyTypeInNameSpace1	test/gtest_unittest.cc	/^  explicit MyTypeInNameSpace1(int an_x): Base(an_x) {}$/;"	f	class:namespace1::MyTypeInNameSpace1
MyTypeInNameSpace1	test/gtest_unittest.cc	/^class MyTypeInNameSpace1 : public Base {$/;"	c	namespace:namespace1	file:
MyTypeInNameSpace2	test/gtest_unittest.cc	/^  explicit MyTypeInNameSpace2(int an_x): Base(an_x) {}$/;"	f	class:namespace2::MyTypeInNameSpace2
MyTypeInNameSpace2	test/gtest_unittest.cc	/^class MyTypeInNameSpace2 : public ::Base {$/;"	c	namespace:namespace2	file:
MyTypeInUnnamedNameSpace	test/gtest_unittest.cc	/^  explicit MyTypeInUnnamedNameSpace(int an_x): Base(an_x) {}$/;"	f	class:__anon43::MyTypeInUnnamedNameSpace
MyTypeInUnnamedNameSpace	test/gtest_unittest.cc	/^class MyTypeInUnnamedNameSpace : public Base {$/;"	c	namespace:__anon43	file:
MyTypes	test/googletest-list-tests-unittest_.cc	/^                       int*, MyArray<bool, 42> > MyTypes;$/;"	t	file:
MyVirtualMethod	test/googletest-printers-test.cc	/^  virtual char MyVirtualMethod(int \/* n *\/) { return 'a'; }$/;"	f	struct:testing::gtest_printers_test::Foo
NONFATAL_FAILURE	test/googletest-output-test_.cc	/^    NONFATAL_FAILURE$/;"	e	enum:ExpectFailureTest::FailureMode	file:
NONFATAL_FAILURE	test/gtest_unittest.cc	/^    NONFATAL_FAILURE$/;"	e	enum:__anon40::ScopedFakeTestPartResultReporterTest::FailureMode	file:
NON_FATAL_FAILURE	test/gtest_environment_test.cc	/^  NO_FAILURE, NON_FATAL_FAILURE, FATAL_FAILURE$/;"	e	enum:__anon26::FailureType	file:
NO_FAILURE	test/gtest_environment_test.cc	/^  NO_FAILURE, NON_FATAL_FAILURE, FATAL_FAILURE$/;"	e	enum:__anon26::FailureType	file:
NO_STACKTRACE_SUPPORT_FLAG	test/googletest-json-output-unittest.py	/^NO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'$/;"	v
NO_STACKTRACE_SUPPORT_FLAG	test/googletest-output-test.py	/^NO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'$/;"	v
NO_STACKTRACE_SUPPORT_FLAG	test/gtest_xml_output_unittest.py	/^NO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'$/;"	v
NameGeneratorSelector	include/gtest/internal/gtest-internal.h	/^struct NameGeneratorSelector {$/;"	s	namespace:testing::internal
NamedEnum	test/gtest_unittest.cc	/^enum NamedEnum {$/;"	g	namespace:__anon40	file:
NamingTest	test/googletest-param-test-test.cc	/^class NamingTest : public TestWithParam<int> {};$/;"	c	file:
NativeArray	include/gtest/internal/gtest-internal.h	/^  NativeArray(const Element* array, size_t count, RelationToSourceCopy) {$/;"	f	class:testing::internal::NativeArray
NativeArray	include/gtest/internal/gtest-internal.h	/^  NativeArray(const Element* array, size_t count, RelationToSourceReference) {$/;"	f	class:testing::internal::NativeArray
NativeArray	include/gtest/internal/gtest-internal.h	/^  NativeArray(const NativeArray& rhs) {$/;"	f	class:testing::internal::NativeArray
NativeArray	include/gtest/internal/gtest-internal.h	/^class NativeArray {$/;"	c	namespace:testing::internal
Ne	include/gtest/gtest-matchers.h	/^inline internal::NeMatcher<Rhs> Ne(Rhs x) {$/;"	f	namespace:testing
NeMatcher	include/gtest/gtest-matchers.h	/^  explicit NeMatcher(const Rhs& rhs)$/;"	f	class:testing::internal::NeMatcher
NeMatcher	include/gtest/gtest-matchers.h	/^class NeMatcher : public ComparisonBase<NeMatcher<Rhs>, Rhs, AnyNe> {$/;"	c	namespace:testing::internal
NegatedDesc	include/gtest/gtest-matchers.h	/^  static const char* NegatedDesc() { return "is equal to"; }$/;"	f	class:testing::internal::NeMatcher
NegatedDesc	include/gtest/gtest-matchers.h	/^  static const char* NegatedDesc() { return "isn't <"; }$/;"	f	class:testing::internal::LtMatcher
NegatedDesc	include/gtest/gtest-matchers.h	/^  static const char* NegatedDesc() { return "isn't <="; }$/;"	f	class:testing::internal::LeMatcher
NegatedDesc	include/gtest/gtest-matchers.h	/^  static const char* NegatedDesc() { return "isn't >"; }$/;"	f	class:testing::internal::GtMatcher
NegatedDesc	include/gtest/gtest-matchers.h	/^  static const char* NegatedDesc() { return "isn't >="; }$/;"	f	class:testing::internal::GeMatcher
NegatedDesc	include/gtest/gtest-matchers.h	/^  static const char* NegatedDesc() { return "isn't equal to"; }$/;"	f	class:testing::internal::EqMatcher
NewValueForCurrentThread	include/gtest/internal/gtest-port.h	/^  virtual ThreadLocalValueHolderBase* NewValueForCurrentThread() const {$/;"	f	class:testing::internal::ThreadLocal
NoDefaultContructor	test/googletest-port-test.cc	/^  NoDefaultContructor(const NoDefaultContructor&) {}$/;"	f	class:testing::internal::NoDefaultContructor
NoDefaultContructor	test/googletest-port-test.cc	/^  explicit NoDefaultContructor(const char*) {}$/;"	f	class:testing::internal::NoDefaultContructor
NoDefaultContructor	test/googletest-port-test.cc	/^class NoDefaultContructor {$/;"	c	namespace:testing::internal	file:
NoExecDeathTest	src/gtest-death-test.cc	/^  NoExecDeathTest(const char* a_statement, Matcher<const std::string&> matcher)$/;"	f	class:testing::internal::NoExecDeathTest
NoExecDeathTest	src/gtest-death-test.cc	/^class NoExecDeathTest : public ForkingDeathTest {$/;"	c	namespace:testing::internal	file:
NoFatalFailureTest	test/gtest_unittest.cc	/^class NoFatalFailureTest : public Test {$/;"	c	namespace:__anon40	file:
Node	test/gtest_xml_outfiles_test.py	/^from xml.dom import minidom, Node$/;"	i
Node	test/gtest_xml_output_unittest.py	/^from xml.dom import minidom, Node$/;"	i
Node	test/gtest_xml_test_utils.py	/^from xml.dom import minidom, Node$/;"	i
NonContainer	test/gtest_unittest.cc	/^class NonContainer {};$/;"	c	file:
NonDefaultConstructAssignString	test/googletest-param-test-test.cc	/^  NonDefaultConstructAssignString(const std::string& s) : str_(s) {}$/;"	f	class:NonDefaultConstructAssignString
NonDefaultConstructAssignString	test/googletest-param-test-test.cc	/^class NonDefaultConstructAssignString {$/;"	c	file:
NonFatalFailureInFixtureConstructorTest	test/googletest-output-test_.cc	/^  NonFatalFailureInFixtureConstructorTest() {$/;"	f	class:NonFatalFailureInFixtureConstructorTest
NonFatalFailureInFixtureConstructorTest	test/googletest-output-test_.cc	/^class NonFatalFailureInFixtureConstructorTest : public testing::Test {$/;"	c	file:
NonFatalFailureInSetUpTest	test/googletest-output-test_.cc	/^class NonFatalFailureInSetUpTest : public testing::Test {$/;"	c	file:
NonParameterizedBaseTest	test/googletest-param-test-test.cc	/^  NonParameterizedBaseTest() : n_(17) { }$/;"	f	class:NonParameterizedBaseTest
NonParameterizedBaseTest	test/googletest-param-test-test.cc	/^class NonParameterizedBaseTest : public ::testing::Test {$/;"	c	file:
NonPrintable	test/googletest-printers-test.cc	/^struct NonPrintable {$/;"	s	namespace:testing::gtest_printers_test	file:
NonVoidFunction	test/googletest-death-test-test.cc	/^int NonVoidFunction() {$/;"	f	namespace:__anon28
NonVoidFunction	test/gtest_unittest.cc	/^int NonVoidFunction() {$/;"	f	namespace:__anon40
None	include/gtest/internal/gtest-type-util.h	/^struct None {};$/;"	s	namespace:testing::internal
NoneT	include/gtest/internal/gtest-type-util.h	/^struct NoneT {};$/;"	s	namespace:testing::internal
NormalExitStatus	test/googletest-death-test-test.cc	/^static int NormalExitStatus(int exit_code) {$/;"	f	namespace:__anon28
Normalize	src/gtest-filepath.cc	/^void FilePath::Normalize() {$/;"	f	class:testing::internal::FilePath
NormalizeOutput	test/googletest-output-test.py	/^def NormalizeOutput(output):$/;"	f
NormalizeToCurrentPlatform	test/googletest-output-test.py	/^def NormalizeToCurrentPlatform(test_output):$/;"	f
NormalizeXml	test/gtest_xml_test_utils.py	/^  def NormalizeXml(self, element):$/;"	m	class:GTestXMLTestCase
NotReallyAHashTable	test/gtest_unittest.cc	/^struct NotReallyAHashTable {$/;"	s	file:
Notification	include/gtest/internal/gtest-port.h	/^  Notification() : notified_(false) {$/;"	f	class:testing::internal::Notification
Notification	include/gtest/internal/gtest-port.h	/^class GTEST_API_ Notification {$/;"	c	namespace:testing::internal
Notification	include/gtest/internal/gtest-port.h	/^class Notification {$/;"	c	namespace:testing::internal
Notification	src/gtest-port.cc	/^Notification::Notification()$/;"	f	class:testing::internal::Notification
Notify	include/gtest/internal/gtest-port.h	/^  void Notify() {$/;"	f	class:testing::internal::Notification
Notify	src/gtest-port.cc	/^void Notification::Notify() {$/;"	f	class:testing::internal::Notification
NumericTest	test/gtest-typed-test_test.cc	/^class NumericTest : public Test {$/;"	c	namespace:library1	file:
NumericTest	test/gtest-typed-test_test.cc	/^class NumericTest : public Test {$/;"	c	namespace:library2	file:
NumericTypes	test/googletest-output-test_.cc	/^typedef testing::Types<int, double> NumericTypes;$/;"	t	file:
NumericTypes	test/gtest-typed-test_test.cc	/^typedef Types<int, double> NumericTypes;$/;"	t	namespace:library2	file:
NumericTypes	test/gtest-typed-test_test.cc	/^typedef Types<int, long> NumericTypes;$/;"	t	namespace:library1	file:
NumericTypes	test/gtest_unittest.cc	/^typedef testing::Types<int, double> NumericTypes;$/;"	t	namespace:__anon40	file:
OPTIONAL_WHITE_SPACES_REGEX	scripts/pump.py	/^OPTIONAL_WHITE_SPACES_REGEX = re.compile(r'\\s*')$/;"	v
OUTPUT	test/gtest_skip_environment_check_output_test.py	/^OUTPUT = gtest_test_utils.Subprocess([EXE_PATH]).output$/;"	v
OVERSEE_TEST	include/gtest/internal/gtest-death-test-internal.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
OkHRESULTSuccess	test/gtest_unittest.cc	/^static HRESULT OkHRESULTSuccess() {$/;"	f	namespace:__anon40
OnEnvironmentsSetUpStart	src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnEnvironmentsTearDownStart	src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestCaseEnd	include/gtest/gtest.h	/^  virtual void OnTestCaseEnd(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::TestEventListener
OnTestCaseEnd	src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestCaseStart	include/gtest/gtest.h	/^  virtual void OnTestCaseStart(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::TestEventListener
OnTestCaseStart	src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestEnd	src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestIterationEnd	src/gtest.cc	/^void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::JsonUnitTestResultPrinter
OnTestIterationEnd	src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestIterationEnd	src/gtest.cc	/^void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::TestEventRepeater
OnTestIterationEnd	src/gtest.cc	/^void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OnTestIterationStart	src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestIterationStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestIterationStart	src/gtest.cc	/^void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,$/;"	f	class:testing::internal::TestEventRepeater
OnTestPartResult	src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestPartResult($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestStart	src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestSuiteEnd	include/gtest/gtest.h	/^  virtual void OnTestSuiteEnd(const TestSuite& \/*test_suite*\/) {}$/;"	f	class:testing::TestEventListener
OnTestSuiteEnd	src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTestSuiteStart	include/gtest/gtest.h	/^  virtual void OnTestSuiteStart(const TestSuite& \/*test_suite*\/) {}$/;"	f	class:testing::TestEventListener
OnTestSuiteStart	src/gtest.cc	/^void PrettyUnitTestResultPrinter::OnTestSuiteStart($/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
OnTheFlyPrimeTable	samples/prime_tables.h	/^class OnTheFlyPrimeTable : public PrimeTable {$/;"	c
OnThreadExit	src/gtest-port.cc	/^  static void OnThreadExit(DWORD thread_id) {$/;"	f	class:testing::internal::ThreadLocalRegistryImpl
OnThreadLocalDestroyed	src/gtest-port.cc	/^  static void OnThreadLocalDestroyed($/;"	f	class:testing::internal::ThreadLocalRegistryImpl
OnThreadLocalDestroyed	src/gtest-port.cc	/^void ThreadLocalRegistry::OnThreadLocalDestroyed($/;"	f	class:testing::internal::ThreadLocalRegistry
OneTo	scripts/gen_gtest_pred_impl.py	/^def OneTo(n):$/;"	f
OpenFileForWriting	src/gtest.cc	/^static FILE* OpenFileForWriting(const std::string& output_file) {$/;"	f	namespace:testing::internal
OsStackTraceGetter	src/gtest-internal-inl.h	/^  OsStackTraceGetter() {}$/;"	f	class:testing::internal::OsStackTraceGetter
OsStackTraceGetter	src/gtest-internal-inl.h	/^class OsStackTraceGetter : public OsStackTraceGetterInterface {$/;"	c	namespace:testing::internal
OsStackTraceGetterInterface	src/gtest-internal-inl.h	/^  OsStackTraceGetterInterface() {}$/;"	f	class:testing::internal::OsStackTraceGetterInterface
OsStackTraceGetterInterface	src/gtest-internal-inl.h	/^class OsStackTraceGetterInterface {$/;"	c	namespace:testing::internal
Output	scripts/pump.py	/^class Output:$/;"	c
Output	test/gtest_unittest.cc	/^  static Flags Output(const char* output) {$/;"	f	struct:testing::Flags
OutputFlagAlsoCheckEnvVar	src/gtest-port.cc	/^std::string OutputFlagAlsoCheckEnvVar(){$/;"	f	namespace:testing::internal
OutputJsonKey	src/gtest.cc	/^void JsonUnitTestResultPrinter::OutputJsonKey($/;"	f	class:testing::internal::JsonUnitTestResultPrinter
OutputJsonTestInfo	src/gtest.cc	/^void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,$/;"	f	class:testing::internal::JsonUnitTestResultPrinter
OutputXmlAttribute	src/gtest.cc	/^void XmlUnitTestResultPrinter::OutputXmlAttribute($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OutputXmlCDataSection	src/gtest.cc	/^void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OutputXmlTestInfo	src/gtest.cc	/^void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
OutputXmlTestProperties	src/gtest.cc	/^void XmlUnitTestResultPrinter::OutputXmlTestProperties($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
PARAMETER_COUNT	test/googletest-param-test-test.cc	/^    PARAMETER_COUNT =$/;"	e	enum:TestGenerationTest::__anon37	file:
PARAM_TESTS	test/googletest-filter-unittest.py	/^PARAM_TESTS = [$/;"	v
PARAM_TEST_REGEX	test/googletest-filter-unittest.py	/^PARAM_TEST_REGEX = re.compile(r'\/ParamTest')$/;"	v
PREFIX_WITH_FOO	test/googletest-param-test-test.cc	/^       PREFIX_WITH_FOO(SomeTestName)) {$/;"	f
PREFIX_WITH_FOO	test/googletest-param-test-test.cc	/^#define PREFIX_WITH_FOO(/;"	d	file:
PREFIX_WITH_FOO	test/googletest-param-test-test.cc	/^TEST_P(PREFIX_WITH_MACRO(NamingTest), PREFIX_WITH_FOO(SomeTestName)) {$/;"	f
PREFIX_WITH_MACRO	test/googletest-param-test-test.cc	/^#define PREFIX_WITH_MACRO(/;"	d	file:
PREMATURE_EXIT_FILE_ENV_VAR	test/gtest_test_utils.py	/^PREMATURE_EXIT_FILE_ENV_VAR = 'TEST_PREMATURE_EXIT_FILE'$/;"	v
PROGRAM_PATH	test/googletest-output-test.py	/^PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')$/;"	v
PROGRAM_PATH	test/gtest_help_test.py	/^PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('gtest_help_test_')$/;"	v
ParamGenerator	include/gtest/internal/gtest-param-util.h	/^  ParamGenerator(const ParamGenerator& other) : impl_(other.impl_) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	include/gtest/internal/gtest-param-util.h	/^  explicit ParamGenerator(ParamGeneratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	include/gtest/internal/gtest-param-util.h	/^class ParamGenerator {$/;"	c	namespace:testing::internal
ParamGeneratorInterface	include/gtest/internal/gtest-param-util.h	/^class ParamGeneratorInterface {$/;"	c	namespace:testing::internal
ParamIterator	include/gtest/internal/gtest-param-util.h	/^  ParamIterator(const ParamIterator& other) : impl_(other.impl_->Clone()) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	include/gtest/internal/gtest-param-util.h	/^  explicit ParamIterator(ParamIteratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	include/gtest/internal/gtest-param-util.h	/^class ParamIterator {$/;"	c	namespace:testing::internal
ParamIteratorInterface	include/gtest/internal/gtest-param-util.h	/^class ParamIteratorInterface {$/;"	c	namespace:testing::internal
ParamNameFunc	test/googletest-output-test_.cc	/^std::string ParamNameFunc(const testing::TestParamInfo<std::string>& info) {$/;"	f
ParamTest	test/googletest-filter-unittest_.cc	/^class ParamTest : public testing::TestWithParam<int> {$/;"	c	namespace:__anon27	file:
ParamTest	test/googletest-output-test_.cc	/^class ParamTest : public testing::TestWithParam<std::string> {$/;"	c	file:
ParamType	include/gtest/gtest.h	/^  typedef T ParamType;$/;"	t	class:testing::WithParamInterface
ParamType	include/gtest/internal/gtest-param-util.h	/^  typedef ::std::tuple<T...> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator
ParamType	include/gtest/internal/gtest-param-util.h	/^  typedef T ParamType;$/;"	t	class:testing::internal::ParamGeneratorInterface
ParamType	include/gtest/internal/gtest-param-util.h	/^  typedef typename TestClass::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestFactory
ParameterizedDeathTest	test/googletest-param-test-test.cc	/^class ParameterizedDeathTest : public ::testing::TestWithParam<int> { };$/;"	c	file:
ParameterizedDerivedTest	test/googletest-param-test-test.cc	/^  ParameterizedDerivedTest() : count_(0) { }$/;"	f	class:ParameterizedDerivedTest
ParameterizedDerivedTest	test/googletest-param-test-test.cc	/^class ParameterizedDerivedTest : public NonParameterizedBaseTest,$/;"	c	file:
ParameterizedTestFactory	include/gtest/internal/gtest-param-util.h	/^  explicit ParameterizedTestFactory(ParamType parameter) :$/;"	f	class:testing::internal::ParameterizedTestFactory
ParameterizedTestFactory	include/gtest/internal/gtest-param-util.h	/^class ParameterizedTestFactory : public TestFactoryBase {$/;"	c	namespace:testing::internal
ParameterizedTestSuiteInfo	include/gtest/internal/gtest-param-util.h	/^  explicit ParameterizedTestSuiteInfo(const char* name,$/;"	f	class:testing::internal::ParameterizedTestSuiteInfo
ParameterizedTestSuiteInfo	include/gtest/internal/gtest-param-util.h	/^class ParameterizedTestSuiteInfo : public ParameterizedTestSuiteInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestSuiteInfoBase	include/gtest/internal/gtest-param-util.h	/^  ParameterizedTestSuiteInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestSuiteInfoBase
ParameterizedTestSuiteInfoBase	include/gtest/internal/gtest-param-util.h	/^class ParameterizedTestSuiteInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestSuiteRegistry	include/gtest/internal/gtest-param-util.h	/^  ParameterizedTestSuiteRegistry() {}$/;"	f	class:testing::internal::ParameterizedTestSuiteRegistry
ParameterizedTestSuiteRegistry	include/gtest/internal/gtest-param-util.h	/^class ParameterizedTestSuiteRegistry {$/;"	c	namespace:testing::internal
Parse	scripts/pump.py	/^  def Parse(pos):$/;"	f	function:ParseExpTokenInParens
ParseAtomicCodeNode	scripts/pump.py	/^def ParseAtomicCodeNode(tokens):$/;"	f
ParseBoolFlag	src/gtest.cc	/^static bool ParseBoolFlag(const char* str, const char* flag, bool* value) {$/;"	f	namespace:testing::internal
ParseCodeNode	scripts/pump.py	/^def ParseCodeNode(tokens):$/;"	f
ParseElseNode	scripts/pump.py	/^def ParseElseNode(tokens):$/;"	f
ParseExpNode	scripts/pump.py	/^def ParseExpNode(token):$/;"	f
ParseExpTokenInParens	scripts/pump.py	/^def ParseExpTokenInParens(lines, pos):$/;"	f
ParseFlagValue	src/gtest.cc	/^static const char* ParseFlagValue(const char* str, const char* flag,$/;"	f	namespace:testing::internal
ParseFlagsTest	test/gtest_unittest.cc	/^class ParseFlagsTest : public Test {$/;"	c	namespace:testing	file:
ParseGoogleTestFlag	src/gtest.cc	/^static bool ParseGoogleTestFlag(const char* const arg) {$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnly	src/gtest.cc	/^void ParseGoogleTestFlagsOnly(int* argc, char** argv) {$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnly	src/gtest.cc	/^void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {$/;"	f	namespace:testing::internal
ParseGoogleTestFlagsOnlyImpl	src/gtest.cc	/^void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {$/;"	f	namespace:testing::internal
ParseInParens	scripts/pump.py	/^  def ParseInParens(pos):$/;"	f	function:ParseExpTokenInParens
ParseInt32	src/gtest-port.cc	/^bool ParseInt32(const Message& src_text, const char* str, Int32* value) {$/;"	f	namespace:testing::internal
ParseInt32Flag	src/gtest.cc	/^bool ParseInt32Flag(const char* str, const char* flag, Int32* value) {$/;"	f	namespace:testing::internal
ParseInternalRunDeathTestFlag	src/gtest-death-test.cc	/^InternalRunDeathTestFlag* ParseInternalRunDeathTestFlag() {$/;"	f	namespace:testing::internal
ParseNaturalNumber	src/gtest-internal-inl.h	/^bool ParseNaturalNumber(const ::std::string& str, Integer* number) {$/;"	f	namespace:testing::internal
ParseStringFlag	src/gtest.cc	/^static bool ParseStringFlag(const char* str, const char* flag, String* value) {$/;"	f	namespace:testing::internal
ParseToAST	scripts/pump.py	/^def ParseToAST(pump_src_text):$/;"	f
ParseToken	scripts/pump.py	/^def ParseToken(lines, pos, regex, token_type):$/;"	f
PartialMatch	include/gtest/internal/gtest-port.h	/^  static bool PartialMatch(const ::std::string& str, const RE& re) {$/;"	f	class:testing::internal::RE
PartialMatch	src/gtest-port.cc	/^bool RE::PartialMatch(const char* str, const RE& re) {$/;"	f	class:testing::internal::RE
Passed	include/gtest/gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestSuite
Passed	include/gtest/gtest.h	/^  bool Passed() const { return !Skipped() && !Failed(); }$/;"	f	class:testing::TestResult
Passed	src/gtest-death-test.cc	/^bool DeathTestImpl::Passed(bool status_ok) {$/;"	f	class:testing::internal::DeathTestImpl
Passed	src/gtest-internal-inl.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::internal::UnitTestImpl
Passed	src/gtest.cc	/^bool UnitTest::Passed() const { return impl()->Passed(); }$/;"	f	class:testing::UnitTest
PassedArgument	test/googletest-death-test-test.cc	/^  bool PassedArgument(int n) const {$/;"	f	class:__anon28::MockDeathTestFactory
PassedCalls	test/googletest-death-test-test.cc	/^  size_t PassedCalls() const { return passed_args_.size(); }$/;"	f	class:__anon28::MockDeathTestFactory
PathLike	test/googletest-printers-test.cc	/^  PathLike() {}$/;"	f	class:foo::PathLike
PathLike	test/googletest-printers-test.cc	/^class PathLike {$/;"	c	namespace:foo	file:
PatternMatchesString	src/gtest.cc	/^bool UnitTestOptions::PatternMatchesString(const char *pattern,$/;"	f	class:testing::internal::UnitTestOptions
PeekToken	scripts/pump.py	/^def PeekToken(a_list):$/;"	f
PointerPrintable	test/googletest-printers-test.cc	/^struct PointerPrintable {$/;"	s	namespace:foo	file:
PolymorphicMatcher	include/gtest/gtest-matchers.h	/^  explicit PolymorphicMatcher(const Impl& an_impl) : impl_(an_impl) {}$/;"	f	class:testing::PolymorphicMatcher
PolymorphicMatcher	include/gtest/gtest-matchers.h	/^class PolymorphicMatcher {$/;"	c	namespace:testing
Pop	scripts/pump.py	/^  def Pop(token_type=None):$/;"	f	function:ParseAtomicCodeNode
Pop	scripts/pump.py	/^  def Pop(token_type=None):$/;"	f	function:ParseElseNode
PopFront	scripts/pump.py	/^def PopFront(a_list):$/;"	f
PopRange	scripts/pump.py	/^  def PopRange(self):$/;"	m	class:Env
PopToken	scripts/pump.py	/^def PopToken(a_list, token_type=None):$/;"	f
PopVariable	scripts/pump.py	/^  def PopVariable(self):$/;"	m	class:Env
PortableLocaltime	src/gtest.cc	/^static bool PortableLocaltime(time_t seconds, struct tm* out) {$/;"	f	namespace:testing::internal
PostFlagParsingInit	src/gtest.cc	/^void UnitTestImpl::PostFlagParsingInit() {$/;"	f	class:testing::internal::UnitTestImpl
PreCalculatedPrimeTable	samples/prime_tables.h	/^  explicit PreCalculatedPrimeTable(int max)$/;"	f	class:PreCalculatedPrimeTable
PreCalculatedPrimeTable	samples/prime_tables.h	/^class PreCalculatedPrimeTable : public PrimeTable {$/;"	c
PredFormatFunction1	test/gtest_pred_impl_unittest.cc	/^testing::AssertionResult PredFormatFunction1(const char* e1,$/;"	f
PredFormatFunction2	test/gtest_pred_impl_unittest.cc	/^testing::AssertionResult PredFormatFunction2(const char* e1,$/;"	f
PredFormatFunction3	test/gtest_pred_impl_unittest.cc	/^testing::AssertionResult PredFormatFunction3(const char* e1,$/;"	f
PredFormatFunction4	test/gtest_pred_impl_unittest.cc	/^testing::AssertionResult PredFormatFunction4(const char* e1,$/;"	f
PredFormatFunction5	test/gtest_pred_impl_unittest.cc	/^testing::AssertionResult PredFormatFunction5(const char* e1,$/;"	f
PredFormatFunctor1	test/gtest_pred_impl_unittest.cc	/^struct PredFormatFunctor1 {$/;"	s	file:
PredFormatFunctor2	test/gtest_pred_impl_unittest.cc	/^struct PredFormatFunctor2 {$/;"	s	file:
PredFormatFunctor3	test/gtest_pred_impl_unittest.cc	/^struct PredFormatFunctor3 {$/;"	s	file:
PredFormatFunctor4	test/gtest_pred_impl_unittest.cc	/^struct PredFormatFunctor4 {$/;"	s	file:
PredFormatFunctor5	test/gtest_pred_impl_unittest.cc	/^struct PredFormatFunctor5 {$/;"	s	file:
PredFunction1	test/gtest_pred_impl_unittest.cc	/^bool PredFunction1(T1 v1) {$/;"	f
PredFunction1Bool	test/gtest_pred_impl_unittest.cc	/^bool PredFunction1Bool(Bool v1) {$/;"	f
PredFunction1Int	test/gtest_pred_impl_unittest.cc	/^bool PredFunction1Int(int v1) {$/;"	f
PredFunction2	test/gtest_pred_impl_unittest.cc	/^bool PredFunction2(T1 v1, T2 v2) {$/;"	f
PredFunction2Bool	test/gtest_pred_impl_unittest.cc	/^bool PredFunction2Bool(Bool v1, Bool v2) {$/;"	f
PredFunction2Int	test/gtest_pred_impl_unittest.cc	/^bool PredFunction2Int(int v1, int v2) {$/;"	f
PredFunction3	test/gtest_pred_impl_unittest.cc	/^bool PredFunction3(T1 v1, T2 v2, T3 v3) {$/;"	f
PredFunction3Bool	test/gtest_pred_impl_unittest.cc	/^bool PredFunction3Bool(Bool v1, Bool v2, Bool v3) {$/;"	f
PredFunction3Int	test/gtest_pred_impl_unittest.cc	/^bool PredFunction3Int(int v1, int v2, int v3) {$/;"	f
PredFunction4	test/gtest_pred_impl_unittest.cc	/^bool PredFunction4(T1 v1, T2 v2, T3 v3, T4 v4) {$/;"	f
PredFunction4Bool	test/gtest_pred_impl_unittest.cc	/^bool PredFunction4Bool(Bool v1, Bool v2, Bool v3, Bool v4) {$/;"	f
PredFunction4Int	test/gtest_pred_impl_unittest.cc	/^bool PredFunction4Int(int v1, int v2, int v3, int v4) {$/;"	f
PredFunction5	test/gtest_pred_impl_unittest.cc	/^bool PredFunction5(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5) {$/;"	f
PredFunction5Bool	test/gtest_pred_impl_unittest.cc	/^bool PredFunction5Bool(Bool v1, Bool v2, Bool v3, Bool v4, Bool v5) {$/;"	f
PredFunction5Int	test/gtest_pred_impl_unittest.cc	/^bool PredFunction5Int(int v1, int v2, int v3, int v4, int v5) {$/;"	f
PredFunctor1	test/gtest_pred_impl_unittest.cc	/^struct PredFunctor1 {$/;"	s	file:
PredFunctor2	test/gtest_pred_impl_unittest.cc	/^struct PredFunctor2 {$/;"	s	file:
PredFunctor3	test/gtest_pred_impl_unittest.cc	/^struct PredFunctor3 {$/;"	s	file:
PredFunctor4	test/gtest_pred_impl_unittest.cc	/^struct PredFunctor4 {$/;"	s	file:
PredFunctor5	test/gtest_pred_impl_unittest.cc	/^struct PredFunctor5 {$/;"	s	file:
Predicate	scripts/gen_gtest_pred_impl.py	/^class Predicate%(n)sTest : public testing::Test {$/;"	c
Predicate1Test	test/gtest_pred_impl_unittest.cc	/^class Predicate1Test : public testing::Test {$/;"	c	file:
Predicate2Test	test/gtest_pred_impl_unittest.cc	/^class Predicate2Test : public testing::Test {$/;"	c	file:
Predicate3Test	test/gtest_pred_impl_unittest.cc	/^class Predicate3Test : public testing::Test {$/;"	c	file:
Predicate4Test	test/gtest_pred_impl_unittest.cc	/^class Predicate4Test : public testing::Test {$/;"	c	file:
Predicate5Test	test/gtest_pred_impl_unittest.cc	/^class Predicate5Test : public testing::Test {$/;"	c	file:
PrematureExitDeathTest	test/gtest_premature_exit_test.cc	/^typedef PrematureExitTest PrematureExitDeathTest;$/;"	t	namespace:__anon35	file:
PrematureExitFileExists	test/gtest_premature_exit_test.cc	/^  bool PrematureExitFileExists() const {$/;"	f	class:__anon35::PrematureExitTest
PrematureExitTest	test/gtest_premature_exit_test.cc	/^  PrematureExitTest() {$/;"	f	class:__anon35::PrematureExitTest
PrematureExitTest	test/gtest_premature_exit_test.cc	/^class PrematureExitTest : public Test {$/;"	c	namespace:__anon35	file:
PrettyUnitTestResultPrinter	src/gtest.cc	/^  PrettyUnitTestResultPrinter() {}$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrettyUnitTestResultPrinter	src/gtest.cc	/^class PrettyUnitTestResultPrinter : public TestEventListener {$/;"	c	namespace:testing::internal	file:
PrimeTable	samples/prime_tables.h	/^class PrimeTable {$/;"	c
PrimeTableImplementations	samples/sample6_unittest.cc	/^    PrimeTableImplementations;$/;"	t	namespace:__anon1	file:
PrimeTableTest	samples/sample6_unittest.cc	/^  PrimeTableTest() : table_(CreatePrimeTable<T>()) {}$/;"	f	class:__anon1::PrimeTableTest
PrimeTableTest	samples/sample6_unittest.cc	/^class PrimeTableTest : public testing::Test {$/;"	c	namespace:__anon1	file:
PrimeTableTest	samples/sample8_unittest.cc	/^class PrimeTableTest : public TestWithParam< ::std::tuple<bool, int> > {$/;"	c	namespace:__anon10	file:
PrimeTableTest2	samples/sample6_unittest.cc	/^class PrimeTableTest2 : public PrimeTableTest<T> {$/;"	c	namespace:__anon1	file:
PrimeTableTestSmpl7	samples/sample7_unittest.cc	/^class PrimeTableTestSmpl7 : public TestWithParam<CreatePrimeTableFunc*> {$/;"	c	namespace:__anon7	file:
Print	include/gtest/gtest-printers.h	/^  static void Print(char* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	include/gtest/gtest-printers.h	/^  static void Print(const ::absl::optional<T>& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalPrinter
Print	include/gtest/gtest-printers.h	/^  static void Print(const ::absl::variant<T...>& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalPrinter
Print	include/gtest/gtest-printers.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalPrinter
Print	include/gtest/gtest-printers.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	include/gtest/gtest-printers.h	/^  static void Print(const char* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	include/gtest/gtest-printers.h	/^  static void Print(const wchar_t* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	include/gtest/gtest-printers.h	/^  static void Print(wchar_t* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	samples/sample4.cc	/^void Counter::Print() const {$/;"	f	class:Counter
Print	test/googletest-printers-test.cc	/^std::string Print(const T& value) {$/;"	f	namespace:testing::gtest_printers_test
PrintAsCharLiteralTo	src/gtest-printers.cc	/^static CharFormat PrintAsCharLiteralTo(Char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintAsStringLiteralTo	src/gtest-printers.cc	/^static CharFormat PrintAsStringLiteralTo(char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintAsStringLiteralTo	src/gtest-printers.cc	/^static CharFormat PrintAsStringLiteralTo(wchar_t c, ostream* os) {$/;"	f	namespace:testing::internal
PrintByRef	test/googletest-printers-test.cc	/^std::string PrintByRef(const T& value) {$/;"	f	namespace:testing::gtest_printers_test
PrintByteSegmentInObjectTo	src/gtest-printers.cc	/^void PrintByteSegmentInObjectTo(const unsigned char* obj_bytes, size_t start,$/;"	f	namespace:testing::__anon21
PrintBytesInObjectTo	src/gtest-printers.cc	/^void PrintBytesInObjectTo(const unsigned char* obj_bytes, size_t count,$/;"	f	namespace:testing::internal2
PrintBytesInObjectToImpl	src/gtest-printers.cc	/^void PrintBytesInObjectToImpl(const unsigned char* obj_bytes, size_t count,$/;"	f	namespace:testing::__anon21
PrintCharAndCodeTo	src/gtest-printers.cc	/^void PrintCharAndCodeTo(Char c, ostream* os) {$/;"	f	namespace:testing::internal
PrintCharsAsStringTo	src/gtest-printers.cc	/^static CharFormat PrintCharsAsStringTo($/;"	f	namespace:testing::internal
PrintColorEncoded	src/gtest.cc	/^static void PrintColorEncoded(const char* str) {$/;"	f	namespace:testing::internal
PrintFailedTests	src/gtest.cc	/^void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrintFlag	test/googletest-env-var-test_.cc	/^void PrintFlag(const char* flag) {$/;"	f	namespace:testing
PrintFullTestCommentIfPresent	src/gtest.cc	/^static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {$/;"	f	namespace:testing::internal
PrintHeader	src/gtest.cc	/^  void PrintHeader(std::ostream* ss) const {$/;"	f	class:testing::internal::edit_distance::__anon12::Hunk	file:
PrintJsonTestList	src/gtest.cc	/^void JsonUnitTestResultPrinter::PrintJsonTestList($/;"	f	class:testing::internal::JsonUnitTestResultPrinter
PrintJsonTestSuite	src/gtest.cc	/^void JsonUnitTestResultPrinter::PrintJsonTestSuite($/;"	f	class:testing::internal::JsonUnitTestResultPrinter
PrintJsonUnitTest	src/gtest.cc	/^void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,$/;"	f	class:testing::internal::JsonUnitTestResultPrinter
PrintOnOneLine	src/gtest.cc	/^static void PrintOnOneLine(const char* str, int max_length) {$/;"	f	namespace:testing::internal
PrintPointer	test/googletest-printers-test.cc	/^static std::string PrintPointer(const void* p) {$/;"	f	namespace:testing::gtest_printers_test
PrintRawArrayTo	include/gtest/gtest-printers.h	/^void PrintRawArrayTo(const T a[], size_t count, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintSkippedTests	src/gtest.cc	/^void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrintStringTo	src/gtest-printers.cc	/^void PrintStringTo(const ::std::string& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTestName	src/gtest.cc	/^  static void PrintTestName(const char* test_suite, const char* test) {$/;"	f	class:testing::internal::PrettyUnitTestResultPrinter
PrintTestPartResult	src/gtest.cc	/^static void PrintTestPartResult(const TestPartResult& test_part_result) {$/;"	f	namespace:testing::internal
PrintTestPartResultToString	src/gtest.cc	/^static std::string PrintTestPartResultToString($/;"	f	namespace:testing::internal
PrintTime	test/gtest_unittest.cc	/^  static Flags PrintTime(bool print_time) {$/;"	f	struct:testing::Flags
PrintTo	include/gtest/gtest-printers.h	/^inline void PrintTo(absl::string_view sp, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^inline void PrintTo(bool x, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^inline void PrintTo(char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^inline void PrintTo(char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^inline void PrintTo(const ::std::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^inline void PrintTo(const ::std::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^inline void PrintTo(const signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^inline void PrintTo(const unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^inline void PrintTo(signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^inline void PrintTo(std::nullptr_t, ::std::ostream* os) { *os << "(nullptr)"; }$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^inline void PrintTo(unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^inline void PrintTo(wchar_t* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^void PrintTo(const ::std::pair<T1, T2>& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^void PrintTo(const ::std::tuple<Types...>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^void PrintTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	include/gtest/gtest-printers.h	/^void PrintTo(std::reference_wrapper<T> ref, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest-printers.cc	/^void PrintTo(const char* s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest-printers.cc	/^void PrintTo(const wchar_t* s, ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest-printers.cc	/^void PrintTo(signed char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest-printers.cc	/^void PrintTo(unsigned char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest-printers.cc	/^void PrintTo(wchar_t wc, ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	src/gtest.cc	/^  void PrintTo(std::ostream* os) {$/;"	f	class:testing::internal::edit_distance::__anon12::Hunk
PrintTo	test/googletest-list-tests-unittest_.cc	/^void PrintTo(const MyType& x, std::ostream* os) {$/;"	f
PrintTo	test/googletest-printers-test.cc	/^void PrintTo(EnumWithPrintTo e, std::ostream* os) {$/;"	f
PrintTo	test/googletest-printers-test.cc	/^void PrintTo(const PrintableViaPrintTo& x, ::std::ostream* os) {$/;"	f	namespace:foo
PrintTo	test/googletest-printers-test.cc	/^void PrintTo(const PrintableViaPrintToTemplate<T>& x, ::std::ostream* os) {$/;"	f	namespace:foo
PrintToString	include/gtest/gtest-printers.h	/^::std::string PrintToString(const T& value) {$/;"	f	namespace:testing
PrintToStringParamName	include/gtest/internal/gtest-param-util.h	/^struct PrintToStringParamName {$/;"	s	namespace:testing
PrintTupleTo	include/gtest/gtest-printers.h	/^void PrintTupleTo(const T& t, std::integral_constant<size_t, I>,$/;"	f	namespace:testing::internal
PrintTupleTo	include/gtest/gtest-printers.h	/^void PrintTupleTo(const T&, std::integral_constant<size_t, 0>,$/;"	f	namespace:testing::internal
PrintValue	include/gtest/gtest-printers.h	/^  static void PrintValue(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal2::TypeWithoutFormatter
PrintValue	include/gtest/gtest-printers.h	/^void TypeWithoutFormatter<T, kConvertibleToStringView>::PrintValue($/;"	f	class:testing::internal2::TypeWithoutFormatter
PrintValue	test/googletest-param-test-test.cc	/^::std::string PrintValue(const T& value) {$/;"	f
PrintWideStringTo	src/gtest-printers.cc	/^void PrintWideStringTo(const ::std::wstring& s, ostream* os) {$/;"	f	namespace:testing::internal
PrintXmlTestSuite	src/gtest.cc	/^void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
PrintXmlTestsList	src/gtest.cc	/^void XmlUnitTestResultPrinter::PrintXmlTestsList($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
PrintXmlUnitTest	src/gtest.cc	/^void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
PrintableViaPrintTo	test/googletest-printers-test.cc	/^  PrintableViaPrintTo() : value() {}$/;"	f	struct:foo::PrintableViaPrintTo
PrintableViaPrintTo	test/googletest-printers-test.cc	/^struct PrintableViaPrintTo {$/;"	s	namespace:foo	file:
PrintableViaPrintToTemplate	test/googletest-printers-test.cc	/^  explicit PrintableViaPrintToTemplate(const T& a_value) : value_(a_value) {}$/;"	f	class:foo::PrintableViaPrintToTemplate
PrintableViaPrintToTemplate	test/googletest-printers-test.cc	/^class PrintableViaPrintToTemplate {$/;"	c	namespace:foo	file:
PrivateCode	test/production.cc	/^PrivateCode::PrivateCode() : x_(0) {}$/;"	f	class:PrivateCode
PrivateCode	test/production.h	/^class PrivateCode {$/;"	c
PrivateCodeFixtureTest	test/gtest_prod_test.cc	/^typedef testing::Test PrivateCodeFixtureTest;$/;"	t	file:
ProcessFile	scripts/fuse_gtest_files.py	/^  def ProcessFile(gtest_header_path):$/;"	f	function:FuseGTestH
ProcessFile	scripts/fuse_gtest_files.py	/^  def ProcessFile(gtest_source_file):$/;"	f	function:FuseGTestAllCcToFile
PropertyOne	test/gtest_xml_outfile1_test_.cc	/^class PropertyOne : public testing::Test {$/;"	c	file:
PropertyRecordingTest	test/gtest_xml_output_unittest_.cc	/^class PropertyRecordingTest : public Test {$/;"	c	file:
PropertyTwo	test/gtest_xml_outfile2_test_.cc	/^class PropertyTwo : public testing::Test {$/;"	c	file:
ProtectedFixtureMethodsTest	test/gtest_unittest.cc	/^class ProtectedFixtureMethodsTest : public Test {$/;"	c	file:
PushFront	scripts/pump.py	/^def PushFront(a_list, elem):$/;"	f
PushLine	src/gtest.cc	/^  void PushLine(char edit, const char* line) {$/;"	f	class:testing::internal::edit_distance::__anon12::Hunk
PushRange	scripts/pump.py	/^  def PushRange(self, var, lower, upper):$/;"	m	class:Env
PushTrace	src/gtest.cc	/^void ScopedTrace::PushTrace(const char* file, int line, std::string message) {$/;"	f	class:testing::ScopedTrace
PushVariable	scripts/pump.py	/^  def PushVariable(self, var, value):$/;"	m	class:Env
Python	scripts/fuse_gtest_files.py	/^  from sets import Set as set  # For Python 2.3 compatibility$/;"	i
Python	test/googletest-filter-unittest.py	/^  from sets import Set as set  # For Python 2.3 compatibility$/;"	i
Queue	samples/sample3-inl.h	/^  Queue() : head_(nullptr), last_(nullptr), size_(0) {}$/;"	f	class:Queue
Queue	samples/sample3-inl.h	/^class Queue {$/;"	c
QueueNode	samples/sample3-inl.h	/^  explicit QueueNode(const E& an_element)$/;"	f	class:QueueNode
QueueNode	samples/sample3-inl.h	/^class QueueNode {$/;"	c
QueueTest	samples/sample5_unittest.cc	/^class QueueTest : public QuickTest {$/;"	c	namespace:__anon5	file:
QueueTestSmpl3	samples/sample3_unittest.cc	/^class QueueTestSmpl3 : public testing::Test {$/;"	c	namespace:__anon2	file:
QuickTest	samples/sample5_unittest.cc	/^class QuickTest : public testing::Test {$/;"	c	namespace:__anon5	file:
RE	include/gtest/internal/gtest-port.h	/^  RE(const ::std::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:testing::internal::RE
RE	include/gtest/internal/gtest-port.h	/^  RE(const RE& other) { Init(other.pattern()); }$/;"	f	class:testing::internal::RE
RE	include/gtest/internal/gtest-port.h	/^  RE(const char* regex) { Init(regex); }  \/\/ NOLINT$/;"	f	class:testing::internal::RE
RE	include/gtest/internal/gtest-port.h	/^class GTEST_API_ RE {$/;"	c	namespace:testing::internal
REGISTER_TYPED_TEST_CASE_P	include/gtest/gtest-typed-test.h	/^#define REGISTER_TYPED_TEST_CASE_P /;"	d
REGISTER_TYPED_TEST_SUITE_P	include/gtest/gtest-typed-test.h	/^#define REGISTER_TYPED_TEST_SUITE_P(/;"	d
REST_OF_LINE_REGEX	scripts/pump.py	/^REST_OF_LINE_REGEX = re.compile(r'.*?(?=$|\\$\\$)')$/;"	v
RETURNED	src/gtest-death-test.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
RETest	test/googletest-port-test.cc	/^class RETest : public ::testing::Test {};$/;"	c	namespace:testing::internal	file:
RM	Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.9.3_1\/bin\/cmake -E remove -f$/;"	m
RStripNewLineFromToken	scripts/pump.py	/^def RStripNewLineFromToken(token):$/;"	f
RUN_ALL_TESTS	include/gtest/gtest.h	/^inline int RUN_ALL_TESTS() {$/;"	f
Random	include/gtest/internal/gtest-internal.h	/^  explicit Random(UInt32 seed) : state_(seed) {}$/;"	f	class:testing::internal::Random
Random	include/gtest/internal/gtest-internal.h	/^class GTEST_API_ Random {$/;"	c	namespace:testing::internal
RandomSeed	test/gtest_unittest.cc	/^  static Flags RandomSeed(Int32 random_seed) {$/;"	f	struct:testing::Flags
RandomSeedFlag	test/googletest-shuffle-test.py	/^def RandomSeedFlag(n):$/;"	f
Range	include/gtest/gtest-param-test.h	/^internal::ParamGenerator<T> Range(T start, T end) {$/;"	f	namespace:testing
Range	include/gtest/gtest-param-test.h	/^internal::ParamGenerator<T> Range(T start, T end, IncrementT step) {$/;"	f	namespace:testing
RangeGenerator	include/gtest/internal/gtest-param-util.h	/^  RangeGenerator(T begin, T end, IncrementT step)$/;"	f	class:testing::internal::RangeGenerator
RangeGenerator	include/gtest/internal/gtest-param-util.h	/^class RangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
RangeIsShuffled	test/gtest_unittest.cc	/^  static bool RangeIsShuffled(const TestingVector& vector, int begin, int end) {$/;"	f	class:__anon40::VectorShuffleTest
RangeIsUnshuffled	test/gtest_unittest.cc	/^  static bool RangeIsUnshuffled($/;"	f	class:__anon40::VectorShuffleTest
RangeNode	scripts/pump.py	/^class RangeNode:$/;"	c
RawCodeNode	scripts/pump.py	/^class RawCodeNode:$/;"	c
ReactionToSharding	src/gtest-internal-inl.h	/^  enum ReactionToSharding {$/;"	g	class:testing::internal::UnitTestImpl
Read	include/gtest/internal/gtest-port.h	/^inline int Read(int fd, void* buf, unsigned int count) {$/;"	f	namespace:testing::internal::posix
ReadAndInterpretStatusByte	src/gtest-death-test.cc	/^void DeathTestImpl::ReadAndInterpretStatusByte() {$/;"	f	class:testing::internal::DeathTestImpl
ReadEntireFile	src/gtest-port.cc	/^std::string ReadEntireFile(FILE* file) {$/;"	f	namespace:testing::internal
ReadFile	scripts/upload.py	/^  def ReadFile(self, filename):$/;"	m	class:SubversionVCS
ReadProcFileField	src/gtest-port.cc	/^T ReadProcFileField(const std::string& filename, int field) {$/;"	f	namespace:testing::internal::__anon18
RealMain	scripts/upload.py	/^def RealMain(argv, data=None):$/;"	f
RecordProperty	src/gtest-internal-inl.h	/^  static void RecordProperty(TestResult* test_result,$/;"	f	class:testing::internal::TestResultAccessor
RecordProperty	src/gtest.cc	/^void Test::RecordProperty(const std::string& key, const std::string& value) {$/;"	f	class:testing::Test
RecordProperty	src/gtest.cc	/^void Test::RecordProperty(const std::string& key, int value) {$/;"	f	class:testing::Test
RecordProperty	src/gtest.cc	/^void TestResult::RecordProperty(const std::string& xml_element,$/;"	f	class:testing::TestResult
RecordProperty	src/gtest.cc	/^void UnitTest::RecordProperty(const std::string& key,$/;"	f	class:testing::UnitTest
RecordProperty	src/gtest.cc	/^void UnitTestImpl::RecordProperty(const TestProperty& test_property) {$/;"	f	class:testing::internal::UnitTestImpl
Register	include/gtest/internal/gtest-internal.h	/^  static bool Register(const char* \/*prefix*\/, const CodeLocation&,$/;"	f	class:testing::internal::TypeParameterizedTest
Register	include/gtest/internal/gtest-internal.h	/^  static bool Register(const char* \/*prefix*\/, const CodeLocation&,$/;"	f	class:testing::internal::TypeParameterizedTestSuite
Register	include/gtest/internal/gtest-internal.h	/^  static bool Register(const char* prefix, CodeLocation code_location,$/;"	f	class:testing::internal::TypeParameterizedTestSuite
Register	include/gtest/internal/gtest-internal.h	/^  static bool Register(const char* prefix, const CodeLocation& code_location,$/;"	f	class:testing::internal::TypeParameterizedTest
RegisterParameterizedTests	src/gtest.cc	/^void UnitTestImpl::RegisterParameterizedTests() {$/;"	f	class:testing::internal::UnitTestImpl
RegisterTest	include/gtest/gtest.h	/^TestInfo* RegisterTest(const char* test_suite_name, const char* test_name,$/;"	f	namespace:testing
RegisterTests	include/gtest/internal/gtest-param-util.h	/^  void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestSuiteRegistry
RegisterTypedTestCase_P_IsDeprecated	include/gtest/internal/gtest-internal.h	/^constexpr bool RegisterTypedTestCase_P_IsDeprecated() { return true; }$/;"	f	namespace:testing::internal
RegisteredTestsMap	include/gtest/internal/gtest-internal.h	/^  typedef ::std::map<std::string, CodeLocation> RegisteredTestsMap;$/;"	t	class:testing::internal::TypedTestSuitePState
ReinterpretBits	include/gtest/internal/gtest-internal.h	/^  static RawType ReinterpretBits(const Bits bits) {$/;"	f	class:testing::internal::FloatingPoint
RelationToSourceCopy	include/gtest/internal/gtest-internal.h	/^struct RelationToSourceCopy {};$/;"	s	namespace:testing::internal
RelationToSourceReference	include/gtest/internal/gtest-internal.h	/^struct RelationToSourceReference {};$/;"	s	namespace:testing::internal
Release	src/gtest.cc	/^TestEventListener* TestEventListeners::Release(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
Release	src/gtest.cc	/^TestEventListener* TestEventRepeater::Release(TestEventListener *listener) {$/;"	f	class:testing::internal::TestEventRepeater
RemoveDirectoryName	src/gtest-filepath.cc	/^FilePath FilePath::RemoveDirectoryName() const {$/;"	f	class:testing::internal::FilePath
RemoveExtension	src/gtest-filepath.cc	/^FilePath FilePath::RemoveExtension(const char* extension) const {$/;"	f	class:testing::internal::FilePath
RemoveFileName	src/gtest-filepath.cc	/^FilePath FilePath::RemoveFileName() const {$/;"	f	class:testing::internal::FilePath
RemoveInvalidXmlCharacters	src/gtest.cc	/^std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
RemoveLocations	test/googletest-output-test.py	/^def RemoveLocations(test_output):$/;"	f
RemoveMatchingTests	test/googletest-output-test.py	/^def RemoveMatchingTests(test_output, pattern):$/;"	f
RemoveStackTraceDetails	test/googletest-output-test.py	/^def RemoveStackTraceDetails(output):$/;"	f
RemoveStackTraces	test/googletest-output-test.py	/^def RemoveStackTraces(output):$/;"	f
RemoveTestCounts	test/googletest-output-test.py	/^def RemoveTestCounts(output):$/;"	f
RemoveTime	test/googletest-output-test.py	/^def RemoveTime(output):$/;"	f
RemoveTrailingPathSeparator	src/gtest-filepath.cc	/^FilePath FilePath::RemoveTrailingPathSeparator() const {$/;"	f	class:testing::internal::FilePath
RemoveTypeInfoDetails	test/googletest-output-test.py	/^def RemoveTypeInfoDetails(test_output):$/;"	f
RemoveUnsupportedTests	test/googletest-output-test.py	/^  def RemoveUnsupportedTests(self, test_output):$/;"	m	class:GTestOutputTest
Repeat	test/gtest_unittest.cc	/^  static Flags Repeat(Int32 repeat) {$/;"	f	struct:testing::Flags
RepeatFlag	test/googletest-shuffle-test.py	/^def RepeatFlag(n):$/;"	f
ReplaceDeathTestFactory	test/googletest-death-test-test.cc	/^  explicit ReplaceDeathTestFactory(DeathTestFactory* new_factory)$/;"	f	class:testing::internal::ReplaceDeathTestFactory
ReplaceDeathTestFactory	test/googletest-death-test-test.cc	/^class ReplaceDeathTestFactory {$/;"	c	namespace:testing::internal	file:
ReportDestroyed	test/googletest-port-test.cc	/^  void ReportDestroyed() {$/;"	f	class:testing::internal::DestructorCall
ReportFailureInUnknownLocation	src/gtest.cc	/^void ReportFailureInUnknownLocation(TestPartResult::Type result_type,$/;"	f	namespace:testing::internal
ReportInvalidTestSuiteType	src/gtest.cc	/^void ReportInvalidTestSuiteType(const char* test_suite_name,$/;"	f	namespace:testing::internal
ReportTestPartResult	src/gtest-test-part.cc	/^void HasNewFatalFailureHelper::ReportTestPartResult($/;"	f	class:testing::internal::HasNewFatalFailureHelper
ReportTestPartResult	src/gtest.cc	/^void DefaultGlobalTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::internal::DefaultGlobalTestPartResultReporter
ReportTestPartResult	src/gtest.cc	/^void DefaultPerThreadTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::internal::DefaultPerThreadTestPartResultReporter
ReportTestPartResult	src/gtest.cc	/^void ScopedFakeTestPartResultReporter::ReportTestPartResult($/;"	f	class:testing::ScopedFakeTestPartResultReporter
Reseed	include/gtest/internal/gtest-internal.h	/^  void Reseed(UInt32 seed) { state_ = seed; }$/;"	f	class:testing::internal::Random
Reset	src/gtest-port.cc	/^void AutoHandle::Reset() {$/;"	f	class:testing::internal::AutoHandle
Reset	src/gtest-port.cc	/^void AutoHandle::Reset(HANDLE handle) {$/;"	f	class:testing::internal::AutoHandle
Reset	test/gtest_environment_test.cc	/^  void Reset() {$/;"	f	class:__anon26::MyEnvironment
ResetCounts	test/gtest_repeat_test.cc	/^void ResetCounts() {$/;"	f	namespace:__anon31
ResetList	test/googletest-port-test.cc	/^  static void ResetList() {$/;"	f	class:testing::internal::DestructorCall
ResultIsEven	test/gtest_unittest.cc	/^AssertionResult ResultIsEven(int n) {$/;"	f	namespace:__anon40
ResultIsEvenNoExplanation	test/gtest_unittest.cc	/^AssertionResult ResultIsEvenNoExplanation(int n) {$/;"	f	namespace:__anon40
RetrieveThreadLocalValue	test/googletest-port-test.cc	/^void RetrieveThreadLocalValue($/;"	f	namespace:testing::internal
ReturnSentinel	include/gtest/internal/gtest-death-test-internal.h	/^    explicit ReturnSentinel(DeathTest* test) : test_(test) { }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
ReturnSentinel	include/gtest/internal/gtest-death-test-internal.h	/^  class ReturnSentinel {$/;"	c	class:testing::internal::DeathTest
RmDir	include/gtest/internal/gtest-port.h	/^inline int RmDir(const char* dir) { return _rmdir(dir); }$/;"	f	namespace:testing::internal::posix
Run	include/gtest/internal/gtest-port.h	/^    virtual void Run() {$/;"	f	class:testing::internal::ThreadWithParam::RunnableImpl
Run	src/gtest.cc	/^int UnitTest::Run() {$/;"	f	class:testing::UnitTest
Run	src/gtest.cc	/^void Test::Run() {$/;"	f	class:testing::Test
Run	src/gtest.cc	/^void TestInfo::Run() {$/;"	f	class:testing::TestInfo
Run	src/gtest.cc	/^void TestSuite::Run() {$/;"	f	class:testing::TestSuite
Run	test/googletest-break-on-failure-unittest.py	/^def Run(command):$/;"	f
Run	test/googletest-list-tests-unittest.py	/^def Run(args):$/;"	f
Run	test/googletest-throw-on-failure-test.py	/^def Run(command):$/;"	f
RunAllTests	src/gtest.cc	/^bool UnitTestImpl::RunAllTests() {$/;"	f	class:testing::internal::UnitTestImpl
RunAllTests	test/googletest-output-test_.cc	/^int RunAllTests() {$/;"	f
RunAllTests	test/gtest_environment_test.cc	/^int RunAllTests(MyEnvironment* env, FailureType failure) {$/;"	f	namespace:__anon26
RunAndExtractTestList	test/googletest-filter-unittest.py	/^def RunAndExtractTestList(args = None):$/;"	f
RunAndReturnOutput	test/googletest-filter-unittest.py	/^def RunAndReturnOutput(args = None):$/;"	f
RunAndReturnOutput	test/googletest-shuffle-test.py	/^def RunAndReturnOutput(extra_env, args):$/;"	f
RunAndVerify	test/googletest-break-on-failure-unittest.py	/^  def RunAndVerify(self, env_var_value, flag_value, expect_seg_fault):$/;"	m	class:GTestBreakOnFailureUnitTest
RunAndVerify	test/googletest-filter-unittest.py	/^  def RunAndVerify(self, gtest_filter, tests_to_run):$/;"	m	class:GTestFilterUnitTest
RunAndVerify	test/googletest-list-tests-unittest.py	/^  def RunAndVerify(self, flag_value, expected_output_re, other_flag):$/;"	m	class:GTestListTestsUnitTest
RunAndVerify	test/googletest-throw-on-failure-test.py	/^  def RunAndVerify(self, env_var_value, flag_value, should_fail):$/;"	m	class:ThrowOnFailureTest
RunAndVerifyAllowingDisabled	test/googletest-filter-unittest.py	/^  def RunAndVerifyAllowingDisabled(self, gtest_filter, tests_to_run):$/;"	m	class:GTestFilterUnitTest
RunAndVerifyWithSharding	test/googletest-filter-unittest.py	/^  def RunAndVerifyWithSharding(self, gtest_filter, total_shards, tests_to_run,$/;"	m	class:GTestFilterUnitTest
RunAtomicCode	scripts/pump.py	/^def RunAtomicCode(env, node, output):$/;"	f
RunCode	scripts/pump.py	/^def RunCode(env, code_node, output):$/;"	f
RunFromThread	test/googletest-port-test.cc	/^void RunFromThread(void (func)(T), T param) {$/;"	f	namespace:testing::internal
RunReturningDeathTest	test/googletest-death-test-test.cc	/^  static void RunReturningDeathTest(bool* flag) {$/;"	f	class:__anon28::MacroLogicDeathTest
RunSetUpTestSuite	include/gtest/gtest.h	/^  void RunSetUpTestSuite() {$/;"	f	class:testing::TestSuite
RunShell	scripts/upload.py	/^def RunShell(command, silent_ok=False, universal_newlines=True,$/;"	f
RunShellWithReturnCode	scripts/upload.py	/^def RunShellWithReturnCode(command, print_output=False,$/;"	f
RunTearDownTestSuite	include/gtest/gtest.h	/^  void RunTearDownTestSuite() {$/;"	f	class:testing::TestSuite
RunWithFlag	test/gtest_help_test.py	/^def RunWithFlag(flag):$/;"	f
RunWithSharding	test/googletest-filter-unittest.py	/^def RunWithSharding(total_shards, shard_index, command):$/;"	f
Runnable	include/gtest/internal/gtest-port.h	/^  class Runnable {$/;"	c	class:testing::internal::ThreadWithParamBase
RunnableImpl	include/gtest/internal/gtest-port.h	/^    RunnableImpl(UserThreadFunc* func, T param)$/;"	f	class:testing::internal::ThreadWithParam::RunnableImpl
RunnableImpl	include/gtest/internal/gtest-port.h	/^  class RunnableImpl : public Runnable {$/;"	c	class:testing::internal::ThreadWithParam
SAMPLE_DIR	scripts/test/Makefile	/^SAMPLE_DIR = ..\/..\/samples$/;"	m
SCOPED_TRACE	include/gtest/gtest.h	/^#define SCOPED_TRACE(/;"	d
SCRIPT_DIR	scripts/gen_gtest_pred_impl.py	/^SCRIPT_DIR = os.path.dirname(sys.argv[0])$/;"	v
SHARDED_TESTS	test/googletest-shuffle-test.py	/^SHARDED_TESTS = []$/;"	v
SHARD_INDEX_ENV_VAR	test/googletest-filter-unittest.py	/^SHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'$/;"	v
SHARD_INDEX_ENV_VAR	test/googletest-shuffle-test.py	/^SHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'$/;"	v
SHARD_INDEX_ENV_VAR	test/gtest_xml_output_unittest.py	/^SHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'$/;"	v
SHARD_STATUS_FILE_ENV_VAR	test/googletest-filter-unittest.py	/^SHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'$/;"	v
SHARD_STATUS_FILE_ENV_VAR	test/gtest_xml_output_unittest.py	/^SHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'$/;"	v
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHUFFLED_ACTIVE_TESTS	test/googletest-shuffle-test.py	/^SHUFFLED_ACTIVE_TESTS = []$/;"	v
SHUFFLED_ALL_TESTS	test/googletest-shuffle-test.py	/^SHUFFLED_ALL_TESTS = []$/;"	v
SHUFFLED_FILTERED_TESTS	test/googletest-shuffle-test.py	/^SHUFFLED_FILTERED_TESTS = []$/;"	v
SHUFFLED_SHARDED_TESTS	test/googletest-shuffle-test.py	/^SHUFFLED_SHARDED_TESTS = []$/;"	v
STACK_TRACE_TEMPLATE	test/googletest-json-output-unittest.py	/^  STACK_TRACE_TEMPLATE = ''$/;"	v
STACK_TRACE_TEMPLATE	test/googletest-json-output-unittest.py	/^  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'$/;"	v
STACK_TRACE_TEMPLATE	test/gtest_xml_output_unittest.py	/^  STACK_TRACE_TEMPLATE = ''$/;"	v
STACK_TRACE_TEMPLATE	test/gtest_xml_output_unittest.py	/^  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'$/;"	v
STREAM_RESULT_TO_FLAG	test/gtest_help_test.py	/^STREAM_RESULT_TO_FLAG = FLAG_PREFIX + 'stream_result_to'$/;"	v
SUCCEED	include/gtest/gtest.h	/^# define SUCCEED(/;"	d
SUFFIXES	Makefile	/^SUFFIXES =$/;"	m
SUPPORTS_DEATH_TESTS	test/googletest-filter-unittest.py	/^SUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess($/;"	v
SUPPORTS_DEATH_TESTS	test/googletest-output-test.py	/^SUPPORTS_DEATH_TESTS = 'DeathTest' in test_list$/;"	v
SUPPORTS_DEATH_TESTS	test/gtest_help_test.py	/^SUPPORTS_DEATH_TESTS = "DeathTest" in gtest_test_utils.Subprocess($/;"	v
SUPPORTS_SEH_EXCEPTIONS	test/googletest-catch-exceptions-test.py	/^SUPPORTS_SEH_EXCEPTIONS = 'ThrowsSehException' in TEST_LIST$/;"	v
SUPPORTS_STACK_TRACES	test/googletest-json-output-unittest.py	/^SUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv$/;"	v
SUPPORTS_STACK_TRACES	test/googletest-output-test.py	/^SUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv$/;"	v
SUPPORTS_STACK_TRACES	test/gtest_xml_output_unittest.py	/^SUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv$/;"	v
SUPPORTS_THREADS	test/googletest-output-test.py	/^SUPPORTS_THREADS = 'ExpectFailureWithThreadsTest' in test_list$/;"	v
SUPPORTS_TYPED_TESTS	test/googletest-json-output-unittest.py	/^SUPPORTS_TYPED_TESTS = 'TypedTest' in gtest_test_utils.Subprocess($/;"	v
SUPPORTS_TYPED_TESTS	test/googletest-output-test.py	/^SUPPORTS_TYPED_TESTS = 'TypedTest' in test_list$/;"	v
SUPPORTS_TYPED_TESTS	test/gtest_xml_output_unittest.py	/^SUPPORTS_TYPED_TESTS = 'TypedTest' in gtest_test_utils.Subprocess($/;"	v
ScopedFakeTestPartResultReporter	include/gtest/gtest-spi.h	/^class GTEST_API_ ScopedFakeTestPartResultReporter$/;"	c	namespace:testing
ScopedFakeTestPartResultReporter	src/gtest.cc	/^ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter($/;"	f	class:testing::ScopedFakeTestPartResultReporter
ScopedFakeTestPartResultReporterTest	test/googletest-output-test_.cc	/^typedef ExpectFailureWithThreadsTest ScopedFakeTestPartResultReporterTest;$/;"	t	file:
ScopedFakeTestPartResultReporterTest	test/gtest_unittest.cc	/^class ScopedFakeTestPartResultReporterTest : public Test {$/;"	c	namespace:__anon40	file:
ScopedFakeTestPartResultReporterWithThreadsTest	test/gtest_unittest.cc	/^class ScopedFakeTestPartResultReporterWithThreadsTest$/;"	c	namespace:__anon40	file:
ScopedPrematureExitFile	src/gtest.cc	/^  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)$/;"	f	class:testing::internal::ScopedPrematureExitFile
ScopedPrematureExitFile	src/gtest.cc	/^class ScopedPrematureExitFile {$/;"	c	namespace:testing::internal	file:
ScopedTrace	include/gtest/gtest.h	/^  ScopedTrace(const char* file, int line, const T& message) {$/;"	f	class:testing::ScopedTrace
ScopedTrace	include/gtest/gtest.h	/^  ScopedTrace(const char* file, int line, const char* message) {$/;"	f	class:testing::ScopedTrace
ScopedTrace	include/gtest/gtest.h	/^  ScopedTrace(const char* file, int line, const std::string& message) {$/;"	f	class:testing::ScopedTrace
ScopedTrace	include/gtest/gtest.h	/^class GTEST_API_ ScopedTrace {$/;"	c	namespace:testing
SehExceptionInConstructorTest	test/googletest-catch-exceptions-test_.cc	/^  SehExceptionInConstructorTest() { RaiseException(42, 0, 0, NULL); }$/;"	f	class:SehExceptionInConstructorTest
SehExceptionInConstructorTest	test/googletest-catch-exceptions-test_.cc	/^class SehExceptionInConstructorTest : public Test {$/;"	c	file:
SehExceptionInDestructorTest	test/googletest-catch-exceptions-test_.cc	/^class SehExceptionInDestructorTest : public Test {$/;"	c	file:
SehExceptionInSetUpTest	test/googletest-catch-exceptions-test_.cc	/^class SehExceptionInSetUpTest : public Test {$/;"	c	file:
SehExceptionInSetUpTestSuiteTest	test/googletest-catch-exceptions-test_.cc	/^class SehExceptionInSetUpTestSuiteTest : public Test {$/;"	c	file:
SehExceptionInTearDownTest	test/googletest-catch-exceptions-test_.cc	/^class SehExceptionInTearDownTest : public Test {$/;"	c	file:
SehExceptionInTearDownTestSuiteTest	test/googletest-catch-exceptions-test_.cc	/^class SehExceptionInTearDownTestSuiteTest : public Test {$/;"	c	file:
Send	scripts/upload.py	/^  def Send(self, request_path, payload=None,$/;"	m	class:AbstractRpcServer
SendLn	src/gtest-internal-inl.h	/^    void SendLn(const std::string& message) { Send(message + "\\n"); }$/;"	f	class:testing::internal::StreamingListener::AbstractSocketWriter
SendLn	src/gtest-internal-inl.h	/^  void SendLn(const std::string& message) { socket_writer_->SendLn(message); }$/;"	f	class:testing::internal::StreamingListener
SeparateInstanceTest	test/googletest-param-test-test.cc	/^  SeparateInstanceTest() : count_(0) {}$/;"	f	class:SeparateInstanceTest
SeparateInstanceTest	test/googletest-param-test-test.cc	/^class SeparateInstanceTest : public TestWithParam<int> {$/;"	c	file:
SequenceTestingListener	test/gtest_unittest.cc	/^  SequenceTestingListener(std::vector<std::string>* vector, const char* id)$/;"	f	class:SequenceTestingListener
SequenceTestingListener	test/gtest_unittest.cc	/^class SequenceTestingListener : public EmptyTestEventListener {$/;"	c	file:
Set	include/gtest/internal/gtest-filepath.h	/^  void Set(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
Set	samples/sample2.cc	/^void MyString::Set(const char* a_c_string) {$/;"	f	class:MyString
SetDefaultResultPrinter	src/gtest.cc	/^void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
SetDefaultResultPrinter	test/gtest_unittest.cc	/^  static void SetDefaultResultPrinter(TestEventListeners* listeners,$/;"	f	class:testing::internal::TestEventListenersAccessor
SetDefaultXmlGenerator	src/gtest.cc	/^void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {$/;"	f	class:testing::TestEventListeners
SetDefaultXmlGenerator	test/gtest_unittest.cc	/^  static void SetDefaultXmlGenerator(TestEventListeners* listeners,$/;"	f	class:testing::internal::TestEventListenersAccessor
SetEnv	test/gtest_unittest.cc	/^static void SetEnv(const char* name, const char* value) {$/;"	f	namespace:__anon40
SetEnvVar	test/googletest-break-on-failure-unittest.py	/^SetEnvVar = gtest_test_utils.SetEnvVar$/;"	v
SetEnvVar	test/googletest-catch-exceptions-test.py	/^SetEnvVar = gtest_test_utils.SetEnvVar$/;"	v
SetEnvVar	test/googletest-color-test.py	/^def SetEnvVar(env_var, value):$/;"	f
SetEnvVar	test/googletest-env-var-test.py	/^def SetEnvVar(env_var, value):$/;"	f
SetEnvVar	test/googletest-filter-unittest.py	/^def SetEnvVar(env_var, value):$/;"	f
SetEnvVar	test/googletest-throw-on-failure-test.py	/^def SetEnvVar(env_var, value):$/;"	f
SetEnvVar	test/gtest_test_utils.py	/^def SetEnvVar(env_var, value):$/;"	f
SetGlobalTestPartResultReporter	src/gtest.cc	/^void UnitTestImpl::SetGlobalTestPartResultReporter($/;"	f	class:testing::internal::UnitTestImpl
SetInjectableArgvs	src/gtest-port.cc	/^void SetInjectableArgvs(const std::vector<std::string>& new_argvs) {$/;"	f	namespace:testing::internal
SetInjectableArgvs	src/gtest-port.cc	/^void SetInjectableArgvs(const std::vector<std::string>* new_argvs) {$/;"	f	namespace:testing::internal
SetParam	include/gtest/gtest.h	/^  static void SetParam(const ParamType* parameter) {$/;"	f	class:testing::WithParamInterface
SetParameters	test/googletest-death-test-test.cc	/^void MockDeathTestFactory::SetParameters(bool create,$/;"	f	class:__anon28::MockDeathTestFactory
SetPthreadFlag	test/googletest-death-test-test.cc	/^void SetPthreadFlag() {$/;"	f	namespace:__anon28
SetSigprofActionAndTimer	test/googletest-death-test-test.cc	/^void SetSigprofActionAndTimer() {$/;"	f	namespace:__anon28
SetTestPartResultReporterForCurrentThread	src/gtest.cc	/^void UnitTestImpl::SetTestPartResultReporterForCurrentThread($/;"	f	class:testing::internal::UnitTestImpl
SetTimeZone	test/gtest_unittest.cc	/^  static void SetTimeZone(const char* time_zone) {$/;"	f	class:__anon40::FormatEpochTimeInMillisAsIso8601Test	file:
SetUp	include/gtest/gtest.h	/^  virtual void SetUp() {}$/;"	f	class:testing::Environment
SetUp	src/gtest.cc	/^void Test::SetUp() {$/;"	f	class:testing::Test
SetUp	test/googletest-catch-exceptions-test_.cc	/^  virtual void SetUp() { RaiseException(42, 0, 0, NULL); }$/;"	f	class:SehExceptionInSetUpTest
SetUp	test/gtest_unittest.cc	/^  virtual void SetUp() {$/;"	f	class:testing::FlagfileTest
SetUpEnvironment	src/gtest.cc	/^static void SetUpEnvironment(Environment* env) { env->SetUp(); }$/;"	f	namespace:testing::internal
SetUpExecuted	test/googletest-param-test-test.cc	/^  void SetUpExecuted() { set_up_count_++; }$/;"	f	class:TestGenerationEnvironment
SetUpTestCase	include/gtest/gtest.h	/^  static void SetUpTestCase() {}$/;"	f	class:testing::Test
SetUpTestCase	test/gtest_unittest.cc	/^  static void SetUpTestCase() {$/;"	f	class:testing::SetUpTestCaseTest
SetUpTestCaseTest	test/gtest_unittest.cc	/^class SetUpTestCaseTest : public Test {$/;"	c	namespace:testing	file:
SetUpTestSuite	include/gtest/gtest.h	/^  static void SetUpTestSuite() {}$/;"	f	class:testing::Test
SetUpTestSuite	test/googletest-catch-exceptions-test_.cc	/^  static void SetUpTestSuite() { RaiseException(42, 0, 0, NULL); }$/;"	f	class:SehExceptionInSetUpTestSuiteTest
SetUpTestSuite	test/googletest-catch-exceptions-test_.cc	/^  static void SetUpTestSuite() {$/;"	f	class:CxxExceptionInSetUpTestSuiteTest
SetUpTestSuite	test/googletest-death-test-test.cc	/^  static void SetUpTestSuite() {$/;"	f	class:__anon28::MacroLogicDeathTest
SetUpTestSuite	test/googletest-listener-test.cc	/^  static void SetUpTestSuite() {$/;"	f	class:testing::internal::ListenerTest
SetUpTestSuite	test/googletest-output-test_.cc	/^  static void SetUpTestSuite() { printf("DynamicFixture::SetUpTestSuite\\n"); }$/;"	f	class:DynamicFixture
SetUpTestSuite	test/googletest-param-test-test.cc	/^  static void SetUpTestSuite() {$/;"	f	class:TestGenerationTest
SetUpTestSuite	test/gtest-typed-test_test.cc	/^  static void SetUpTestSuite() {$/;"	f	class:CommonTest
SetUpTestSuite	test/gtest_unittest.cc	/^  static void SetUpTestSuite() {$/;"	f	class:AdHocTestResultTest
SetUpTestSuite	test/gtest_unittest.cc	/^  static void SetUpTestSuite() {$/;"	f	class:__anon40::DisabledTestsTest
SetUpTestSuite	test/gtest_unittest.cc	/^  static void SetUpTestSuite() {$/;"	f	class:__anon40::GTestFlagSaverTest
SetUpTestSuite	test/gtest_unittest.cc	/^  static void SetUpTestSuite() {$/;"	f	class:__anon40::UnitTestRecordPropertyTest
SetUpTestSuite	test/gtest_unittest.cc	/^  static void SetUpTestSuite() {$/;"	f	class:testing::CurrentTestInfoTest
SetUpTestSuite	test/gtest_unittest.cc	/^  static void SetUpTestSuite() {$/;"	f	class:testing::SetUpTestSuiteTest
SetUpTestSuite	test/gtest_xml_output_unittest_.cc	/^  static void SetUpTestSuite() { RecordProperty("SetUpTestSuite", "yes"); }$/;"	f	class:PropertyRecordingTest
SetUpTestSuiteTest	test/gtest_unittest.cc	/^class SetUpTestSuiteTest : public Test {$/;"	c	namespace:testing	file:
SetValue	include/gtest/gtest.h	/^  void SetValue(const std::string& new_value) {$/;"	f	class:testing::TestProperty
Setup	include/gtest/gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return nullptr; }$/;"	f	class:testing::Environment
Setup	include/gtest/gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return nullptr; }$/;"	f	class:testing::Test
SetupEnvironment	test/gtest_skip_in_environment_setup_test.cc	/^class SetupEnvironment : public testing::Environment {$/;"	c	file:
Setup_should_be_spelled_SetUp	include/gtest/gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Environment
Setup_should_be_spelled_SetUp	include/gtest/gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Test
ShouldRunTest	include/gtest/gtest.h	/^  static bool ShouldRunTest(const TestInfo* test_info) {$/;"	f	class:testing::TestSuite
ShouldRunTestOnShard	src/gtest.cc	/^bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {$/;"	f	namespace:testing::internal
ShouldRunTestSuite	src/gtest.cc	/^static bool ShouldRunTestSuite(const TestSuite* test_suite) {$/;"	f	namespace:testing::internal
ShouldShard	src/gtest.cc	/^bool ShouldShard(const char* total_shards_env,$/;"	f	namespace:testing::internal
ShouldShardDeathTest	test/gtest_unittest.cc	/^typedef ShouldShardTest ShouldShardDeathTest;$/;"	t	namespace:__anon40	file:
ShouldShardTest	test/gtest_unittest.cc	/^class ShouldShardTest : public testing::Test {$/;"	c	namespace:__anon40	file:
ShouldUseColor	src/gtest.cc	/^bool ShouldUseColor(bool stdout_is_tty) {$/;"	f	namespace:testing::internal
ShowWideCString	src/gtest.cc	/^std::string String::ShowWideCString(const wchar_t * wide_c_str) {$/;"	f	class:testing::internal::String
Shuffle	src/gtest-internal-inl.h	/^inline void Shuffle(internal::Random* random, std::vector<E>* v) {$/;"	f	namespace:testing::internal
Shuffle	test/gtest_unittest.cc	/^  static Flags Shuffle(bool shuffle) {$/;"	f	struct:testing::Flags
ShuffleFlag	test/googletest-shuffle-test.py	/^def ShuffleFlag():$/;"	f
ShuffleRange	src/gtest-internal-inl.h	/^void ShuffleRange(internal::Random* random, int begin, int end,$/;"	f	namespace:testing::internal
ShuffleTests	src/gtest.cc	/^void TestSuite::ShuffleTests(internal::Random* random) {$/;"	f	class:testing::TestSuite
ShuffleTests	src/gtest.cc	/^void UnitTestImpl::ShuffleTests() {$/;"	f	class:testing::internal::UnitTestImpl
SignAndMagnitudeToBiased	include/gtest/internal/gtest-internal.h	/^  static Bits SignAndMagnitudeToBiased(const Bits &sam) {$/;"	f	class:testing::internal::FloatingPoint
SigprofAction	test/googletest-death-test-test.cc	/^void SigprofAction(int, siginfo_t*, void*) { \/* no op *\/ }$/;"	f	namespace:__anon28
SingleEvaluationTest	test/gtest_unittest.cc	/^  SingleEvaluationTest() {$/;"	f	class:__anon40::SingleEvaluationTest
SingleEvaluationTest	test/gtest_unittest.cc	/^class SingleEvaluationTest : public Test {$/;"	c	namespace:__anon40	file:
SingleFailureChecker	include/gtest/gtest-spi.h	/^class GTEST_API_ SingleFailureChecker {$/;"	c	namespace:testing::internal
SingleFailureChecker	src/gtest.cc	/^SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,$/;"	f	class:testing::internal::SingleFailureChecker
Sink	include/gtest/internal/gtest-internal.h	/^  struct Sink {};$/;"	s	class:testing::internal::IgnoredValue
Size	samples/sample3-inl.h	/^  size_t Size() const { return size_; }$/;"	f	class:Queue
Skip	scripts/pump.py	/^def Skip(lines, pos, regex):$/;"	f
SkipComma	include/gtest/internal/gtest-internal.h	/^inline const char* SkipComma(const char* str) {$/;"	f	namespace:testing::internal
SkipEntireEnvironmentTest	test/gtest_skip_environment_check_output_test.py	/^class SkipEntireEnvironmentTest(gtest_test_utils.TestCase):$/;"	c
SkipPrefix	src/gtest.cc	/^bool SkipPrefix(const char* prefix, const char** pstr) {$/;"	f	namespace:testing::internal
SkipSpaces	src/gtest-typed-test.cc	/^static const char* SkipSpaces(const char* str) {$/;"	f	namespace:testing::internal
SkipUntil	scripts/pump.py	/^def SkipUntil(lines, pos, regex, token_type):$/;"	f
Skipped	src/gtest.cc	/^bool TestResult::Skipped() const {$/;"	f	class:testing::TestResult
SkippedTest	test/gtest_xml_output_unittest_.cc	/^class SkippedTest : public Test {$/;"	c	file:
SleepMilliseconds	include/gtest/internal/gtest-port.h	/^inline void SleepMilliseconds(int n) {$/;"	f	namespace:testing::internal
SleepMilliseconds	src/gtest-port.cc	/^void SleepMilliseconds(int n) {$/;"	f	namespace:testing::internal
SocketWriter	src/gtest-internal-inl.h	/^    SocketWriter(const std::string& host, const std::string& port)$/;"	f	class:testing::internal::StreamingListener::SocketWriter
SocketWriter	src/gtest-internal-inl.h	/^  class SocketWriter : public AbstractSocketWriter {$/;"	c	class:testing::internal::StreamingListener
SpawnThreadNotifications	test/googletest-output-test_.cc	/^  SpawnThreadNotifications() {}$/;"	f	struct:SpawnThreadNotifications
SpawnThreadNotifications	test/googletest-output-test_.cc	/^struct SpawnThreadNotifications {$/;"	s	file:
SplitEscapedString	src/gtest.cc	/^std::vector<std::string> SplitEscapedString(const std::string& str) {$/;"	f	namespace:testing::internal::__anon13
SplitIntoTestNames	src/gtest-typed-test.cc	/^static std::vector<std::string> SplitIntoTestNames(const char* src) {$/;"	f	namespace:testing::internal
SplitPatch	scripts/upload.py	/^def SplitPatch(data):$/;"	f
SplitString	src/gtest.cc	/^void SplitString(const ::std::string& str, char delimiter,$/;"	f	namespace:testing::internal
StackGrowsDown	src/gtest-death-test.cc	/^static bool StackGrowsDown() {$/;"	f	namespace:testing::internal
StackLowerThanAddress	src/gtest-death-test.cc	/^static void StackLowerThanAddress(const void* ptr, bool* result) {$/;"	f	namespace:testing::internal
StackTraceDepth	test/gtest_unittest.cc	/^  static Flags StackTraceDepth(Int32 stack_trace_depth) {$/;"	f	struct:testing::Flags
Start	src/gtest-internal-inl.h	/^  void Start() { SendLn("gtest_streaming_protocol_version=1.0"); }$/;"	f	class:testing::internal::StreamingListener
StartWatcherThreadFor	src/gtest-port.cc	/^  static void StartWatcherThreadFor(DWORD thread_id) {$/;"	f	class:testing::internal::ThreadLocalRegistryImpl	file:
StartsWith	scripts/pump.py	/^def StartsWith(lines, pos, string):$/;"	f
Stat	include/gtest/internal/gtest-port.h	/^inline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }$/;"	f	namespace:testing::internal::posix
StatStruct	include/gtest/internal/gtest-port.h	/^typedef struct _stat StatStruct;$/;"	t	namespace:testing::internal::posix	typeref:struct:testing::internal::posix::_stat
StatefulNamingFunctor	test/googletest-param-test-test.cc	/^  StatefulNamingFunctor() : sum(0) {}$/;"	f	struct:StatefulNamingFunctor
StatefulNamingFunctor	test/googletest-param-test-test.cc	/^struct StatefulNamingFunctor {$/;"	s	file:
StatefulNamingTest	test/googletest-param-test-test.cc	/^  StatefulNamingTest() : sum_(0) {}$/;"	f	class:StatefulNamingTest
StatefulNamingTest	test/googletest-param-test-test.cc	/^class StatefulNamingTest : public ::testing::TestWithParam<int> {$/;"	c	file:
StaticAssertTypeEqTestHelper	test/gtest_unittest.cc	/^  StaticAssertTypeEqTestHelper() { StaticAssertTypeEq<bool, T>(); }$/;"	f	class:StaticAssertTypeEqTestHelper
StaticAssertTypeEqTestHelper	test/gtest_unittest.cc	/^class StaticAssertTypeEqTestHelper {$/;"	c	file:
StaticConstructorSelector	include/gtest/internal/gtest-port.h	/^  enum StaticConstructorSelector { kStaticMutex = 0 };$/;"	g	class:testing::internal::Mutex
StaticMemberFunction	test/googletest-death-test-test.cc	/^  static void StaticMemberFunction() { DieInside("StaticMemberFunction"); }$/;"	f	class:__anon28::TestForDeathTest
StatusUpdate	scripts/upload.py	/^def StatusUpdate(msg):$/;"	f
StrCaseCmp	include/gtest/internal/gtest-port.h	/^inline int StrCaseCmp(const char* s1, const char* s2) {$/;"	f	namespace:testing::internal::posix
StrDup	include/gtest/internal/gtest-port.h	/^inline char* StrDup(const char* src) { return _strdup(src); }$/;"	f	namespace:testing::internal::posix
StrDup	include/gtest/internal/gtest-port.h	/^inline char* StrDup(const char* src) { return strdup(src); }$/;"	f	namespace:testing::internal::posix
StrError	include/gtest/internal/gtest-port.h	/^inline const char* StrError(int errnum) { return strerror(errnum); }$/;"	f	namespace:testing::internal::posix
StrNCpy	include/gtest/internal/gtest-port.h	/^inline const char* StrNCpy(char* dest, const char* src, size_t n) {$/;"	f	namespace:testing::internal::posix
StreamMatchResultListener	include/gtest/gtest-matchers.h	/^  explicit StreamMatchResultListener(::std::ostream* os)$/;"	f	class:testing::internal::StreamMatchResultListener
StreamMatchResultListener	include/gtest/gtest-matchers.h	/^class StreamMatchResultListener : public MatchResultListener {$/;"	c	namespace:testing::internal
StreamResultTo	test/gtest_unittest.cc	/^  static Flags StreamResultTo(const char* stream_result_to) {$/;"	f	struct:testing::Flags
StreamWideCharsToMessage	src/gtest.cc	/^static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,$/;"	f	namespace:testing::internal
StreamableInGlobal	test/googletest-printers-test.cc	/^class StreamableInGlobal {$/;"	c	file:
StreamableTemplateInFoo	test/googletest-printers-test.cc	/^  StreamableTemplateInFoo() : value_() {}$/;"	f	class:foo::StreamableTemplateInFoo
StreamableTemplateInFoo	test/googletest-printers-test.cc	/^class StreamableTemplateInFoo {$/;"	c	namespace:foo	file:
StreamableToString	include/gtest/gtest-message.h	/^std::string StreamableToString(const T& streamable) {$/;"	f	namespace:testing::internal
StreamingListener	src/gtest-internal-inl.h	/^  StreamingListener(const std::string& host, const std::string& port)$/;"	f	class:testing::internal::StreamingListener
StreamingListener	src/gtest-internal-inl.h	/^  explicit StreamingListener(AbstractSocketWriter* socket_writer)$/;"	f	class:testing::internal::StreamingListener
StreamingListener	src/gtest-internal-inl.h	/^class StreamingListener : public EmptyTestEventListener {$/;"	c	namespace:testing::internal
StreamingListenerTest	test/gtest_unittest.cc	/^  StreamingListenerTest()$/;"	f	class:testing::internal::StreamingListenerTest
StreamingListenerTest	test/gtest_unittest.cc	/^class StreamingListenerTest : public Test {$/;"	c	namespace:testing::internal	file:
String	include/gtest/internal/gtest-string.h	/^class GTEST_API_ String {$/;"	c	namespace:testing::internal
StringFromGTestEnv	src/gtest-port.cc	/^const char* StringFromGTestEnv(const char* flag, const char* default_value) {$/;"	f	namespace:testing::internal
StringParamTestSuffix	test/googletest-param-test-invalid-name2-test_.cc	/^std::string StringParamTestSuffix($/;"	f	namespace:__anon39
StringStreamToString	src/gtest.cc	/^std::string StringStreamToString(::std::stringstream* ss) {$/;"	f	namespace:testing::internal
StringTypes	test/googletest-port-test.cc	/^typedef testing::Types< ::std::string, const char*> StringTypes;$/;"	t	namespace:testing::internal	file:
Strings	include/gtest/gtest-printers.h	/^typedef ::std::vector< ::std::string> Strings;$/;"	t	namespace:testing::internal
StripMetaComments	scripts/pump.py	/^def StripMetaComments(str):$/;"	f
StripTrailingSpaces	include/gtest/internal/gtest-port.h	/^inline std::string StripTrailingSpaces(std::string str) {$/;"	f	namespace:testing::internal
SubClassOfTest	test/gtest_unittest.cc	/^class SubClassOfTest : public Test {};$/;"	c	namespace:__anon40	file:
SubString	scripts/pump.py	/^def SubString(lines, start, end):$/;"	f
SubWithTrace	test/googletest-output-test_.cc	/^void SubWithTrace(int n) {$/;"	f
SubWithoutTrace	test/googletest-output-test_.cc	/^void SubWithoutTrace(int n) {$/;"	f
Subprocess	test/gtest_test_utils.py	/^class Subprocess:$/;"	c
Subroutine	test/gtest_sole_header_test.cc	/^void Subroutine() {$/;"	f	namespace:__anon44
SubversionVCS	scripts/upload.py	/^class SubversionVCS(VersionControlSystem):$/;"	c
Succeeds	test/gtest_unittest.cc	/^  void Succeeds() {}$/;"	f	class:__anon40::NoFatalFailureTest
SuccessfulTest	test/gtest_xml_output_unittest_.cc	/^class SuccessfulTest : public Test {$/;"	c	file:
SuiteApiResolver	include/gtest/internal/gtest-internal.h	/^struct SuiteApiResolver : T {$/;"	s	namespace:testing::internal
SumIsEven2	test/gtest_unittest.cc	/^bool SumIsEven2(int n1, int n2) {$/;"	f	namespace:__anon40
SumIsEven3Functor	test/gtest_unittest.cc	/^struct SumIsEven3Functor {$/;"	s	namespace:__anon40	file:
SumOverTestSuiteList	src/gtest.cc	/^static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,$/;"	f	namespace:testing::internal
SuppressEventForwarding	src/gtest.cc	/^void TestEventListeners::SuppressEventForwarding() {$/;"	f	class:testing::TestEventListeners
SuppressEventForwarding	test/gtest_unittest.cc	/^  static void SuppressEventForwarding(TestEventListeners* listeners) {$/;"	f	class:testing::internal::TestEventListenersAccessor
SuppressTestEventsIfInSubprocess	src/gtest.cc	/^void UnitTestImpl::SuppressTestEventsIfInSubprocess() {$/;"	f	class:testing::internal::UnitTestImpl
T	include/gtest/gtest-printers.h	/^  static void Print(const T (&a)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalPrinter
T	include/gtest/gtest-printers.h	/^  static void Print(const T (&value)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalTersePrinter
T	include/gtest/internal/gtest-internal.h	/^inline bool ArrayEq(const T(&lhs)[N], const U(&rhs)[N]) {$/;"	m	namespace:testing::internal
T	include/gtest/internal/gtest-internal.h	/^inline void CopyArray(const T(&from)[N], U(*to)[N]) {$/;"	m	namespace:testing::internal
TEN_TESTS_	test/gtest_test_macro_stack_footprint_test.cc	/^#define TEN_TESTS_(/;"	d	file:
TEST	include/gtest/gtest.h	/^#define TEST(/;"	d
TEST	samples/sample10_unittest.cc	/^TEST(ListenersTest, DoesNotLeak) {$/;"	f	namespace:__anon4
TEST	samples/sample10_unittest.cc	/^TEST(ListenersTest, LeaksWater) {$/;"	f	namespace:__anon4
TEST	samples/sample1_unittest.cc	/^TEST(FactorialTest, Negative) {$/;"	f	namespace:__anon9
TEST	samples/sample1_unittest.cc	/^TEST(FactorialTest, Positive) {$/;"	f	namespace:__anon9
TEST	samples/sample1_unittest.cc	/^TEST(FactorialTest, Zero) {$/;"	f	namespace:__anon9
TEST	samples/sample1_unittest.cc	/^TEST(IsPrimeTest, Negative) {$/;"	f	namespace:__anon9
TEST	samples/sample1_unittest.cc	/^TEST(IsPrimeTest, Positive) {$/;"	f	namespace:__anon9
TEST	samples/sample1_unittest.cc	/^TEST(IsPrimeTest, Trivial) {$/;"	f	namespace:__anon9
TEST	samples/sample2_unittest.cc	/^TEST(MyString, ConstructorFromCString) {$/;"	f	namespace:__anon6
TEST	samples/sample2_unittest.cc	/^TEST(MyString, CopyConstructor) {$/;"	f	namespace:__anon6
TEST	samples/sample2_unittest.cc	/^TEST(MyString, DefaultConstructor) {$/;"	f	namespace:__anon6
TEST	samples/sample2_unittest.cc	/^TEST(MyString, Set) {$/;"	f	namespace:__anon6
TEST	samples/sample4_unittest.cc	/^TEST(Counter, Increment) {$/;"	f	namespace:__anon8
TEST	samples/sample9_unittest.cc	/^TEST(CustomOutputTest, Fails) {$/;"	f	namespace:__anon3
TEST	samples/sample9_unittest.cc	/^TEST(CustomOutputTest, PrintsMessage) {$/;"	f	namespace:__anon3
TEST	samples/sample9_unittest.cc	/^TEST(CustomOutputTest, Succeeds) {$/;"	f	namespace:__anon3
TEST	test/googletest-break-on-failure-unittest_.cc	/^TEST(Foo, Bar) {$/;"	f	namespace:__anon33
TEST	test/googletest-catch-exceptions-test_.cc	/^TEST(CxxExceptionTest, ThrowsNonStdCxxException) {$/;"	f
TEST	test/googletest-catch-exceptions-test_.cc	/^TEST(SehExceptionTest, ThrowsSehException) {$/;"	f
TEST	test/googletest-color-test_.cc	/^TEST(GTestColorTest, Dummy) {$/;"	f
TEST	test/googletest-death-test-test.cc	/^TEST(AutoHandleTest, AutoHandleWorks) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(ConditionalDeathMacrosDeathTest, ExpectsDeathWhenDeathTestsAvailable) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(ConditionalDeathMacrosSyntaxDeathTest, SingleStatement) {$/;"	f	namespace:__anon29
TEST	test/googletest-death-test-test.cc	/^TEST(ConditionalDeathMacrosSyntaxDeathTest, SwitchStatement) {$/;"	f	namespace:__anon29
TEST	test/googletest-death-test-test.cc	/^TEST(EnvironmentTest, HandleFitsIntoSizeT) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(ExitStatusPredicateTest, ExitedWithCode) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(ExitStatusPredicateTest, KilledBySignal) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(GetLastErrnoDescription, GetLastErrnoDescriptionWorks) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(InDeathTestChildDeathTest, ReportsDeathTestCorrectlyInFastStyle) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(InDeathTestChildDeathTest, ReportsDeathTestCorrectlyInThreadSafeStyle) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(MatcherDeathTest, DoesNotBreakBareRegexMatching) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(MatcherDeathTest, MonomorphicMatcherDoesNotMatch) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(MatcherDeathTest, MonomorphicMatcherMatches) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(MatcherDeathTest, PolymorphicMatcherDoesNotMatch) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(MatcherDeathTest, PolymorphicMatcherMatches) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(NotADeathTest, Test) {$/;"	f	namespace:__anon29
TEST	test/googletest-death-test-test.cc	/^TEST(ParseNaturalNumberTest, AcceptsTypeLimits) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(ParseNaturalNumberTest, AcceptsValidNumbers) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(ParseNaturalNumberTest, RejectsInvalidFormat) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(ParseNaturalNumberTest, RejectsOverflownNumbers) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(ParseNaturalNumberTest, WorksForShorterIntegers) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(PopUpDeathTest, DoesNotShowPopUpOnAbort) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(StreamingAssertionsDeathTest, DeathTest) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test-test.cc	/^TEST(SuccessRegistrationDeathTest, NoSuccessPart) {$/;"	f	namespace:__anon28
TEST	test/googletest-death-test_ex_test.cc	/^TEST(CxxExceptionDeathTest, ExceptionIsFailure) {$/;"	f
TEST	test/googletest-death-test_ex_test.cc	/^TEST(CxxExceptionDeathTest, PrintsMessageForStdExceptions) {$/;"	f
TEST	test/googletest-death-test_ex_test.cc	/^TEST(SehExceptionDeasTest, CatchExceptionsDoesNotInterfere) {$/;"	f
TEST	test/googletest-env-var-test_.cc	/^TEST(GTestEnvVarTest, Dummy) {$/;"	f	namespace:testing
TEST	test/googletest-filepath-test.cc	/^TEST(AssignmentOperatorTest, ConstAssignedToNonConst) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(AssignmentOperatorTest, DefaultAssignedToNonDefault) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(AssignmentOperatorTest, NonDefaultAssignedToDefault) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(ConcatPathsTest, BothPathBeingEmpty) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(ConcatPathsTest, Path1BeingEmpty) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(ConcatPathsTest, Path1ContainsPathSep) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(ConcatPathsTest, Path2BeingEmpty) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(ConcatPathsTest, Path2ContainsPathSep) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(ConcatPathsTest, Path2EndsWithPathSep) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(ConcatPathsTest, WorksWhenDirDoesNotEndWithPathSep) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(ConcatPathsTest, WorksWhenPath1EndsWithPathSep) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(DirectoryTest, CurrentDirectoryExists) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(DirectoryTest, EmptyPathDirectoryDoesNotExist) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(DirectoryTest, RootDirectoryExists) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(DirectoryTest, RootOfWrongDriveDoesNotExists) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(FilePathTest, CharAndCopyConstructors) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(FilePathTest, DefaultConstructor) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(FilePathTest, IsAbsolutePath) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(FilePathTest, IsDirectory) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(FilePathTest, IsRootDirectory) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(FilePathTest, RemoveExtension) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(FilePathTest, RemoveExtensionWhenThereIsNoExtension) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(FilePathTest, Set) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(FilePathTest, StringConstructor) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(FilePathTest, ToString) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(IsEmptyTest, ReturnsFalseForNonEmptyPath) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(IsEmptyTest, ReturnsTrueForEmptyPath) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(MakeFileNameTest, GenerateFileNameNumberGtZero) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(MakeFileNameTest, GenerateFileNameWithSlashNumberGtZero) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(MakeFileNameTest, GenerateFileNameWithSlashNumberIsZero) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(MakeFileNameTest, GenerateWhenNumberIsNotZeroAndDirIsEmpty) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(MakeFileNameTest, GenerateWhenNumberIsZero) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(MakeFileNameTest, GenerateWhenNumberIsZeroAndDirIsEmpty) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(NoDirectoryCreationTest, CreateNoDirectoriesForDefaultXmlFile) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(NormalizeTest, MixAlternateSeparatorAtStringEnd) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(NormalizeTest, MultipleConsecutiveSepaparatorsAtStringEnd) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(NormalizeTest, MultipleConsecutiveSepaparatorsAtStringStart) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(NormalizeTest, MultipleConsecutiveSepaparatorsInMidstring) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveDirectoryNameTest, ButNoDirectory) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveDirectoryNameTest, RootFileShouldGiveFileName) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveDirectoryNameTest, RootFileShouldGiveFileNameForAlternateSeparator) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveDirectoryNameTest, ShouldAlsoGiveFileName) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveDirectoryNameTest, ShouldAlsoGiveFileNameForAlternateSeparator) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveDirectoryNameTest, ShouldGiveFileName) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveDirectoryNameTest, ShouldGiveFileNameForAlternateSeparator) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveDirectoryNameTest, WhenEmptyName) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveDirectoryNameTest, WhereThereIsNoFileName) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveDirectoryNameTest, WhereThereIsNoFileNameForAlternateSeparator) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveFileNameTest, ButNoFile) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveFileNameTest, ButNoFileForAlternateSeparator) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveFileNameTest, EmptyName) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveFileNameTest, GivesDirAndSubDirName) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveFileNameTest, GivesDirAndSubDirNameForAlternateSeparator) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveFileNameTest, GivesDirName) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveFileNameTest, GivesDirNameForAlternateSeparator) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveFileNameTest, GivesRootDir) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveFileNameTest, GivesRootDirForAlternateSeparator) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveTrailingPathSeparatorTest, EmptyString) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveTrailingPathSeparatorTest, FileNoSlashString) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveTrailingPathSeparatorTest, ShouldRemoveLastSeparator) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveTrailingPathSeparatorTest, ShouldRemoveTrailingSeparator) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filepath-test.cc	/^TEST(RemoveTrailingPathSeparatorTest, ShouldReturnUnmodified) {$/;"	f	namespace:testing::internal::__anon36
TEST	test/googletest-filter-unittest_.cc	/^TEST(BarTest, DISABLED_TestFive) {$/;"	f	namespace:__anon27
TEST	test/googletest-filter-unittest_.cc	/^TEST(BarTest, DISABLED_TestFour) {$/;"	f	namespace:__anon27
TEST	test/googletest-filter-unittest_.cc	/^TEST(BarTest, TestOne) {$/;"	f	namespace:__anon27
TEST	test/googletest-filter-unittest_.cc	/^TEST(BarTest, TestThree) {$/;"	f	namespace:__anon27
TEST	test/googletest-filter-unittest_.cc	/^TEST(BarTest, TestTwo) {$/;"	f	namespace:__anon27
TEST	test/googletest-filter-unittest_.cc	/^TEST(BazTest, DISABLED_TestC) {$/;"	f	namespace:__anon27
TEST	test/googletest-filter-unittest_.cc	/^TEST(BazTest, TestA) {$/;"	f	namespace:__anon27
TEST	test/googletest-filter-unittest_.cc	/^TEST(BazTest, TestB) {$/;"	f	namespace:__anon27
TEST	test/googletest-filter-unittest_.cc	/^TEST(BazTest, TestOne) {$/;"	f	namespace:__anon27
TEST	test/googletest-filter-unittest_.cc	/^TEST(DISABLED_FoobarTest, DISABLED_Test2) {$/;"	f	namespace:__anon27
TEST	test/googletest-filter-unittest_.cc	/^TEST(DISABLED_FoobarTest, Test1) {$/;"	f	namespace:__anon27
TEST	test/googletest-filter-unittest_.cc	/^TEST(DISABLED_FoobarbazTest, TestA) {$/;"	f	namespace:__anon27
TEST	test/googletest-filter-unittest_.cc	/^TEST(HasDeathTest, Test1) {$/;"	f	namespace:__anon27
TEST	test/googletest-filter-unittest_.cc	/^TEST(HasDeathTest, Test2) {$/;"	f	namespace:__anon27
TEST	test/googletest-list-tests-unittest_.cc	/^TEST(Abc, Def) {$/;"	f
TEST	test/googletest-list-tests-unittest_.cc	/^TEST(Abc, Xyz) {$/;"	f
TEST	test/googletest-list-tests-unittest_.cc	/^TEST(Foo, Bar1) {$/;"	f
TEST	test/googletest-list-tests-unittest_.cc	/^TEST(Foo, Bar2) {$/;"	f
TEST	test/googletest-list-tests-unittest_.cc	/^TEST(Foo, DISABLED_Bar3) {$/;"	f
TEST	test/googletest-list-tests-unittest_.cc	/^TEST(FooBar, Baz) {$/;"	f
TEST	test/googletest-list-tests-unittest_.cc	/^TEST(FooDeathTest, Test1) {$/;"	f
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, ConstructsFromCString) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, CopyConstructor) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, DefaultConstructor) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, DoesNotTakeUpMuchStackSpace) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, GetString) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, StreamsBasicIoManip) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, StreamsCString) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, StreamsDouble) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, StreamsFloat) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, StreamsInt) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, StreamsNULChar) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, StreamsNullCString) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, StreamsNullPointer) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, StreamsPointer) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, StreamsString) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, StreamsStringWithEmbeddedNUL) {$/;"	f	namespace:__anon23
TEST	test/googletest-message-test.cc	/^TEST(MessageTest, StreamsToOStream) {$/;"	f	namespace:__anon23
TEST	test/googletest-options-test.cc	/^TEST(OutputFileHelpersTest, GetCurrentExecutableName) {$/;"	f	namespace:testing::internal::__anon45
TEST	test/googletest-options-test.cc	/^TEST(XmlOutputTest, GetOutputFileDefault) {$/;"	f	namespace:testing::internal::__anon45
TEST	test/googletest-options-test.cc	/^TEST(XmlOutputTest, GetOutputFileFromDirectoryPath) {$/;"	f	namespace:testing::internal::__anon45
TEST	test/googletest-options-test.cc	/^TEST(XmlOutputTest, GetOutputFileSingleFile) {$/;"	f	namespace:testing::internal::__anon45
TEST	test/googletest-options-test.cc	/^TEST(XmlOutputTest, GetOutputFormat) {$/;"	f	namespace:testing::internal::__anon45
TEST	test/googletest-options-test.cc	/^TEST(XmlOutputTest, GetOutputFormatDefault) {$/;"	f	namespace:testing::internal::__anon45
TEST	test/googletest-output-test_.cc	/^TEST(ADeathTest, ShouldRunFirst) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(AddFailureAtTest, MessageContainsSpecifiedFileAndLineNumber) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(DisabledTestsWarningTest,$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectFatalFailureTest, CanReferenceGlobalVariables) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectFatalFailureTest, CanReferenceLocalStaticVariables) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectFatalFailureTest, FailsWhenStatementReturns) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectFatalFailureTest, FailsWhenStatementThrows) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectFatalFailureTest, FailsWhenThereAreTwoFatalFailures) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectFatalFailureTest, FailsWhenThereIsNoFatalFailure) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectFatalFailureTest, FailsWhenThereIsOneNonfatalFailure) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectFatalFailureTest, SucceedsWhenThereIsOneFatalFailure) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectNonfatalFailureTest, CanReferenceGlobalVariables) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectNonfatalFailureTest, CanReferenceLocalVariables) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectNonfatalFailureTest, FailsWhenStatementReturns) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectNonfatalFailureTest, FailsWhenStatementThrows) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectNonfatalFailureTest, FailsWhenThereAreTwoNonfatalFailures) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectNonfatalFailureTest, FailsWhenThereIsNoNonfatalFailure) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectNonfatalFailureTest, FailsWhenThereIsOneFatalFailure) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ExpectNonfatalFailureTest, SucceedsWhenThereIsOneNonfatalFailure) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(FatalFailureTest, FatalFailureInNestedSubroutine) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(FatalFailureTest, FatalFailureInSubroutine) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(FatalFailureTest, NonfatalFailureInSubroutine) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(GtestFailAtTest, MessageContainsSpecifiedFileAndLineNumber) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(LoggingTest, InterleavingLoggingAndAssertions) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(NonfatalFailureTest, DiffForLongStrings) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(NonfatalFailureTest, EscapesStringOperands) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(PassingTest, PassingTest1) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(PassingTest, PassingTest2) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(SCOPED_TRACETest, AcceptedValues) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(SCOPED_TRACETest, CanBeNested) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(SCOPED_TRACETest, CanBeRepeated) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(SCOPED_TRACETest, ObeysScopes) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(SCOPED_TRACETest, WorksConcurrently) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(SCOPED_TRACETest, WorksInLoop) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(SCOPED_TRACETest, WorksInSubroutine) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(ScopedTraceTest, WithExplicitFileAndLine) {$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(TEST_F_before_TEST_in_same_test_case, DefinedUsingTESTAndShouldFail) {}$/;"	f
TEST	test/googletest-output-test_.cc	/^TEST(TEST_before_TEST_F_in_same_test_case, DefinedUsingTEST) {}$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(BoolTest, BoolWorks) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(CombineTest, CombineWithFirstParameterEmptyRange) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(CombineTest, CombineWithFirstParameterSingleValue) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(CombineTest, CombineWithMaxNumberOfParameters) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(CombineTest, CombineWithSecondParameterEmptyRange) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(CombineTest, CombineWithSecondParameterSingleValue) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(CombineTest, CombineWithThreeParameters) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(CombineTest, CombineWithTwoParameters) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(CombineTest, NonDefaultConstructAssign) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(CustomNamingTest, CheckNameRegistry) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(IteratorTest, ParamIteratorConformsToForwardIteratorConcept) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(ParamGeneratorTest, AssignmentWorks) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(RangeTest, IntRangeEmpty) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(RangeTest, IntRangeSingleValue) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(RangeTest, IntRangeWithCustomStep) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(RangeTest, IntRangeWithCustomStepOverUpperBound) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(RangeTest, IntRangeWithDefaultStep) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(RangeTest, WorksWithACustomType) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(RangeTest, WorksWithACustomTypeWithDifferentIncrementType) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(ValuesInTest, ValuesInArray) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(ValuesInTest, ValuesInConstArray) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(ValuesInTest, ValuesInEmptyIteratorRange) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(ValuesInTest, ValuesInIteratorRange) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(ValuesInTest, ValuesInSingleElementArray) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(ValuesInTest, ValuesInSingleElementIteratorRange) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(ValuesInTest, ValuesInVector) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(ValuesTest, ValuesWithSingleParameter) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(ValuesTest, ValuesWorks) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(ValuesTest, ValuesWorksForMaxLengthList) {$/;"	f
TEST	test/googletest-param-test-test.cc	/^TEST(ValuesTest, ValuesWorksForValuesOfCompatibleTypes) {$/;"	f
TEST	test/googletest-port-test.cc	/^TEST(AtomMatchesCharTest, EscapedPunct) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(AtomMatchesCharTest, EscapedWhiteSpace) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(AtomMatchesCharTest, Escaped_D) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(AtomMatchesCharTest, Escaped_S) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(AtomMatchesCharTest, Escaped_W) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(AtomMatchesCharTest, Escaped_d) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(AtomMatchesCharTest, Escaped_s) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(AtomMatchesCharTest, Escaped_w) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(AtomMatchesCharTest, UnescapedChar) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(AtomMatchesCharTest, UnescapedDot) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(CaptureDeathTest, CannotReenterStdoutCapture) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(CaptureTest, CapturesStderr) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(CaptureTest, CapturesStdout) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(CaptureTest, CapturesStdoutAndStderr) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(FormatCompilerIndependentFileLocationTest, FormatsFileLocation) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(FormatCompilerIndependentFileLocationTest, FormatsUknownFile) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(FormatCompilerIndependentFileLocationTest, FormatsUknownFileAndLine) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(FormatCompilerIndependentFileLocationTest, FormatsUknownLine) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(FormatFileLocationTest, FormatsFileLocation) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(FormatFileLocationTest, FormatsUknownFileAndLine) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(FormatFileLocationTest, FormatsUknownLine) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(FormatFileLocationTest, FormatsUnknownFile) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(GetThreadCountTest, ReturnsCorrectValue) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(GetThreadCountTest, ReturnsZeroWhenUnableToCountThreads) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(GtestCheckDeathTest, DiesWithCorrectOutputOnFailure) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(GtestCheckDeathTest, LivesSilentlyOnSuccess) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(GtestCheckSyntaxTest, BehavesLikeASingleStatement) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(GtestCheckSyntaxTest, WorksWithSwitch) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ImplicitCastTest, CanSelectBetweenConstAndNonConstCasrAppropriately) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ImplicitCastTest, CanUseConstCastOperatorOnConstValues) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ImplicitCastTest, CanUseImplicitConstructor) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ImplicitCastTest, CanUseInheritance) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ImplicitCastTest, CanUseNonConstCastOperator) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ImplicitCastTest, ConvertsPointers) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsAsciiDigitTest, IsFalseForNonDigit) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsAsciiDigitTest, IsTrueForDigit) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsAsciiPunctTest, IsFalseForNonPunct) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsAsciiPunctTest, IsTrueForPunct) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsAsciiWhiteSpaceTest, IsFalseForNonWhiteSpace) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsAsciiWhiteSpaceTest, IsTrueForWhiteSpace) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsAsciiWordCharTest, IsFalseForNonWordChar) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsAsciiWordCharTest, IsTrueForDigit) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsAsciiWordCharTest, IsTrueForLetter) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsAsciiWordCharTest, IsTrueForUnderscore) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsInSetTest, NulCharIsNotInAnySet) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsInSetTest, WorksForNonNulChars) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsRepeatTest, IsFalseForNonRepeatChar) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsRepeatTest, IsTrueForRepeatChar) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsValidEscapeTest, IsFalseForDigit) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsValidEscapeTest, IsFalseForNonPrintable) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsValidEscapeTest, IsFalseForSomeLetter) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsValidEscapeTest, IsFalseForWhiteSpace) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsValidEscapeTest, IsTrueForPunct) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsValidEscapeTest, IsTrueForSomeLetter) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsXDigitTest, ReturnsFalseForNarrowNonAscii) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsXDigitTest, ReturnsFalseForWideNonAscii) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsXDigitTest, WorksForNarrowAscii) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(IsXDigitTest, WorksForWideAscii) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MatchRegexAnywhereTest, ReturnsFalseWhenNoMatch) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MatchRegexAnywhereTest, ReturnsFalseWhenStringIsNull) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MatchRegexAnywhereTest, ReturnsTrueWhenMatchingNonPrefix) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MatchRegexAnywhereTest, ReturnsTrueWhenMatchingPrefix) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MatchRegexAnywhereTest, WorksWhenRegexStartsWithCaret) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MatchRegexAtHeadTest, MatchesSequentially) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MatchRegexAtHeadTest, ReturnsTrueForEmptyRegex) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MatchRegexAtHeadTest, WorksWhenDollarIsInRegex) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MatchRegexAtHeadTest, WorksWhenRegexStartsWithEscapeSequence) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MatchRegexAtHeadTest, WorksWhenRegexStartsWithRepetition) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MatchRegexAtHeadTest,$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MatchRepetitionAndRegexAtHeadTest, WorksForOneOrMany) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MatchRepetitionAndRegexAtHeadTest, WorksForZeroOrMany) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MatchRepetitionAndRegexAtHeadTest, WorksForZeroOrOne) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MutexDeathTest, AssertHeldShouldAssertWhenNotLocked) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MutexTest, AssertHeldShouldNotAssertWhenLocked) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(MutexTest, OnlyOneThreadCanLockAtATime) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(RETest, FullMatchWorks) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(RETest, ImplicitConstructorWorks) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(RETest, PartialMatchWorks) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(RETest, RejectsInvalidRegex) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(RegexEngineSelectionTest, SelectsCorrectRegexEngine) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ThreadLocalTest, DefaultConstructorInitializesToDefaultValues) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ThreadLocalTest, DestroysManagedObjectAtThreadExit) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ThreadLocalTest, DestroysManagedObjectForOwnThreadWhenDying) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ThreadLocalTest, GetAndPointerReturnSameValue) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ThreadLocalTest, ParameterizedConstructorSetsDefault) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ThreadLocalTest, PointerAndConstPointerReturnSameValue) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ThreadLocalTest, SingleParamConstructorInitializesToParam) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ThreadLocalTest, ThreadLocalMutationsAffectOnlyCurrentThread) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ThreadLocalTest, ValueDefaultContructorIsNotRequiredForParamVersion) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ThreadWithParamTest, ConstructorExecutesThreadFunc) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ValidateRegexTest, GeneratesFailureAndReturnsFalseForInvalid) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(ValidateRegexTest, ReturnsTrueForValid) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(WindowsTypesTest, CRITICAL_SECTIONIs_RTL_CRITICAL_SECTION) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(WindowsTypesTest, HANDLEIsVoidStar) {$/;"	f	namespace:testing::internal
TEST	test/googletest-port-test.cc	/^TEST(WindowsTypesTest, _CRITICAL_SECTIONIs_CRITICAL_SECTION) {$/;"	f	namespace:testing::internal
TEST	test/googletest-printers-test.cc	/^  TEST(PrintToStringTest, ContainsNonLatin) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(FormatForComparisonFailureMessageTest, FormatsNonCharArrayAsPointer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(FormatForComparisonFailureMessageTest, WorksForCharArrayVsCharArray) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(FormatForComparisonFailureMessageTest, WorksForCharArrayVsPointer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(FormatForComparisonFailureMessageTest, WorksForCharArrayVsStdString) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(FormatForComparisonFailureMessageTest, WorksForCharPointerVsPointer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(FormatForComparisonFailureMessageTest, WorksForCharPointerVsStdString) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(FormatForComparisonFailureMessageTest, WorksForNonCharPointer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(FormatForComparisonFailureMessageTest, WorksForScalar) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(FormatForComparisonFailureMessageTest, WorksForWCharArrayVsPointer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(FormatForComparisonFailureMessageTest, WorksForWCharArrayVsStdWString) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(FormatForComparisonFailureMessageTest, WorksForWCharArrayVsWCharArray) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(FormatForComparisonFailureMessageTest, WorksForWCharPointerVsPointer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(FormatForComparisonFailureMessageTest, WorksForWCharPointerVsStdWString) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(IsValidUTF8Test, IllFormedUTF8) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintArrayTest, BigArray) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintArrayTest, CharArrayWithNoTerminatingNul) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintArrayTest, ConstArray) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintArrayTest, ConstCharArrayWithTerminatingNul) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintArrayTest, ObjectArray) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintArrayTest, OneDimensionalArray) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintArrayTest, TwoDimensionalArray) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintArrayTest, WCharArrayWithNoTerminatingNul) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintArrayTest, WConstCharArrayWithTerminatingNul) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintBuiltInTypeTest, Bool) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintBuiltInTypeTest, FloatingPoints) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintBuiltInTypeTest, Integer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintBuiltInTypeTest, Size_t) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintBuiltInTypeTest, Wchar_t) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintCStringTest, Const) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintCStringTest, EscapesProperly) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintCStringTest, NonConst) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintCStringTest, Null) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintCharPointerTest, ConstSignedChar) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintCharPointerTest, ConstUnsignedChar) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintCharPointerTest, SignedChar) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintCharPointerTest, UnsignedChar) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintCharTest, PlainChar) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintCharTest, SignedChar) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintCharTest, UnsignedChar) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintClassTest, BiggestIntConvertible) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintEnumTest, AnonymousEnum) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintEnumTest, EnumWithPrintTo) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintEnumTest, EnumWithStreaming) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintEnumTest, EnumWithoutPrinter) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintNullptrT, Basic) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintOneofTest, Basic) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintOptionalTest, Basic) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintPointerTest, MemberFunctionPointer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintPointerTest, MemberVariablePointer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintPointerTest, NonMemberFunctionPointer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintPointerToBuiltInTypeTest, Bool) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintPointerToBuiltInTypeTest, ConstVoid) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintPointerToBuiltInTypeTest, Void) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintPointerToPointerTest, IntPointerPointer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintPrintableTypeTest, InUserNamespace) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintPrintableTypeTest, PointerInUserNamespace) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintPrintableTypeTest, TemplateInUserNamespace) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintReferenceTest, HandlesFunctionPointer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintReferenceTest, HandlesMemberFunctionPointer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintReferenceTest, HandlesMemberVariablePointer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintReferenceTest, PrintsAddressAndValue) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintReferenceWrapper, Printable) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintReferenceWrapper, Unprintable) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStdTupleTest, NestedTuple) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStdTupleTest, VariousSizes) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, ConstIterator) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, EmptyDeque) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, HashMultiMap) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, HashMultiSet) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, HashSet) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, Iterator) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, List) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, LongSequence) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, Map) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, MultiMap) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, MultiSet) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, NestedContainer) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, NonEmptyDeque) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, OneDimensionalNativeArray) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, OneElementHashMap) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, Pair) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, Set) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, SinglyLinkedList) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, TwoDimensionalNativeArray) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStlContainerTest, Vector) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStreamableTypeTest, InGlobalNamespace) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStreamableTypeTest, PathLikeInUserNamespace) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStreamableTypeTest, TemplateTypeInUserNamespace) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStringTest, StringAmbiguousHex) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStringTest, StringInStdNamespace) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStringViewTest, SimpleStringView) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintStringViewTest, UnprintableCharacters) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintToStringTest, EscapesForPointerToConstChar) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintToStringTest, EscapesForPointerToNonConstChar) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintToStringTest, WorksForArray) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintToStringTest, WorksForCharArray) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintToStringTest, WorksForCharArrayWithEmbeddedNul) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintToStringTest, WorksForPointerToConstChar) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintToStringTest, WorksForPointerToNonConstChar) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintToStringTest, WorksForScalar) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintTypeSizeTest, Wchar_t) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintTypeWithGenericStreamingTest, NonTemplateType) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintTypeWithGenericStreamingTest, TemplateType) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintTypeWithGenericStreamingTest, TypeImplicitlyConvertible) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintUnprintableTypeTest, InGlobalNamespace) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintUnprintableTypeTest, InUserNamespace) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintUnpritableTypeTest, BigObject) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintWideCStringTest, Const) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintWideCStringTest, EscapesProperly) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintWideCStringTest, NonConst) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintWideCStringTest, Null) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintWideStringTest, StringAmbiguousHex) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(PrintWideStringTest, StringInStdNamespace) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(UniversalPrintTest, WorksForCString) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(UniversalPrintTest, WorksForCharArray) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(UniversalPrintTest, WorksForNonReference) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(UniversalPrintTest, WorksForReference) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(UniversalTersePrintTest, WorksForCString) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(UniversalTersePrintTest, WorksForNonReference) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(UniversalTersePrintTest, WorksForReference) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(UniversalTersePrintTupleFieldsToStringsTestWithStd, PrintsEmptyTuple) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(UniversalTersePrintTupleFieldsToStringsTestWithStd, PrintsOneTuple) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(UniversalTersePrintTupleFieldsToStringsTestWithStd, PrintsTersely) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(UniversalTersePrintTupleFieldsToStringsTestWithStd, PrintsTwoTuple) {$/;"	f	namespace:testing::gtest_printers_test
TEST	test/googletest-printers-test.cc	/^TEST(string_ref, compare) {$/;"	f	namespace:testing::gtest_printers_test::__anon38
TEST	test/googletest-shuffle-test_.cc	/^TEST(ADeathTest, A) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(ADeathTest, B) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(ADeathTest, C) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(B, A) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(B, B) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(B, C) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(B, DISABLED_D) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(B, DISABLED_E) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(BDeathTest, A) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(BDeathTest, B) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(C, A) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(C, B) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(C, C) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(C, DISABLED_D) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(CDeathTest, A) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(DISABLED_D, A) {}$/;"	f	namespace:__anon34
TEST	test/googletest-shuffle-test_.cc	/^TEST(DISABLED_D, DISABLED_B) {}$/;"	f	namespace:__anon34
TEST	test/googletest-uninitialized-test_.cc	/^TEST(DummyTest, Dummy) {$/;"	f
TEST	test/gtest-typed-test_test.cc	/^TEST(DummyTest, TypedTestsAreNotSupportedOnThisPlatform) {}$/;"	f
TEST	test/gtest-unittest-api_test.cc	/^TEST(ApiTest, DISABLED_Dummy1) {}$/;"	f	namespace:testing::internal
TEST	test/gtest-unittest-api_test.cc	/^TEST(ApiTest, TestSuiteDisabledAccessorsWork) {$/;"	f	namespace:testing::internal
TEST	test/gtest-unittest-api_test.cc	/^TEST(ApiTest, TestSuiteImmutableAccessorsWork) {$/;"	f	namespace:testing::internal
TEST	test/gtest-unittest-api_test.cc	/^TEST(ApiTest, UnitTestImmutableAccessorsWork) {$/;"	f	namespace:testing::internal
TEST	test/gtest-unittest-api_test.cc	/^TEST(DISABLED_Test, Dummy2) {}$/;"	f	namespace:testing::internal
TEST	test/gtest_assert_by_exception_test.cc	/^TEST(Test, Test) {$/;"	f
TEST	test/gtest_assert_by_exception_test.cc	/^TEST(Test, Test2) {$/;"	f
TEST	test/gtest_environment_test.cc	/^TEST(FooTest, Bar) {$/;"	f	namespace:__anon26
TEST	test/gtest_help_test_.cc	/^TEST(DeathTest, UsedByPythonScriptToDetectSupportForDeathTestsInThisBinary) {}$/;"	f
TEST	test/gtest_help_test_.cc	/^TEST(HelpFlagTest, ShouldNotBeRun) {$/;"	f
TEST	test/gtest_list_output_unittest_.cc	/^TEST(FooTest, Test1) {}$/;"	f
TEST	test/gtest_list_output_unittest_.cc	/^TEST(FooTest, Test2) {}$/;"	f
TEST	test/gtest_main_unittest.cc	/^TEST(GTestMainTest, ShouldSucceed) {$/;"	f	namespace:__anon25
TEST	test/gtest_prod_test.cc	/^TEST(PrivateCodeTest, CanAccessPrivateMembers) {$/;"	f
TEST	test/gtest_repeat_test.cc	/^TEST(BarDeathTest, ThreadSafeAndFast) {$/;"	f	namespace:__anon31
TEST	test/gtest_repeat_test.cc	/^TEST(FooTest, ShouldFail) {$/;"	f	namespace:__anon31
TEST	test/gtest_repeat_test.cc	/^TEST(FooTest, ShouldPass) {$/;"	f	namespace:__anon31
TEST	test/gtest_skip_in_environment_setup_test.cc	/^TEST(Test, AlwaysFails) { EXPECT_EQ(true, false); }$/;"	f
TEST	test/gtest_skip_test.cc	/^TEST(SkipTest, DoesSkip) {$/;"	f
TEST	test/gtest_sole_header_test.cc	/^TEST(NoFatalFailureTest, AssertNoFatalFailure) {$/;"	f	namespace:__anon44
TEST	test/gtest_sole_header_test.cc	/^TEST(NoFatalFailureTest, ExpectNoFatalFailure) {$/;"	f	namespace:__anon44
TEST	test/gtest_stress_test.cc	/^TEST(FatalFailureOnAllThreadsTest, ExpectFatalFailureOnAllThreads) {$/;"	f	namespace:testing::__anon30
TEST	test/gtest_stress_test.cc	/^TEST(FatalFailureTest, ExpectFatalFailureIgnoresFailuresInOtherThreads) {$/;"	f	namespace:testing::__anon30
TEST	test/gtest_stress_test.cc	/^TEST(NoFatalFailureTest, AssertNoFatalFailureIgnoresFailuresInOtherThreads) {$/;"	f	namespace:testing::__anon30
TEST	test/gtest_stress_test.cc	/^TEST(NoFatalFailureTest, ExpectNoFatalFailureIgnoresFailuresInOtherThreads) {$/;"	f	namespace:testing::__anon30
TEST	test/gtest_stress_test.cc	/^TEST(NonFatalFailureOnAllThreadsTest, ExpectNonFatalFailureOnAllThreads) {$/;"	f	namespace:testing::__anon30
TEST	test/gtest_stress_test.cc	/^TEST(NonFatalFailureTest, ExpectNonFatalFailureIgnoresFailuresInOtherThreads) {$/;"	f	namespace:testing::__anon30
TEST	test/gtest_stress_test.cc	/^TEST(StressTest, CanUseScopedTraceAndAssertionsInManyThreads) {$/;"	f	namespace:testing::__anon30
TEST	test/gtest_stress_test.cc	/^TEST(StressTest,$/;"	f
TEST	test/gtest_testbridge_test_.cc	/^TEST(TestFilterTest, TestThatFails) {$/;"	f
TEST	test/gtest_testbridge_test_.cc	/^TEST(TestFilterTest, TestThatSucceeds) {}$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(ArrayAwareFindTest, WorksForOneDimensionalArray) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(ArrayAwareFindTest, WorksForTwoDimensionalArray) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(ArrayEqTest, WorksForDegeneratedArrays) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(ArrayEqTest, WorksForOneDimensionalArrays) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(ArrayEqTest, WorksForTwoDimensionalArrays) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(AssertHelperTest, AssertHelperIsSmall) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionResultTest, CanStreamOstreamManipulators) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(AssertionResultTest, ConstructibleFromContextuallyConvertibleToBool) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(AssertionResultTest, ConstructibleFromImplicitlyConvertible) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(AssertionResultTest, ConstructionWorks) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(AssertionResultTest, CopyConstructorWorksWhenNotOptimied) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(AssertionResultTest, NegationWorks) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(AssertionResultTest, StreamingWorks) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(AssertionSyntaxTest, BasicAssertionsBehavesLikeSingleStatement) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionSyntaxTest, ExceptionAssertionsBehavesLikeSingleStatement) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionSyntaxTest, NoFatalFailureAssertionsBehavesLikeSingleStatement) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionSyntaxTest, WorksWithConst) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionSyntaxTest, WorksWithSwitch) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, ASSERT_ANY_THROW) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, ASSERT_EQ) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, ASSERT_EQ_NULL) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, ASSERT_FALSE) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, ASSERT_GE) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, ASSERT_GT) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, ASSERT_LE) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, ASSERT_LT) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, ASSERT_NE) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, ASSERT_NO_THROW) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, ASSERT_THROW) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, ASSERT_TRUE) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, AnonymousEnum) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, AppendUserMessage) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, AssertFalseWithAssertionResult) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, AssertPrecedence) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, AssertTrueWithAssertionResult) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, AssertWorksWithUncopyableObject) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, EqFailure) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, EqFailureWithDiff) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, ExpectWorksWithUncopyableObject) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, NamedEnum) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionTest, NonFixtureSubroutine) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(AssertionWithMessageTest, ASSERT) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(AssertionWithMessageTest, ASSERT_FALSE) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(AssertionWithMessageTest, ASSERT_FLOATING) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(AssertionWithMessageTest, ASSERT_STR) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(AssertionWithMessageTest, ASSERT_TRUE) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(AssertionWithMessageTest, EXPECT) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(AssertionWithMessageTest, FAIL) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(AssertionWithMessageTest, SUCCEED) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(AssertionWithMessageTest, WideStringMessage) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(CanonicalizeForStdLibVersioning, ElidesDoubleUnderNames) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(CanonicalizeForStdLibVersioning, LeavesUnversionedNamesUnchanged) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(CodeLocationForTEST, Verify) {$/;"	f	namespace:testing
TEST	test/gtest_unittest.cc	/^TEST(CodePointToUtf8Test, CanEncode12To16Bits) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(CodePointToUtf8Test, CanEncode17To21Bits) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(CodePointToUtf8Test, CanEncode8To11Bits) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(CodePointToUtf8Test, CanEncodeAscii) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(CodePointToUtf8Test, CanEncodeInvalidCodePoint) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(CodePointToUtf8Test, CanEncodeNul) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(ColoredOutputTest, UsesColorsWhenGTestColorFlagIsAliasOfYes) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(ColoredOutputTest, UsesColorsWhenGTestColorFlagIsYes) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(ColoredOutputTest, UsesColorsWhenStdoutIsTty) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(ColoredOutputTest, UsesColorsWhenTermSupportsColors) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(ColoredOutputTest, UsesNoColorWhenGTestColorFlagIsInvalid) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(ColoredOutputTest, UsesNoColorWhenGTestColorFlagIsNo) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(CommandLineFlagsTest, CanBeAccessedInCodeOnceGTestHIsIncluded) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(ComparisonAssertionTest, AcceptsUnprintableArgs) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ContainerUtilityDeathTest, ShuffleRange) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(ContainerUtilityTest, CountIf) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(ContainerUtilityTest, ForEach) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(ContainerUtilityTest, GetElementOr) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(CopyArrayTest, WorksForDegeneratedArrays) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(CopyArrayTest, WorksForOneDimensionalArrays) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(CopyArrayTest, WorksForTwoDimensionalArrays) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(DISABLED_TestSuite, DISABLED_TestShouldNotRun) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(DISABLED_TestSuite, TestShouldNotRun) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(DisabledTest, DISABLED_TestShouldNotRun) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(DisabledTest, NotDISABLED_TestShouldRun) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(EditDistance, TestSuites) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(ElemFromList, Basic) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(EqAssertionTest, Bool) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(EqAssertionTest, Char) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(EqAssertionTest, CharPointer) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(EqAssertionTest, Int) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(EqAssertionTest, OtherPointer) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(EqAssertionTest, StdString) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(EqAssertionTest, StdWideString) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(EqAssertionTest, Time_T) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(EqAssertionTest, WideChar) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(EqAssertionTest, WideCharPointer) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(EventListenerDeathTest, EventsNotForwardedInDeathTestSubprecesses) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(EventListenerTest, AppendKeepsOrder) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(EventListenerTest, RemovingDefaultResultPrinterWorks) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(EventListenerTest, RemovingDefaultXmlGeneratorWorks) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(EventListenerTest, SuppressEventForwarding) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(EventListenerTest, default_result_printer) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(EventListenerTest, default_xml_generator) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, ASSERT_EQ_0) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, ASSERT_EQ_Double) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, EXPECT_ANY_THROW) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, EXPECT_EQ) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, EXPECT_EQ_0) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, EXPECT_EQ_Double) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, EXPECT_EQ_NULL) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, EXPECT_FALSE) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, EXPECT_GE) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, EXPECT_GT) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, EXPECT_LE) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, EXPECT_LT) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, EXPECT_NE) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, EXPECT_NO_THROW) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, EXPECT_THROW) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, EXPECT_TRUE) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, ExpectFalseWithAssertionResult) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, ExpectPrecedence) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectTest, ExpectTrueWithAssertionResult) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(ExpectThrowTest, DoesNotGenerateUnreachableCodeWarning) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(FRIEND_TEST_Test, TEST) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(FlatTuple, Basic) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(FlatTuple, ManyTypes) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(FormatTimeInMillisAsSecondsTest, FormatsNegativeNumber) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(FormatTimeInMillisAsSecondsTest, FormatsPositiveNumber) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(FormatTimeInMillisAsSecondsTest, FormatsZero) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(GTestReferenceToConstTest, Works) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(GetNextRandomSeedTest, WorksForValidInput) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(GetRandomSeedFromFlagTest, HandlesZero) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(GetRandomSeedFromFlagTest, NormalizesInvalidSeed) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(GetRandomSeedFromFlagTest, PreservesValidSeed) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(GetTestTypeIdTest, ReturnsTheSameValueInsideOrOutsideOfGoogleTest) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(GetTypeIdTest, ReturnsDifferentValuesForDifferentTypes) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(GetTypeIdTest, ReturnsSameValueForSameType) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(HRESULTAssertionTest, ASSERT_HRESULT_FAILED) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(HRESULTAssertionTest, ASSERT_HRESULT_SUCCEEDED) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(HRESULTAssertionTest, EXPECT_HRESULT_FAILED) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(HRESULTAssertionTest, EXPECT_HRESULT_SUCCEEDED) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(HRESULTAssertionTest, Streaming) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(HasFailureTest, ReturnsFalseWhenThereIsNoFailure) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(HasFailureTest, ReturnsTrueWhenThereAreFatalAndNonfatalFailures) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(HasFailureTest, ReturnsTrueWhenThereIsFatalFailure) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(HasFailureTest, ReturnsTrueWhenThereIsNonfatalFailure) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(HasFailureTest, WorksOutsideOfTestBody) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(HasFailureTest, WorksOutsideOfTestBody2) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(HasNonfatalFailureTest, ReturnsFalseWhenThereIsNoFailure) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(HasNonfatalFailureTest, ReturnsFalseWhenThereIsOnlyFatalFailure) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(HasNonfatalFailureTest, ReturnsTrueWhenThereAreFatalAndNonfatalFailures) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(HasNonfatalFailureTest, ReturnsTrueWhenThereIsNonfatalFailure) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(HasNonfatalFailureTest, WorksOutsideOfTestBody) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(HasNonfatalFailureTest, WorksOutsideOfTestBody2) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(IndexSequence, MakeIndexSequence) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(Int32FromEnvOrDieDeathTest, AbortsOnFailure) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(Int32FromEnvOrDieDeathTest, AbortsOnInt32Overflow) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(Int32FromEnvOrDieTest, ParsesAndReturnsValidValue) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(Int32FromGTestEnvTest, ParsesAndReturnsValidValue) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(Int32FromGTestEnvTest, ReturnsDefaultWhenValueIsInvalid) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(Int32FromGTestEnvTest, ReturnsDefaultWhenValueOverflows) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(Int32FromGTestEnvTest, ReturnsDefaultWhenVariableIsNotSet) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(IsAProtocolMessageTest, ValueIsCompileTimeConstant) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(IsAProtocolMessageTest, ValueIsFalseWhenTypeIsNotAProtocolMessage) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(IsAProtocolMessageTest, ValueIsTrueWhenTypeIsAProtocolMessage) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(IsContainerTestTest, ConstOnlyContainer) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(IsContainerTestTest, WorksForContainer) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(IsContainerTestTest, WorksForNonContainer) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(IsHashTable, Basic) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(IsNotSubstringTest, GeneratesCorrectMessageForStdString) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(IsNotSubstringTest, GeneratesCorrectMessageForWideCString) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(IsNotSubstringTest, ReturnsCorrectResultForCString) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(IsNotSubstringTest, ReturnsCorrectResultForStdWstring) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(IsNotSubstringTest, ReturnsCorrectResultForWideCString) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(IsNotSubstringTest, ReturnsCorrectResultsForStdString) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(IsSubstringTest, GeneratesCorrectMessageForCString) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(IsSubstringTest, GeneratesCorrectMessageForWstring) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(IsSubstringTest, ReturnsCorrectResultForCString) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(IsSubstringTest, ReturnsCorrectResultForStdWstring) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(IsSubstringTest, ReturnsCorrectResultForWideCString) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(IsSubstringTest, ReturnsCorrectResultsForStdString) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(MacroTest, ADD_FAILURE) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(MacroTest, ADD_FAILURE_AT) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(MacroTest, FAIL) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(MacroTest, GTEST_FAIL_AT) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(MacroTest, SUCCEED) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(MessageTest, CanStreamUserTypeInGlobalNameSpace) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(MessageTest, CanStreamUserTypeInUnnamedNameSpace) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(MessageTest, CanStreamUserTypeInUserNameSpace) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(MessageTest, CanStreamUserTypeInUserNameSpaceWithStreamOperatorInGlobal) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(MessageTest, NullPointers) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(MessageTest, WideStrings) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(NativeArrayTest, ConstructorFromArrayWorks) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(NativeArrayTest, CreatesAndDeletesCopyOfArrayWhenAskedTo) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(NativeArrayTest, MethodsWork) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(NativeArrayTest, TypeMembersAreCorrect) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(NativeArrayTest, WorksForTwoDimensionalArray) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(NestedTestingNamespaceTest, Failure) {$/;"	f	namespace:my_namespace::testing
TEST	test/gtest_unittest.cc	/^TEST(NestedTestingNamespaceTest, Success) {$/;"	f	namespace:my_namespace::testing
TEST	test/gtest_unittest.cc	/^TEST(NullLiteralTest, ImplicitConversion) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(NullLiteralTest, LHSAllowsNullLiterals) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(NullLiteralTest, NoConversionNoWarning) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(ParseInt32FlagTest, ParsesAndReturnsValidValue) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(ParseInt32FlagTest, ReturnsDefaultWhenValueIsInvalid) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(ParseInt32FlagTest, ReturnsDefaultWhenValueOverflows) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(ParseInt32FlagTest, ReturnsFalseForInvalidFlag) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(Pred1Test, SingleEvaluationOnFailure) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(Pred1Test, WithFormat) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(Pred1Test, WithoutFormat) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(PredTest, ExpectPredEvalFailure) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(PredTest, SingleEvaluationOnFailure) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(PredTest, WithFormat) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(PredTest, WithoutFormat) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(PredicateAssertionTest, AcceptsOverloadedFunction) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(PredicateAssertionTest, AcceptsTemplateFunction) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(PredicateFormatAssertionTest, AcceptsOverloadedFunction) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(PredicateFormatAssertionTest, AcceptsTemplateFunction) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(RandomDeathTest, GeneratesCrashesOnInvalidRange) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(RandomTest, GeneratesNumbersWithinRange) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(RandomTest, RepeatsWhenReseeded) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(RegisterTest, WasRegistered) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(RemoveReferenceToConstTest, Works) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(ShouldRunTestOnShardTest, IsPartitionWhenThereAreFiveShards) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(ShouldRunTestOnShardTest, IsPartitionWhenThereIsOneShard) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(SkipPrefixTest, DoesNotSkipWhenPrefixDoesNotMatch) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(SkipPrefixTest, SkipsWhenPrefixMatches) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StaticAssertTypeEqTest, CompilesForEqualTypes) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StaticAssertTypeEqTest, WorksInClass) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StreamableTest, BasicIoManip) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(StreamableTest, NULChar) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(StreamableTest, NullCharPtr) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(StreamableTest, int) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(StreamableTest, string) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(StreamableTest, stringWithEmbeddedNUL) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(StreamableToStringTest, CString) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(StreamableToStringTest, NullCString) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(StreamableToStringTest, NullPointer) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(StreamableToStringTest, Pointer) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(StreamableToStringTest, Scalar) {$/;"	f	namespace:__anon42
TEST	test/gtest_unittest.cc	/^TEST(StreamingAssertionsTest, AnyThrow) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StreamingAssertionsTest, FloatingPointEquals) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StreamingAssertionsTest, IntegerEquals) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StreamingAssertionsTest, IntegerLessThan) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StreamingAssertionsTest, NoThrow) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StreamingAssertionsTest, StringNotEqualIgnoringCase) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StreamingAssertionsTest, StringsEqual) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StreamingAssertionsTest, StringsEqualIgnoringCase) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StreamingAssertionsTest, StringsNotEqual) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StreamingAssertionsTest, Throw) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StreamingAssertionsTest, Truth) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StreamingAssertionsTest, Truth2) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StreamingAssertionsTest, Unconditional) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(StringAssertionTest, ASSERT_STRCASEEQ) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(StringAssertionTest, ASSERT_STRCASENE) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(StringAssertionTest, ASSERT_STREQ) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(StringAssertionTest, ASSERT_STREQ_Null) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(StringAssertionTest, ASSERT_STREQ_Null2) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(StringAssertionTest, ASSERT_STRNE) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(StringAssertionTest, STREQ_Wide) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(StringAssertionTest, STRNE_Wide) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(StringTest, AnsiAndUtf16ConvertBasic) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(StringTest, AnsiAndUtf16ConvertPathChars) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(StringTest, AnsiAndUtf16Null) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(StringTest, CaseInsensitiveWideCStringEquals) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(StringTest, EndsWithCaseInsensitive) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(StringTest, ShowWideCString) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(SuccessfulAssertionTest, ASSERT) {$/;"	f	namespace:testing
TEST	test/gtest_unittest.cc	/^TEST(SuccessfulAssertionTest, ASSERT_STR) {$/;"	f	namespace:testing
TEST	test/gtest_unittest.cc	/^TEST(SuccessfulAssertionTest, EXPECT) {$/;"	f	namespace:testing
TEST	test/gtest_unittest.cc	/^TEST(SuccessfulAssertionTest, EXPECT_STR) {$/;"	f	namespace:testing
TEST	test/gtest_unittest.cc	/^TEST(SuccessfulAssertionTest, SUCCEED) {$/;"	f	namespace:testing
TEST	test/gtest_unittest.cc	/^TEST(TestEventListenersTest, Append) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(TestEventListenersTest, ConstructionWorks) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(TestEventListenersTest, DestructionWorks) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(TestEventListenersTest, Release) {$/;"	f
TEST	test/gtest_unittest.cc	/^TEST(TestPropertyTest, ConstructorWorks) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(TestPropertyTest, ReplaceStringValue) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(TestPropertyTest, SetValue) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(TestPropertyTest, StringValue) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(TestResultPropertyTest, GetTestProperty) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(TestResultPropertyTest, MultiplePropertiesFoundWhenAdded) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(TestResultPropertyTest, NoPropertiesFoundWhenNoneAreAdded) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(TestResultPropertyTest, OnePropertyFoundWhenAdded) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(TestResultPropertyTest, OverridesValuesForDuplicateKeys) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(UnitTestTest, CanGetOriginalWorkingDir) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(UnitTestTest, ReturnsPlausibleTimestamp) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(WideStringToUtf8Test, CanEncode12To16Bits) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(WideStringToUtf8Test, CanEncode17To21Bits) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(WideStringToUtf8Test, CanEncode8To11Bits) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(WideStringToUtf8Test, CanEncodeAscii) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(WideStringToUtf8Test, CanEncodeInvalidCodePoint) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(WideStringToUtf8Test, CanEncodeInvalidUtf16SurrogatePair) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(WideStringToUtf8Test, CanEncodeNul) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(WideStringToUtf8Test, CanEncodeValidUtf16SUrrogatePairs) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(WideStringToUtf8Test, ConcatenatesCodepointsCorrectly) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(WideStringToUtf8Test, StopsOnNulCharacter) {$/;"	f	namespace:__anon40
TEST	test/gtest_unittest.cc	/^TEST(WideStringToUtf8Test, StopsWhenLengthLimitReached) {$/;"	f	namespace:__anon40
TEST	test/gtest_xml_output_unittest_.cc	/^TEST(InvalidCharactersTest, InvalidCharactersInMessage) {$/;"	f
TEST	test/gtest_xml_output_unittest_.cc	/^TEST(MixedResultTest, DISABLED_test) {$/;"	f
TEST	test/gtest_xml_output_unittest_.cc	/^TEST(MixedResultTest, Fails) {$/;"	f
TEST	test/gtest_xml_output_unittest_.cc	/^TEST(MixedResultTest, Succeeds) {$/;"	f
TEST	test/gtest_xml_output_unittest_.cc	/^TEST(NoFixtureTest, ExternalUtilityThatCallsRecordIntValuedProperty) {$/;"	f
TEST	test/gtest_xml_output_unittest_.cc	/^TEST(NoFixtureTest, ExternalUtilityThatCallsRecordStringValuedProperty) {$/;"	f
TEST	test/gtest_xml_output_unittest_.cc	/^TEST(NoFixtureTest, RecordProperty) {$/;"	f
TEST	test/gtest_xml_output_unittest_.cc	/^TEST(XmlQuotingTest, OutputsCData) {$/;"	f
TESTBRIDGE_NAME	test/gtest_testbridge_test.py	/^TESTBRIDGE_NAME = 'TESTBRIDGE_TEST_ONLY'$/;"	v
TEST_CASE_REGEX	test/googletest-filter-unittest.py	/^TEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(\/\\w+)?)')$/;"	v
TEST_DID_NOT_DIE	include/gtest/internal/gtest-death-test-internal.h	/^    TEST_DID_NOT_DIE$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_ENCOUNTERED_RETURN_STATEMENT	include/gtest/internal/gtest-death-test-internal.h	/^    TEST_ENCOUNTERED_RETURN_STATEMENT,$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_F	include/gtest/gtest.h	/^#define TEST_F(/;"	d
TEST_F	samples/sample3_unittest.cc	/^TEST_F(QueueTestSmpl3, DefaultConstructor) {$/;"	f	namespace:__anon2
TEST_F	samples/sample3_unittest.cc	/^TEST_F(QueueTestSmpl3, Dequeue) {$/;"	f	namespace:__anon2
TEST_F	samples/sample3_unittest.cc	/^TEST_F(QueueTestSmpl3, Map) {$/;"	f	namespace:__anon2
TEST_F	samples/sample5_unittest.cc	/^TEST_F(IntegerFunctionTest, Factorial) {$/;"	f	namespace:__anon5
TEST_F	samples/sample5_unittest.cc	/^TEST_F(IntegerFunctionTest, IsPrime) {$/;"	f	namespace:__anon5
TEST_F	samples/sample5_unittest.cc	/^TEST_F(QueueTest, DefaultConstructor) {$/;"	f	namespace:__anon5
TEST_F	samples/sample5_unittest.cc	/^TEST_F(QueueTest, Dequeue) {$/;"	f	namespace:__anon5
TEST_F	test/googletest-catch-exceptions-test_.cc	/^TEST_F(CxxExceptionInConstructorTest, ThrowsExceptionInConstructor) {$/;"	f
TEST_F	test/googletest-catch-exceptions-test_.cc	/^TEST_F(CxxExceptionInSetUpTest, ThrowsExceptionInSetUp) {$/;"	f
TEST_F	test/googletest-catch-exceptions-test_.cc	/^TEST_F(CxxExceptionInSetUpTestSuiteTest, ThrowsExceptionInSetUpTestSuite) {$/;"	f
TEST_F	test/googletest-catch-exceptions-test_.cc	/^TEST_F(CxxExceptionInTearDownTest, ThrowsExceptionInTearDown) {}$/;"	f
TEST_F	test/googletest-catch-exceptions-test_.cc	/^TEST_F(CxxExceptionInTearDownTestSuiteTest,$/;"	f
TEST_F	test/googletest-catch-exceptions-test_.cc	/^TEST_F(CxxExceptionInTestBodyTest, ThrowsStdCxxException) {$/;"	f
TEST_F	test/googletest-catch-exceptions-test_.cc	/^TEST_F(SehExceptionInConstructorTest, ThrowsExceptionInConstructor) {}$/;"	f
TEST_F	test/googletest-catch-exceptions-test_.cc	/^TEST_F(SehExceptionInDestructorTest, ThrowsExceptionInDestructor) {}$/;"	f
TEST_F	test/googletest-catch-exceptions-test_.cc	/^TEST_F(SehExceptionInSetUpTest, ThrowsExceptionInSetUp) {}$/;"	f
TEST_F	test/googletest-catch-exceptions-test_.cc	/^TEST_F(SehExceptionInSetUpTestSuiteTest, ThrowsExceptionInSetUpTestSuite) {}$/;"	f
TEST_F	test/googletest-catch-exceptions-test_.cc	/^TEST_F(SehExceptionInTearDownTest, ThrowsExceptionInTearDown) {}$/;"	f
TEST_F	test/googletest-catch-exceptions-test_.cc	/^TEST_F(SehExceptionInTearDownTestSuiteTest,$/;"	f
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(MacroLogicDeathTest, ChildDoesNotDie) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(MacroLogicDeathTest, ChildExitsSuccessfully) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(MacroLogicDeathTest, ChildExitsUnsuccessfully) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(MacroLogicDeathTest, ChildPerformsReturn) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(MacroLogicDeathTest, NothingHappens) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, ASSERT_DEATH) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, AcceptsAnythingConvertibleToRE) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, AssertDebugDeathAborts) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, AssertDebugDeathAborts10) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, AssertDebugDeathAborts2) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, AssertDebugDeathAborts3) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, AssertDebugDeathAborts4) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, AssertDebugDeathAborts5) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, AssertDebugDeathAborts6) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, AssertDebugDeathAborts7) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, AssertDebugDeathAborts8) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, AssertDebugDeathAborts9) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, CRTDebugDeath) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, CompoundStatement) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, DeathTestBadExitCodeOutput) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, DeathTestFailedOutput) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, DeathTestMultiLineMatchFail) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, DeathTestMultiLineMatchPass) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, DeathTestUnexpectedReturnOutput) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, DoesNotDie) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, DoesNotExecuteAtforkHooks) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, EXPECT_DEATH) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, EmbeddedNulInMessage) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, ErrorMessageMismatch) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, ExitMacros) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, ExitMacrosUsingFork) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, ExpectDebugDeathDoesNotAbort) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, FastDeathTestInChangedDir) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, FastSigprofActionSet) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, FunctionWithParameter) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, GlobalFunction) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, InsideLoop) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, InvalidStyle) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, MemberFunctionFastStyle) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, MemberFunctionThreadsafeStyle) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, MethodOfAnotherClass) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, MixedStyles) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, NonVoidFunction) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, OutsideFixture) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, ReturnIsFailure) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, RunawayIsFailure) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, SingleEvaluation) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, SingleStatement) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, StaticMemberFunctionFastStyle) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, StaticMemberFunctionThreadsafeStyle) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, SwitchStatement) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, TestAssertDebugDeath) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, TestExpectDebugDeath) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, ThreadSafeSigprofActionSet) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, ThreadsafeDeathTestInChangedDir) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-death-test-test.cc	/^TEST_F(TestForDeathTest, ThreadsafeDeathTestInLoop) {$/;"	f	namespace:__anon28
TEST_F	test/googletest-filepath-test.cc	/^TEST_F(DirectoryCreationTest, CreateDirectoriesAndUniqueFilename) {$/;"	f	namespace:testing::internal::__anon36
TEST_F	test/googletest-filepath-test.cc	/^TEST_F(DirectoryCreationTest, CreateDirectoriesFail) {$/;"	f	namespace:testing::internal::__anon36
TEST_F	test/googletest-filepath-test.cc	/^TEST_F(DirectoryCreationTest, CreateDirectoriesForAlreadyExistingPath) {$/;"	f	namespace:testing::internal::__anon36
TEST_F	test/googletest-filepath-test.cc	/^TEST_F(DirectoryCreationTest, CreateDirectoriesRecursively) {$/;"	f	namespace:testing::internal::__anon36
TEST_F	test/googletest-filter-unittest_.cc	/^TEST_F(FooTest, Abc) {$/;"	f	namespace:__anon27
TEST_F	test/googletest-filter-unittest_.cc	/^TEST_F(FooTest, Xyz) {$/;"	f	namespace:__anon27
TEST_F	test/googletest-list-tests-unittest_.cc	/^TEST_F(FooTest, DISABLED_Test2) {$/;"	f
TEST_F	test/googletest-list-tests-unittest_.cc	/^TEST_F(FooTest, Test1) {$/;"	f
TEST_F	test/googletest-list-tests-unittest_.cc	/^TEST_F(FooTest, Test3) {$/;"	f
TEST_F	test/googletest-listener-test.cc	/^TEST_F(ListenerTest, DoesBar) {$/;"	f	namespace:testing::internal
TEST_F	test/googletest-listener-test.cc	/^TEST_F(ListenerTest, DoesFoo) {$/;"	f	namespace:testing::internal
TEST_F	test/googletest-options-test.cc	/^TEST_F(XmlOutputChangeDirTest, PreserveOriginalWorkingDirWithAbsoluteFile) {$/;"	f	namespace:testing::internal::__anon45
TEST_F	test/googletest-options-test.cc	/^TEST_F(XmlOutputChangeDirTest, PreserveOriginalWorkingDirWithAbsolutePath) {$/;"	f	namespace:testing::internal::__anon45
TEST_F	test/googletest-options-test.cc	/^TEST_F(XmlOutputChangeDirTest, PreserveOriginalWorkingDirWithDefault) {$/;"	f	namespace:testing::internal::__anon45
TEST_F	test/googletest-options-test.cc	/^TEST_F(XmlOutputChangeDirTest, PreserveOriginalWorkingDirWithDefaultXML) {$/;"	f	namespace:testing::internal::__anon45
TEST_F	test/googletest-options-test.cc	/^TEST_F(XmlOutputChangeDirTest, PreserveOriginalWorkingDirWithRelativeFile) {$/;"	f	namespace:testing::internal::__anon45
TEST_F	test/googletest-options-test.cc	/^TEST_F(XmlOutputChangeDirTest, PreserveOriginalWorkingDirWithRelativePath) {$/;"	f	namespace:testing::internal::__anon45
TEST_F	test/googletest-output-test_.cc	/^TEST_F(ExpectFailureTest, ExpectFatalFailure) {$/;"	f
TEST_F	test/googletest-output-test_.cc	/^TEST_F(ExpectFailureTest, ExpectFatalFailureOnAllThreads) {$/;"	f
TEST_F	test/googletest-output-test_.cc	/^TEST_F(ExpectFailureTest, ExpectNonFatalFailure) {$/;"	f
TEST_F	test/googletest-output-test_.cc	/^TEST_F(ExpectFailureTest, ExpectNonFatalFailureOnAllThreads) {$/;"	f
TEST_F	test/googletest-output-test_.cc	/^TEST_F(ExpectFailureWithThreadsTest, ExpectFatalFailure) {$/;"	f
TEST_F	test/googletest-output-test_.cc	/^TEST_F(ExpectFailureWithThreadsTest, ExpectNonFatalFailure) {$/;"	f
TEST_F	test/googletest-output-test_.cc	/^TEST_F(FatalFailureInFixtureConstructorTest, FailureInConstructor) {$/;"	f
TEST_F	test/googletest-output-test_.cc	/^TEST_F(FatalFailureInSetUpTest, FailureInSetUp) {$/;"	f
TEST_F	test/googletest-output-test_.cc	/^TEST_F(MixedUpTestSuiteTest, FirstTestFromNamespaceFoo) {}$/;"	f	namespace:foo
TEST_F	test/googletest-output-test_.cc	/^TEST_F(MixedUpTestSuiteTest, SecondTestFromNamespaceFoo) {}$/;"	f	namespace:foo
TEST_F	test/googletest-output-test_.cc	/^TEST_F(MixedUpTestSuiteTest, ThisShouldFail) {}$/;"	f	namespace:bar
TEST_F	test/googletest-output-test_.cc	/^TEST_F(MixedUpTestSuiteTest, ThisShouldFailToo) {}$/;"	f	namespace:bar
TEST_F	test/googletest-output-test_.cc	/^TEST_F(MixedUpTestSuiteWithSameTestNameTest,$/;"	f	namespace:bar
TEST_F	test/googletest-output-test_.cc	/^TEST_F(MixedUpTestSuiteWithSameTestNameTest,$/;"	f	namespace:foo
TEST_F	test/googletest-output-test_.cc	/^TEST_F(NonFatalFailureInFixtureConstructorTest, FailureInConstructor) {$/;"	f
TEST_F	test/googletest-output-test_.cc	/^TEST_F(NonFatalFailureInSetUpTest, FailureInSetUp) {$/;"	f
TEST_F	test/googletest-output-test_.cc	/^TEST_F(ScopedFakeTestPartResultReporterTest, InterceptOnlyCurrentThread) {$/;"	f
TEST_F	test/googletest-output-test_.cc	/^TEST_F(TEST_F_before_TEST_in_same_test_case, DefinedUsingTEST_F) {}$/;"	f
TEST_F	test/googletest-output-test_.cc	/^TEST_F(TEST_before_TEST_F_in_same_test_case, DefinedUsingTEST_FAndShouldFail) {$/;"	f
TEST_F	test/googletest-param-test-test.cc	/^TEST_F(NonParameterizedBaseTest, FixtureIsInitialized) {$/;"	f
TEST_F	test/googletest-param-test-test.cc	/^TEST_F(ParameterizedDeathTest, GetParamDiesFromTestF) {$/;"	f
TEST_F	test/googletest-shuffle-test_.cc	/^TEST_F(A, A) {}$/;"	f	namespace:__anon34
TEST_F	test/googletest-shuffle-test_.cc	/^TEST_F(A, B) {}$/;"	f	namespace:__anon34
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultArrayDeathTest, DiesWhenIndexIsOutOfBound) {$/;"	f	namespace:__anon24
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultArrayTest, ContainsGivenResultAfterAppend) {$/;"	f	namespace:__anon24
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultArrayTest, ContainsGivenResultsAfterTwoAppends) {$/;"	f	namespace:__anon24
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultArrayTest, InitialSizeIsZero) {$/;"	f	namespace:__anon24
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultTest, ConstructorWorks) {$/;"	f	namespace:__anon24
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultTest, Failed) {$/;"	f	namespace:__anon24
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultTest, FatallyFailed) {$/;"	f	namespace:__anon24
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultTest, NonfatallyFailed) {$/;"	f	namespace:__anon24
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultTest, Passed) {$/;"	f	namespace:__anon24
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultTest, ResultAccessorsWork) {$/;"	f	namespace:__anon24
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultTest, Skipped) {$/;"	f	namespace:__anon24
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultTest, file_name) {$/;"	f	namespace:__anon24
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultTest, line_number) {$/;"	f	namespace:__anon24
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultTest, message) {$/;"	f	namespace:__anon24
TEST_F	test/googletest-test-part-test.cc	/^TEST_F(TestPartResultTest, type) {$/;"	f	namespace:__anon24
TEST_F	test/gtest-typed-test_test.cc	/^TEST_F(TypedTestSuitePStateDeathTest, DetectsDuplicates) {$/;"	f
TEST_F	test/gtest-typed-test_test.cc	/^TEST_F(TypedTestSuitePStateDeathTest, DetectsExtraTest) {$/;"	f
TEST_F	test/gtest-typed-test_test.cc	/^TEST_F(TypedTestSuitePStateDeathTest, DetectsMissedTest) {$/;"	f
TEST_F	test/gtest-typed-test_test.cc	/^TEST_F(TypedTestSuitePStateDeathTest, DetectsTestAfterRegistration) {$/;"	f
TEST_F	test/gtest-typed-test_test.cc	/^TEST_F(TypedTestSuitePStateTest, IgnoresOrderAndSpaces) {$/;"	f
TEST_F	test/gtest-typed-test_test.cc	/^TEST_F(TypedTestSuitePStateTest, SucceedsForMatchingList) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED1Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED1Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED1Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED1Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED1Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED1Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED1Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED1Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED2Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED2Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED2Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED2Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED2Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED2Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED2Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED2Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED3Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED3Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED3Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED3Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED3Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED3Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED3Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED3Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED4Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED4Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED4Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED4Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED4Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED4Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED4Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED4Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED5Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED5Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED5Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED5Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED5Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED5Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED5Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED5Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT1Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT1Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT1Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT1Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT1Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT1Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT1Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT1Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT2Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT2Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT2Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT2Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT2Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT2Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT2Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT2Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT3Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT3Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT3Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT3Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT3Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT3Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT3Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT3Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT4Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT4Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT4Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT4Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT4Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT4Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT4Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT4Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT5Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT5Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT5Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT5Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT5Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT5Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT5Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(ASSERT_PRED_FORMAT5Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED1Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED1Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED1Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED1Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED1Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED1Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED1Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED1Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED2Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED2Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED2Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED2Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED2Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED2Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED2Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED2Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED3Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED3Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED3Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED3Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED3Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED3Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED3Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED3Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED4Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED4Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED4Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED4Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED4Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED4Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED4Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED4Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED5Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED5Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED5Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED5Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED5Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED5Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED5Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED5Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT1Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT1Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT1Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT1Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT1Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT1Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT1Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT1Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT2Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT2Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT2Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT2Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT2Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT2Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT2Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT2Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT3Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT3Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT3Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT3Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT3Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT3Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT3Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT3Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT4Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT4Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT4Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT4Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT4Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT4Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT4Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT4Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT5Test, FunctionOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT5Test, FunctionOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT5Test, FunctionOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT5Test, FunctionOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT5Test, FunctorOnBuiltInTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT5Test, FunctorOnBuiltInTypeSuccess) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT5Test, FunctorOnUserTypeFailure) {$/;"	f
TEST_F	test/gtest_pred_impl_unittest.cc	/^TEST_F(EXPECT_PRED_FORMAT5Test, FunctorOnUserTypeSuccess) {$/;"	f
TEST_F	test/gtest_premature_exit_test.cc	/^TEST_F(PrematureExitDeathTest, FileExistsDuringExecutionOfDeathTest) {$/;"	f	namespace:__anon35
TEST_F	test/gtest_premature_exit_test.cc	/^TEST_F(PrematureExitTest, PrematureExitFileExistsDuringTestExecution) {$/;"	f	namespace:__anon35
TEST_F	test/gtest_prod_test.cc	/^TEST_F(PrivateCodeFixtureTest, CanAccessPrivateMembers) {$/;"	f
TEST_F	test/gtest_skip_test.cc	/^TEST_F(Fixture, SkipsAnotherTest) {$/;"	f
TEST_F	test/gtest_skip_test.cc	/^TEST_F(Fixture, SkipsOneTest) {$/;"	f
TEST_F	test/gtest_unittest.cc	/^TEST_F(AdHocTestResultTest, AdHocTestResultForTestSuiteShowsFailure) {$/;"	f
TEST_F	test/gtest_unittest.cc	/^TEST_F(AdHocTestResultTest, AdHocTestResultTestForUnitTestDoesNotShowFailure) {$/;"	f
TEST_F	test/gtest_unittest.cc	/^TEST_F(CodeLocationForTESTF, Verify) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(CurrentTestInfoTest, WorksForFirstTestInATestSuite) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(CurrentTestInfoTest, WorksForSecondTestInATestSuite) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(DisabledTestsTest, DISABLED_TestShouldNotRun_1) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(DisabledTestsTest, DISABLED_TestShouldNotRun_2) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(DoubleTest, ASSERT_NEAR) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(DoubleTest, AlmostZeros) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(DoubleTest, Commutative) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(DoubleTest, DoubleLEFails) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(DoubleTest, DoubleLESucceeds) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(DoubleTest, EXPECT_NEAR) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(DoubleTest, Infinity) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(DoubleTest, LargeDiff) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(DoubleTest, NaN) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(DoubleTest, Reflexive) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(DoubleTest, Size) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(DoubleTest, SmallDiff) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(DoubleTest, Zeros) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ExpectFailureWithThreadsTest, ExpectFatalFailureOnAllThreads) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ExpectFailureWithThreadsTest, ExpectNonFatalFailureOnAllThreads) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ExpectFatalFailureTest, AcceptsMacroThatExpandsToUnprotectedComma) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ExpectFatalFailureTest, AcceptsStdStringObject) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ExpectFatalFailureTest, CanBeUsedInNonVoidFunction) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ExpectFatalFailureTest, CatchesFatalFailureOnAllThreads) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ExpectFatalFailureTest, CatchesFatalFaliure) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ExpectFatalFailureTest, DoesNotAbort) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ExpectNonfatalFailureTest, AcceptsMacroThatExpandsToUnprotectedComma) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ExpectNonfatalFailureTest, AcceptsStdStringObject) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ExpectNonfatalFailureTest, CatchesNonfatalFailure) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ExpectNonfatalFailureTest, CatchesNonfatalFailureOnAllThreads) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FRIEND_TEST_Test2, TEST_F) {$/;"	f	namespace:__anon42
TEST_F	test/gtest_unittest.cc	/^TEST_F(FlagfileTest, Empty) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(FlagfileTest, FilterNonEmpty) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(FlagfileTest, SeveralFlags) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(FloatTest, ASSERT_NEAR) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FloatTest, AlmostZeros) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FloatTest, Commutative) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FloatTest, EXPECT_NEAR) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FloatTest, FloatLEFails) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FloatTest, FloatLESucceeds) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FloatTest, Infinity) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FloatTest, LargeDiff) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FloatTest, NaN) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FloatTest, Reflexive) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FloatTest, Size) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FloatTest, SmallDiff) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FloatTest, Zeros) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FormatEpochTimeInMillisAsIso8601Test, MillisecondsDoNotAffectResult) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FormatEpochTimeInMillisAsIso8601Test, Prints24HourTime) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FormatEpochTimeInMillisAsIso8601Test, PrintsEpochStart) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FormatEpochTimeInMillisAsIso8601Test, PrintsLeadingZeroes) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(FormatEpochTimeInMillisAsIso8601Test, PrintsTwoDigitSegments) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(GTestFlagSaverTest, ModifyGTestFlags) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(GTestFlagSaverTest, VerifyGTestFlags) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(NoFatalFailureTest, AssertNoFatalFailureOnFatalFailure) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(NoFatalFailureTest, ExpectNoFatalFailureOnFatalFailure) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(NoFatalFailureTest, MessageIsStreamable) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(NoFatalFailureTest, NoFailure) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(NoFatalFailureTest, NonFatalIsNoFailure) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, AlsoRunDisabledTestsFalse) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, AlsoRunDisabledTestsFlag) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, AlsoRunDisabledTestsTrue) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, BreakOnFailureFalse_0) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, BreakOnFailureFalse_F) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, BreakOnFailureFalse_f) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, BreakOnFailureTrue) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, BreakOnFailureWithoutValue) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, CatchExceptions) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, DeathTestUseFork) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, DuplicatedFlags) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, Empty) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, FilterBad) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, FilterEmpty) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, FilterNonEmpty) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, ListTestsFalse) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, ListTestsFalse_F) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, ListTestsFalse_f) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, ListTestsFlag) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, ListTestsTrue) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, NoFlag) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, OutputEmpty) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, OutputXml) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, OutputXmlDirectory) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, OutputXmlFile) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, PrintTimeFalse) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, PrintTimeFalse_F) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, PrintTimeFalse_f) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, PrintTimeFlag) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, PrintTimeTrue) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, RandomSeed) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, Repeat) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, ShuffleFalse_0) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, ShuffleTrue) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, ShuffleWithoutValue) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, StackTraceDepth) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, StreamResultTo) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, ThrowOnFailureFalse_0) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, ThrowOnFailureTrue) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, ThrowOnFailureWithoutValue) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, UnrecognizedFlag) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ParseFlagsTest, WideStrings) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ScopedFakeTestPartResultReporterTest, DeprecatedConstructor) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ScopedFakeTestPartResultReporterTest, InterceptsTestFailures) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ScopedFakeTestPartResultReporterWithThreadsTest,$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(SetUpTestCaseTest, Test1) { EXPECT_STRNE(nullptr, shared_resource_); }$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(SetUpTestCaseTest, Test2) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(SetUpTestSuiteTest, TestSetupTestSuite1) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(SetUpTestSuiteTest, TestSetupTestSuite2) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(ShouldShardDeathTest, AbortsWhenShardingEnvVarsAreInvalid) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ShouldShardTest, ReturnsFalseWhenNeitherEnvVarIsSet) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ShouldShardTest, ReturnsFalseWhenTotalShardIsOne) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(ShouldShardTest, WorksWhenShardEnvVarsAreValid) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(SingleEvaluationTest, ASSERT_STR) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(SingleEvaluationTest, ExceptionTests) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(SingleEvaluationTest, FailedASSERT_NE) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(SingleEvaluationTest, FailedASSERT_STREQ) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(SingleEvaluationTest, OtherCases) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(StreamingListenerTest, OnTestCaseEnd) {$/;"	f	namespace:testing::internal
TEST_F	test/gtest_unittest.cc	/^TEST_F(StreamingListenerTest, OnTestCaseStart) {$/;"	f	namespace:testing::internal
TEST_F	test/gtest_unittest.cc	/^TEST_F(StreamingListenerTest, OnTestEnd) {$/;"	f	namespace:testing::internal
TEST_F	test/gtest_unittest.cc	/^TEST_F(StreamingListenerTest, OnTestIterationEnd) {$/;"	f	namespace:testing::internal
TEST_F	test/gtest_unittest.cc	/^TEST_F(StreamingListenerTest, OnTestPartResult) {$/;"	f	namespace:testing::internal
TEST_F	test/gtest_unittest.cc	/^TEST_F(StreamingListenerTest, OnTestProgramEnd) {$/;"	f	namespace:testing::internal
TEST_F	test/gtest_unittest.cc	/^TEST_F(StreamingListenerTest, OnTestStart) {$/;"	f	namespace:testing::internal
TEST_F	test/gtest_unittest.cc	/^TEST_F(TestInfoTest, Names) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(TestInfoTest, result) {$/;"	f	namespace:testing
TEST_F	test/gtest_unittest.cc	/^TEST_F(TestLifeCycleTest, Test1) {$/;"	f	namespace:__anon42
TEST_F	test/gtest_unittest.cc	/^TEST_F(TestLifeCycleTest, Test2) {$/;"	f	namespace:__anon42
TEST_F	test/gtest_unittest.cc	/^TEST_F(TestResultDeathTest, GetTestPartResult) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(TestResultTest, Failed) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(TestResultTest, Passed) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(TestResultTest, total_part_count) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(UnitTestRecordPropertyTest, MultiplePropertiesFoundWhenAdded) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(UnitTestRecordPropertyTest, OnePropertyFoundWhenAdded) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(UnitTestRecordPropertyTest, OverridesValuesForDuplicateKeys) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(UnitTestRecordPropertyTest,$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(VectorShuffleTest, HandlesEmptyRange) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(VectorShuffleTest, HandlesRangeOfSizeOne) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(VectorShuffleTest, ShufflesEndOfVector) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(VectorShuffleTest, ShufflesEntireVector) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(VectorShuffleTest, ShufflesMiddleOfVector) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(VectorShuffleTest, ShufflesRepeatably) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_unittest.cc	/^TEST_F(VectorShuffleTest, ShufflesStartOfVector) {$/;"	f	namespace:__anon40
TEST_F	test/gtest_xml_outfile1_test_.cc	/^TEST_F(PropertyOne, TestSomeProperties) {$/;"	f
TEST_F	test/gtest_xml_outfile2_test_.cc	/^TEST_F(PropertyTwo, TestSomeProperties) {$/;"	f
TEST_F	test/gtest_xml_output_unittest_.cc	/^TEST_F(DisabledTest, DISABLED_test_not_run) {$/;"	f
TEST_F	test/gtest_xml_output_unittest_.cc	/^TEST_F(FailedTest, Fails) {$/;"	f
TEST_F	test/gtest_xml_output_unittest_.cc	/^TEST_F(PropertyRecordingTest, IntValuedProperty) {$/;"	f
TEST_F	test/gtest_xml_output_unittest_.cc	/^TEST_F(PropertyRecordingTest, OneProperty) {$/;"	f
TEST_F	test/gtest_xml_output_unittest_.cc	/^TEST_F(PropertyRecordingTest, ThreeProperties) {$/;"	f
TEST_F	test/gtest_xml_output_unittest_.cc	/^TEST_F(PropertyRecordingTest, TwoValuesForOneKeyUsesLastValue) {$/;"	f
TEST_F	test/gtest_xml_output_unittest_.cc	/^TEST_F(SkippedTest, Skipped) {$/;"	f
TEST_F	test/gtest_xml_output_unittest_.cc	/^TEST_F(SuccessfulTest, Succeeds) {$/;"	f
TEST_FILTER	test/googletest-shuffle-test.py	/^TEST_FILTER = 'A*.A:A*.B:C*'$/;"	v
TEST_F_before_TEST_in_same_test_case	test/googletest-output-test_.cc	/^class TEST_F_before_TEST_in_same_test_case : public testing::Test {$/;"	c	file:
TEST_LIST	test/googletest-catch-exceptions-test.py	/^TEST_LIST = gtest_test_utils.Subprocess($/;"	v
TEST_P	include/gtest/gtest-param-test.h	/^#define TEST_P(/;"	d
TEST_P	samples/sample7_unittest.cc	/^TEST_P(PrimeTableTestSmpl7, CanGetNextPrime) {$/;"	f	namespace:__anon7
TEST_P	samples/sample7_unittest.cc	/^TEST_P(PrimeTableTestSmpl7, ReturnsFalseForNonPrimes) {$/;"	f	namespace:__anon7
TEST_P	samples/sample7_unittest.cc	/^TEST_P(PrimeTableTestSmpl7, ReturnsTrueForPrimes) {$/;"	f	namespace:__anon7
TEST_P	samples/sample8_unittest.cc	/^TEST_P(PrimeTableTest, CanGetNextPrime) {$/;"	f	namespace:__anon10
TEST_P	samples/sample8_unittest.cc	/^TEST_P(PrimeTableTest, ReturnsFalseForNonPrimes) {$/;"	f	namespace:__anon10
TEST_P	samples/sample8_unittest.cc	/^TEST_P(PrimeTableTest, ReturnsTrueForPrimes) {$/;"	f	namespace:__anon10
TEST_P	test/googletest-filter-unittest_.cc	/^TEST_P(ParamTest, TestX) {$/;"	f	namespace:__anon27
TEST_P	test/googletest-filter-unittest_.cc	/^TEST_P(ParamTest, TestY) {$/;"	f	namespace:__anon27
TEST_P	test/googletest-list-tests-unittest_.cc	/^TEST_P(ValueParamTest, TestA) {$/;"	f
TEST_P	test/googletest-list-tests-unittest_.cc	/^TEST_P(ValueParamTest, TestB) {$/;"	f
TEST_P	test/googletest-output-test_.cc	/^TEST_P(EmptyBasenameParamInst, Passes) { EXPECT_EQ(1, GetParam()); }$/;"	f
TEST_P	test/googletest-output-test_.cc	/^TEST_P(FailingParamTest, Fails) {$/;"	f
TEST_P	test/googletest-output-test_.cc	/^TEST_P(ParamTest, Failure) {$/;"	f
TEST_P	test/googletest-output-test_.cc	/^TEST_P(ParamTest, Success) {$/;"	f
TEST_P	test/googletest-param-test-invalid-name1-test_.cc	/^TEST_P(DummyTest, Dummy) {$/;"	f	namespace:__anon32
TEST_P	test/googletest-param-test-invalid-name2-test_.cc	/^TEST_P(DummyTest, Dummy) {$/;"	f	namespace:__anon39
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(CommentTest, TestsCorrectlyReportUnstreamableParams) {$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(CustomFunctionNamingTest, CustomTestNames) {}$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(CustomFunctorNamingTest, CustomTestNames) {}$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(CustomIntegerNamingTest, TestsReportCorrectNames) {$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(CustomLambdaNamingTest, CustomTestNames) {}$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(CustomStructNamingTest, TestsReportCorrectNames) {$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(ExternalGeneratorTest, ExternalGenerator) {$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(ExternalInstantiationTest, IsMultipleOf33) {$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(GeneratorEvaluationTest, GeneratorsEvaluatedInMain) {$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(InstantiationInMultipleTranslationUnitsTest, IsMultipleOf42) {$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(MultipleInstantiationTest, AllowsMultipleInstances) {$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(MyEnumTest, ChecksParamMoreThanZero) { EXPECT_GE(10, GetParam()); }$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(NamingTest, TestsReportCorrectNamesAndParameters) {$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(ParameterizedDerivedTest, SeesSequence) {$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(SeparateInstanceTest, TestsRunInSeparateInstances) {$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(StatefulNamingTest, TestsReportCorrectNames) {$/;"	f
TEST_P	test/googletest-param-test-test.cc	/^TEST_P(TestGenerationTest, TestsExpandedAndRun) {$/;"	f
TEST_P	test/gtest_repeat_test.cc	/^TEST_P(MyParamTest, ShouldPass) {$/;"	f	namespace:__anon31
TEST_P	test/gtest_unittest.cc	/^TEST_P(CodeLocationForTESTP, Verify) {$/;"	f	namespace:testing
TEST_P	test/gtest_xml_output_unittest_.cc	/^TEST_P(ValueParamTest, AnotherTestThatHasValueParamAttribute) {}$/;"	f
TEST_P	test/gtest_xml_output_unittest_.cc	/^TEST_P(ValueParamTest, HasValueParamAttribute) {}$/;"	f
TEST_REGEX	test/googletest-filter-unittest.py	/^TEST_REGEX = re.compile(r'^\\[\\s*RUN\\s*\\].*\\.(\\w+(\/\\w+)?)')$/;"	v
TEST_THREW_EXCEPTION	include/gtest/internal/gtest-death-test-internal.h	/^    TEST_THREW_EXCEPTION,$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_before_TEST_F_in_same_test_case	test/googletest-output-test_.cc	/^class TEST_before_TEST_F_in_same_test_case : public testing::Test {$/;"	c	file:
THOUSAND_TESTS_	test/gtest_test_macro_stack_footprint_test.cc	/^#define THOUSAND_TESTS_(/;"	d	file:
THREW	src/gtest-death-test.cc	/^enum DeathTestOutcome { IN_PROGRESS, DIED, LIVED, RETURNED, THREW };$/;"	e	enum:testing::internal::DeathTestOutcome	file:
THROW_ON_FAILURE	test/googletest-throw-on-failure-test.py	/^THROW_ON_FAILURE = 'gtest_throw_on_failure'$/;"	v
THROW_ON_FAILURE_ENV_VAR	test/googletest-break-on-failure-unittest.py	/^THROW_ON_FAILURE_ENV_VAR = 'GTEST_THROW_ON_FAILURE'$/;"	v
TOKEN_TABLE	scripts/pump.py	/^TOKEN_TABLE = [$/;"	v
TOTAL_SHARDS_ENV_VAR	test/googletest-filter-unittest.py	/^TOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'$/;"	v
TOTAL_SHARDS_ENV_VAR	test/googletest-shuffle-test.py	/^TOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'$/;"	v
TOTAL_SHARDS_ENV_VAR	test/gtest_xml_output_unittest.py	/^TOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'$/;"	v
TPRVector	test/gtest_unittest.cc	/^  typedef std::vector<TestPartResult> TPRVector;$/;"	t	class:__anon40::TestResultTest	file:
TYPED_TEST	include/gtest/gtest-typed-test.h	/^# define TYPED_TEST(/;"	d
TYPED_TEST	samples/sample6_unittest.cc	/^TYPED_TEST(PrimeTableTest, CanGetNextPrime) {$/;"	f	namespace:__anon1
TYPED_TEST	samples/sample6_unittest.cc	/^TYPED_TEST(PrimeTableTest, ReturnsFalseForNonPrimes) {$/;"	f	namespace:__anon1
TYPED_TEST	samples/sample6_unittest.cc	/^TYPED_TEST(PrimeTableTest, ReturnsTrueForPrimes) {$/;"	f	namespace:__anon1
TYPED_TEST	test/googletest-list-tests-unittest_.cc	/^TYPED_TEST(TypedTest, TestA) {$/;"	f
TYPED_TEST	test/googletest-list-tests-unittest_.cc	/^TYPED_TEST(TypedTest, TestB) {$/;"	f
TYPED_TEST	test/googletest-output-test_.cc	/^TYPED_TEST(ATypedDeathTest, ShouldRunFirst) {$/;"	f
TYPED_TEST	test/googletest-output-test_.cc	/^TYPED_TEST(TypedTest, Failure) {$/;"	f
TYPED_TEST	test/googletest-output-test_.cc	/^TYPED_TEST(TypedTest, Success) {$/;"	f
TYPED_TEST	test/googletest-output-test_.cc	/^TYPED_TEST(TypedTestWithNames, Failure) { FAIL(); }$/;"	f
TYPED_TEST	test/googletest-output-test_.cc	/^TYPED_TEST(TypedTestWithNames, Success) {}$/;"	f
TYPED_TEST	test/googletest-port-test.cc	/^TYPED_TEST(RETest, FullMatchWorks) {$/;"	f	namespace:testing::internal
TYPED_TEST	test/googletest-port-test.cc	/^TYPED_TEST(RETest, ImplicitConstructorWorks) {$/;"	f	namespace:testing::internal
TYPED_TEST	test/googletest-port-test.cc	/^TYPED_TEST(RETest, PartialMatchWorks) {$/;"	f	namespace:testing::internal
TYPED_TEST	test/googletest-port-test.cc	/^TYPED_TEST(RETest, RejectsInvalidRegex) {$/;"	f	namespace:testing::internal
TYPED_TEST	test/gtest-typed-test_test.cc	/^TYPED_TEST(CommonTest, ValuesAreCorrect) {$/;"	f
TYPED_TEST	test/gtest-typed-test_test.cc	/^TYPED_TEST(CommonTest, ValuesAreStillCorrect) {$/;"	f
TYPED_TEST	test/gtest-typed-test_test.cc	/^TYPED_TEST(NumericTest, DefaultIsZero) {$/;"	f	namespace:library1
TYPED_TEST	test/gtest-typed-test_test.cc	/^TYPED_TEST(TypedTest1, A) {}$/;"	f
TYPED_TEST	test/gtest-typed-test_test.cc	/^TYPED_TEST(TypedTest2, A) {}$/;"	f
TYPED_TEST	test/gtest-typed-test_test.cc	/^TYPED_TEST(TypedTestWithNames, TestSuiteName) {$/;"	f
TYPED_TEST	test/gtest-unittest-api_test.cc	/^TYPED_TEST(TestSuiteWithCommentTest, Dummy) {}$/;"	f	namespace:testing::internal
TYPED_TEST	test/gtest_unittest.cc	/^TYPED_TEST(CodeLocationForTYPEDTEST, Verify) {$/;"	f	namespace:testing
TYPED_TEST	test/gtest_unittest.cc	/^TYPED_TEST(DISABLED_TypedTest, ShouldNotRun) {$/;"	f	namespace:__anon40
TYPED_TEST	test/gtest_unittest.cc	/^TYPED_TEST(TypedTest, DISABLED_ShouldNotRun) {$/;"	f	namespace:__anon40
TYPED_TEST	test/gtest_xml_output_unittest_.cc	/^TYPED_TEST(TypedTest, HasTypeParamAttribute) {}$/;"	f
TYPED_TEST_CASE	include/gtest/gtest-typed-test.h	/^#define TYPED_TEST_CASE /;"	d
TYPED_TEST_CASE_P	include/gtest/gtest-typed-test.h	/^#define TYPED_TEST_CASE_P /;"	d
TYPED_TEST_P	include/gtest/gtest-typed-test.h	/^#define TYPED_TEST_P(/;"	d
TYPED_TEST_P	samples/sample6_unittest.cc	/^TYPED_TEST_P(PrimeTableTest2, CanGetNextPrime) {$/;"	f	namespace:__anon1
TYPED_TEST_P	samples/sample6_unittest.cc	/^TYPED_TEST_P(PrimeTableTest2, ReturnsFalseForNonPrimes) {$/;"	f	namespace:__anon1
TYPED_TEST_P	samples/sample6_unittest.cc	/^TYPED_TEST_P(PrimeTableTest2, ReturnsTrueForPrimes) {$/;"	f	namespace:__anon1
TYPED_TEST_P	test/googletest-list-tests-unittest_.cc	/^TYPED_TEST_P(TypeParamTest, TestA) {$/;"	f
TYPED_TEST_P	test/googletest-list-tests-unittest_.cc	/^TYPED_TEST_P(TypeParamTest, TestB) {$/;"	f
TYPED_TEST_P	test/googletest-output-test_.cc	/^TYPED_TEST_P(ATypeParamDeathTest, ShouldRunFirst) {$/;"	f
TYPED_TEST_P	test/googletest-output-test_.cc	/^TYPED_TEST_P(TypedTestP, Failure) {$/;"	f
TYPED_TEST_P	test/googletest-output-test_.cc	/^TYPED_TEST_P(TypedTestP, Success) {$/;"	f
TYPED_TEST_P	test/gtest-typed-test_test.cc	/^TYPED_TEST_P(DerivedTest, ValuesAreCorrect) {$/;"	f
TYPED_TEST_P	test/gtest-typed-test_test.cc	/^TYPED_TEST_P(DerivedTest, ValuesAreStillCorrect) {$/;"	f
TYPED_TEST_P	test/gtest-typed-test_test.cc	/^TYPED_TEST_P(NumericTest, DefaultIsZero) {$/;"	f	namespace:library2
TYPED_TEST_P	test/gtest-typed-test_test.cc	/^TYPED_TEST_P(NumericTest, ZeroIsLessThanOne) {$/;"	f	namespace:library2
TYPED_TEST_P	test/gtest-typed-test_test.cc	/^TYPED_TEST_P(TrimmedTest, Test1) { EXPECT_STREQ("Test1", GetTestName()); }$/;"	f	namespace:library2
TYPED_TEST_P	test/gtest-typed-test_test.cc	/^TYPED_TEST_P(TrimmedTest, Test2) { EXPECT_STREQ("Test2", GetTestName()); }$/;"	f	namespace:library2
TYPED_TEST_P	test/gtest-typed-test_test.cc	/^TYPED_TEST_P(TrimmedTest, Test3) { EXPECT_STREQ("Test3", GetTestName()); }$/;"	f	namespace:library2
TYPED_TEST_P	test/gtest-typed-test_test.cc	/^TYPED_TEST_P(TrimmedTest, Test4) { EXPECT_STREQ("Test4", GetTestName()); }$/;"	f	namespace:library2
TYPED_TEST_P	test/gtest-typed-test_test.cc	/^TYPED_TEST_P(TrimmedTest, Test5) { EXPECT_STREQ("Test5", GetTestName()); }$/;"	f	namespace:library2
TYPED_TEST_P	test/gtest-typed-test_test.cc	/^TYPED_TEST_P(TypeParametrizedTestWithNames, TestSuiteName) {$/;"	f
TYPED_TEST_P	test/gtest-typed-test_test.cc	/^TYPED_TEST_P(TypedTestP1, A) {}$/;"	f
TYPED_TEST_P	test/gtest-typed-test_test.cc	/^TYPED_TEST_P(TypedTestP1, B) {}$/;"	f
TYPED_TEST_P	test/gtest-typed-test_test.cc	/^TYPED_TEST_P(TypedTestP2, A) {}$/;"	f
TYPED_TEST_P	test/gtest-typed-test_test.h	/^TYPED_TEST_P(ContainerTest, CanBeDefaultConstructed) {$/;"	f
TYPED_TEST_P	test/gtest-typed-test_test.h	/^TYPED_TEST_P(ContainerTest, InitialSizeIsZero) {$/;"	f
TYPED_TEST_P	test/gtest_unittest.cc	/^TYPED_TEST_P(CodeLocationForTYPEDTESTP, Verify) {$/;"	f	namespace:testing
TYPED_TEST_P	test/gtest_unittest.cc	/^TYPED_TEST_P(DISABLED_TypedTestP, ShouldNotRun) {$/;"	f	namespace:__anon40
TYPED_TEST_P	test/gtest_unittest.cc	/^TYPED_TEST_P(TypedTestP, DISABLED_ShouldNotRun) {$/;"	f	namespace:__anon40
TYPED_TEST_P	test/gtest_xml_output_unittest_.cc	/^TYPED_TEST_P(TypeParameterizedTestSuite, HasTypeParamAttribute) {}$/;"	f
TYPED_TEST_SUITE	include/gtest/gtest-typed-test.h	/^#define TYPED_TEST_SUITE(/;"	d
TYPED_TEST_SUITE_P	include/gtest/gtest-typed-test.h	/^#define TYPED_TEST_SUITE_P(/;"	d
Tail	include/gtest/internal/gtest-type-util.h	/^      T14> Tail;$/;"	t	struct:testing::internal::Templates14
Tail	include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Templates27
Tail	include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Templates26
Tail	include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Templates25
Tail	include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Templates24
Tail	include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Templates23
Tail	include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Templates22
Tail	include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Templates21
Tail	include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Templates20
Tail	include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Templates19
Tail	include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Templates18
Tail	include/gtest/internal/gtest-type-util.h	/^      T15, T16, T17> Tail;$/;"	t	struct:testing::internal::Templates17
Tail	include/gtest/internal/gtest-type-util.h	/^      T15, T16> Tail;$/;"	t	struct:testing::internal::Templates16
Tail	include/gtest/internal/gtest-type-util.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Templates15
Tail	include/gtest/internal/gtest-type-util.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Types15
Tail	include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> Tail;$/;"	t	struct:testing::internal::Types28
Tail	include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Types27
Tail	include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Types26
Tail	include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Types25
Tail	include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Types24
Tail	include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Types23
Tail	include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Types22
Tail	include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Types21
Tail	include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Types20
Tail	include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Types19
Tail	include/gtest/internal/gtest-type-util.h	/^      T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Types18
Tail	include/gtest/internal/gtest-type-util.h	/^      T16, T17> Tail;$/;"	t	struct:testing::internal::Types17
Tail	include/gtest/internal/gtest-type-util.h	/^      T16> Tail;$/;"	t	struct:testing::internal::Types16
Tail	include/gtest/internal/gtest-type-util.h	/^      T28> Tail;$/;"	t	struct:testing::internal::Templates28
Tail	include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Templates41
Tail	include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Templates40
Tail	include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Templates39
Tail	include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Templates38
Tail	include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Templates37
Tail	include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Templates36
Tail	include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Templates35
Tail	include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Templates34
Tail	include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Templates33
Tail	include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Templates32
Tail	include/gtest/internal/gtest-type-util.h	/^      T29, T30, T31> Tail;$/;"	t	struct:testing::internal::Templates31
Tail	include/gtest/internal/gtest-type-util.h	/^      T29, T30> Tail;$/;"	t	struct:testing::internal::Templates30
Tail	include/gtest/internal/gtest-type-util.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Templates29
Tail	include/gtest/internal/gtest-type-util.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Types29
Tail	include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42> Tail;$/;"	t	struct:testing::internal::Types42
Tail	include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Types41
Tail	include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Types40
Tail	include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Types39
Tail	include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Types38
Tail	include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Types37
Tail	include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Types36
Tail	include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Types35
Tail	include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Types34
Tail	include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Types33
Tail	include/gtest/internal/gtest-type-util.h	/^      T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Types32
Tail	include/gtest/internal/gtest-type-util.h	/^      T30, T31> Tail;$/;"	t	struct:testing::internal::Types31
Tail	include/gtest/internal/gtest-type-util.h	/^      T30> Tail;$/;"	t	struct:testing::internal::Types30
Tail	include/gtest/internal/gtest-type-util.h	/^      T42> Tail;$/;"	t	struct:testing::internal::Templates42
Tail	include/gtest/internal/gtest-type-util.h	/^      T43, T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Templates50
Tail	include/gtest/internal/gtest-type-util.h	/^      T43, T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Templates49
Tail	include/gtest/internal/gtest-type-util.h	/^      T43, T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Templates48
Tail	include/gtest/internal/gtest-type-util.h	/^      T43, T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Templates47
Tail	include/gtest/internal/gtest-type-util.h	/^      T43, T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Templates46
Tail	include/gtest/internal/gtest-type-util.h	/^      T43, T44, T45> Tail;$/;"	t	struct:testing::internal::Templates45
Tail	include/gtest/internal/gtest-type-util.h	/^      T43, T44> Tail;$/;"	t	struct:testing::internal::Templates44
Tail	include/gtest/internal/gtest-type-util.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Templates43
Tail	include/gtest/internal/gtest-type-util.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Types43
Tail	include/gtest/internal/gtest-type-util.h	/^      T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Types50
Tail	include/gtest/internal/gtest-type-util.h	/^      T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Types49
Tail	include/gtest/internal/gtest-type-util.h	/^      T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Types48
Tail	include/gtest/internal/gtest-type-util.h	/^      T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Types47
Tail	include/gtest/internal/gtest-type-util.h	/^      T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Types46
Tail	include/gtest/internal/gtest-type-util.h	/^      T44, T45> Tail;$/;"	t	struct:testing::internal::Types45
Tail	include/gtest/internal/gtest-type-util.h	/^      T44> Tail;$/;"	t	struct:testing::internal::Types44
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Templates0 Tail;$/;"	t	struct:testing::internal::Templates1
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Templates10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Templates11
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Templates11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Templates12
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Templates12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Templates13
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Templates1<T2> Tail;$/;"	t	struct:testing::internal::Templates2
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Templates2<T2, T3> Tail;$/;"	t	struct:testing::internal::Templates3
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Templates3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Templates4
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Templates4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Templates5
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Templates5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Templates6
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Templates6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Templates7
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Templates7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Templates8
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Templates8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Templates9
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Templates9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Templates10
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Types0 Tail;$/;"	t	struct:testing::internal::Types1
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Types10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Types11
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Types11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Types12
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Types12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Types13
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Types13<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Tail;$/;"	t	struct:testing::internal::Types14
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Types1<T2> Tail;$/;"	t	struct:testing::internal::Types2
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Types2<T2, T3> Tail;$/;"	t	struct:testing::internal::Types3
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Types3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Types4
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Types4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Types5
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Types5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Types6
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Types6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Types7
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Types7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Types8
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Types8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Types9
Tail	include/gtest/internal/gtest-type-util.h	/^  typedef Types9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Types10
TearDown	include/gtest/gtest.h	/^  virtual void TearDown() {}$/;"	f	class:testing::Environment
TearDown	src/gtest.cc	/^void Test::TearDown() {$/;"	f	class:testing::Test
TearDown	test/googletest-catch-exceptions-test_.cc	/^  virtual void TearDown() { RaiseException(42, 0, 0, NULL); }$/;"	f	class:SehExceptionInTearDownTest
TearDown	test/gtest_unittest.cc	/^  virtual void TearDown() {$/;"	f	class:testing::FlagfileTest
TearDownEnvironment	src/gtest.cc	/^static void TearDownEnvironment(Environment* env) { env->TearDown(); }$/;"	f	namespace:testing::internal
TearDownExecuted	test/googletest-param-test-test.cc	/^  void TearDownExecuted() { tear_down_count_++; }$/;"	f	class:TestGenerationEnvironment
TearDownTestCase	include/gtest/gtest.h	/^  static void TearDownTestCase() {}$/;"	f	class:testing::Test
TearDownTestCase	test/gtest_unittest.cc	/^  static void TearDownTestCase() {$/;"	f	class:testing::SetUpTestCaseTest
TearDownTestSuite	include/gtest/gtest.h	/^  static void TearDownTestSuite() {}$/;"	f	class:testing::Test
TearDownTestSuite	test/googletest-catch-exceptions-test_.cc	/^  static void TearDownTestSuite() { RaiseException(42, 0, 0, NULL); }$/;"	f	class:SehExceptionInTearDownTestSuiteTest
TearDownTestSuite	test/googletest-catch-exceptions-test_.cc	/^  static void TearDownTestSuite() {$/;"	f	class:CxxExceptionInConstructorTest
TearDownTestSuite	test/googletest-catch-exceptions-test_.cc	/^  static void TearDownTestSuite() {$/;"	f	class:CxxExceptionInSetUpTest
TearDownTestSuite	test/googletest-catch-exceptions-test_.cc	/^  static void TearDownTestSuite() {$/;"	f	class:CxxExceptionInSetUpTestSuiteTest
TearDownTestSuite	test/googletest-catch-exceptions-test_.cc	/^  static void TearDownTestSuite() {$/;"	f	class:CxxExceptionInTearDownTest
TearDownTestSuite	test/googletest-catch-exceptions-test_.cc	/^  static void TearDownTestSuite() {$/;"	f	class:CxxExceptionInTearDownTestSuiteTest
TearDownTestSuite	test/googletest-catch-exceptions-test_.cc	/^  static void TearDownTestSuite() {$/;"	f	class:CxxExceptionInTestBodyTest
TearDownTestSuite	test/googletest-death-test-test.cc	/^  static void TearDownTestSuite() {$/;"	f	class:__anon28::MacroLogicDeathTest
TearDownTestSuite	test/googletest-listener-test.cc	/^  static void TearDownTestSuite() {$/;"	f	class:testing::internal::ListenerTest
TearDownTestSuite	test/googletest-output-test_.cc	/^  static void TearDownTestSuite() {$/;"	f	class:DynamicFixture
TearDownTestSuite	test/googletest-param-test-test.cc	/^  static void TearDownTestSuite() {$/;"	f	class:SeparateInstanceTest
TearDownTestSuite	test/googletest-param-test-test.cc	/^  static void TearDownTestSuite() {$/;"	f	class:TestGenerationTest
TearDownTestSuite	test/gtest-typed-test_test.cc	/^  static void TearDownTestSuite() {$/;"	f	class:CommonTest
TearDownTestSuite	test/gtest_unittest.cc	/^  static void TearDownTestSuite() {$/;"	f	class:__anon40::DisabledTestsTest
TearDownTestSuite	test/gtest_unittest.cc	/^  static void TearDownTestSuite() {$/;"	f	class:__anon40::GTestFlagSaverTest
TearDownTestSuite	test/gtest_unittest.cc	/^  static void TearDownTestSuite() {$/;"	f	class:testing::CurrentTestInfoTest
TearDownTestSuite	test/gtest_unittest.cc	/^  static void TearDownTestSuite() {$/;"	f	class:testing::SetUpTestSuiteTest
TearDownTestSuite	test/gtest_xml_output_unittest_.cc	/^  static void TearDownTestSuite() {$/;"	f	class:PropertyRecordingTest
TempDir	src/gtest.cc	/^std::string TempDir() {$/;"	f	namespace:testing
TemplateSel	include/gtest/internal/gtest-type-util.h	/^struct TemplateSel {$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates {$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, NoneT,$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, NoneT,$/;"	s	namespace:testing::internal
Templates	include/gtest/internal/gtest-type-util.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing::internal
Templates0	include/gtest/internal/gtest-type-util.h	/^struct Templates0 {};$/;"	s	namespace:testing::internal
Templates1	include/gtest/internal/gtest-type-util.h	/^struct Templates1 {$/;"	s	namespace:testing::internal
Templates10	include/gtest/internal/gtest-type-util.h	/^struct Templates10 {$/;"	s	namespace:testing::internal
Templates11	include/gtest/internal/gtest-type-util.h	/^struct Templates11 {$/;"	s	namespace:testing::internal
Templates12	include/gtest/internal/gtest-type-util.h	/^struct Templates12 {$/;"	s	namespace:testing::internal
Templates13	include/gtest/internal/gtest-type-util.h	/^struct Templates13 {$/;"	s	namespace:testing::internal
Templates14	include/gtest/internal/gtest-type-util.h	/^struct Templates14 {$/;"	s	namespace:testing::internal
Templates15	include/gtest/internal/gtest-type-util.h	/^struct Templates15 {$/;"	s	namespace:testing::internal
Templates16	include/gtest/internal/gtest-type-util.h	/^struct Templates16 {$/;"	s	namespace:testing::internal
Templates17	include/gtest/internal/gtest-type-util.h	/^struct Templates17 {$/;"	s	namespace:testing::internal
Templates18	include/gtest/internal/gtest-type-util.h	/^struct Templates18 {$/;"	s	namespace:testing::internal
Templates19	include/gtest/internal/gtest-type-util.h	/^struct Templates19 {$/;"	s	namespace:testing::internal
Templates2	include/gtest/internal/gtest-type-util.h	/^struct Templates2 {$/;"	s	namespace:testing::internal
Templates20	include/gtest/internal/gtest-type-util.h	/^struct Templates20 {$/;"	s	namespace:testing::internal
Templates21	include/gtest/internal/gtest-type-util.h	/^struct Templates21 {$/;"	s	namespace:testing::internal
Templates22	include/gtest/internal/gtest-type-util.h	/^struct Templates22 {$/;"	s	namespace:testing::internal
Templates23	include/gtest/internal/gtest-type-util.h	/^struct Templates23 {$/;"	s	namespace:testing::internal
Templates24	include/gtest/internal/gtest-type-util.h	/^struct Templates24 {$/;"	s	namespace:testing::internal
Templates25	include/gtest/internal/gtest-type-util.h	/^struct Templates25 {$/;"	s	namespace:testing::internal
Templates26	include/gtest/internal/gtest-type-util.h	/^struct Templates26 {$/;"	s	namespace:testing::internal
Templates27	include/gtest/internal/gtest-type-util.h	/^struct Templates27 {$/;"	s	namespace:testing::internal
Templates28	include/gtest/internal/gtest-type-util.h	/^struct Templates28 {$/;"	s	namespace:testing::internal
Templates29	include/gtest/internal/gtest-type-util.h	/^struct Templates29 {$/;"	s	namespace:testing::internal
Templates3	include/gtest/internal/gtest-type-util.h	/^struct Templates3 {$/;"	s	namespace:testing::internal
Templates30	include/gtest/internal/gtest-type-util.h	/^struct Templates30 {$/;"	s	namespace:testing::internal
Templates31	include/gtest/internal/gtest-type-util.h	/^struct Templates31 {$/;"	s	namespace:testing::internal
Templates32	include/gtest/internal/gtest-type-util.h	/^struct Templates32 {$/;"	s	namespace:testing::internal
Templates33	include/gtest/internal/gtest-type-util.h	/^struct Templates33 {$/;"	s	namespace:testing::internal
Templates34	include/gtest/internal/gtest-type-util.h	/^struct Templates34 {$/;"	s	namespace:testing::internal
Templates35	include/gtest/internal/gtest-type-util.h	/^struct Templates35 {$/;"	s	namespace:testing::internal
Templates36	include/gtest/internal/gtest-type-util.h	/^struct Templates36 {$/;"	s	namespace:testing::internal
Templates37	include/gtest/internal/gtest-type-util.h	/^struct Templates37 {$/;"	s	namespace:testing::internal
Templates38	include/gtest/internal/gtest-type-util.h	/^struct Templates38 {$/;"	s	namespace:testing::internal
Templates39	include/gtest/internal/gtest-type-util.h	/^struct Templates39 {$/;"	s	namespace:testing::internal
Templates4	include/gtest/internal/gtest-type-util.h	/^struct Templates4 {$/;"	s	namespace:testing::internal
Templates40	include/gtest/internal/gtest-type-util.h	/^struct Templates40 {$/;"	s	namespace:testing::internal
Templates41	include/gtest/internal/gtest-type-util.h	/^struct Templates41 {$/;"	s	namespace:testing::internal
Templates42	include/gtest/internal/gtest-type-util.h	/^struct Templates42 {$/;"	s	namespace:testing::internal
Templates43	include/gtest/internal/gtest-type-util.h	/^struct Templates43 {$/;"	s	namespace:testing::internal
Templates44	include/gtest/internal/gtest-type-util.h	/^struct Templates44 {$/;"	s	namespace:testing::internal
Templates45	include/gtest/internal/gtest-type-util.h	/^struct Templates45 {$/;"	s	namespace:testing::internal
Templates46	include/gtest/internal/gtest-type-util.h	/^struct Templates46 {$/;"	s	namespace:testing::internal
Templates47	include/gtest/internal/gtest-type-util.h	/^struct Templates47 {$/;"	s	namespace:testing::internal
Templates48	include/gtest/internal/gtest-type-util.h	/^struct Templates48 {$/;"	s	namespace:testing::internal
Templates49	include/gtest/internal/gtest-type-util.h	/^struct Templates49 {$/;"	s	namespace:testing::internal
Templates5	include/gtest/internal/gtest-type-util.h	/^struct Templates5 {$/;"	s	namespace:testing::internal
Templates50	include/gtest/internal/gtest-type-util.h	/^struct Templates50 {$/;"	s	namespace:testing::internal
Templates6	include/gtest/internal/gtest-type-util.h	/^struct Templates6 {$/;"	s	namespace:testing::internal
Templates7	include/gtest/internal/gtest-type-util.h	/^struct Templates7 {$/;"	s	namespace:testing::internal
Templates8	include/gtest/internal/gtest-type-util.h	/^struct Templates8 {$/;"	s	namespace:testing::internal
Templates9	include/gtest/internal/gtest-type-util.h	/^struct Templates9 {$/;"	s	namespace:testing::internal
TerminateHandler	test/googletest-catch-exceptions-test_.cc	/^void TerminateHandler() {$/;"	f
TerminateHandler	test/googletest-throw-on-failure-test_.cc	/^void TerminateHandler() {$/;"	f
TersePrintPrefixToStrings	include/gtest/gtest-printers.h	/^void TersePrintPrefixToStrings(const Tuple& t,$/;"	f	namespace:testing::internal
TersePrintPrefixToStrings	include/gtest/gtest-printers.h	/^void TersePrintPrefixToStrings(const Tuple&, std::integral_constant<size_t, 0>,$/;"	f	namespace:testing::internal
TersePrinter	samples/sample9_unittest.cc	/^class TersePrinter : public EmptyTestEventListener {$/;"	c	namespace:__anon3	file:
Test	include/gtest/gtest.h	/^class GTEST_API_ Test {$/;"	c	namespace:testing
Test	src/gtest.cc	/^Test::Test()$/;"	f	class:testing::Test
Test	test/gtest_unittest.cc	/^class Test {};$/;"	c	namespace:my_namespace::testing	file:
TestAssertEqualsUncopyable	test/gtest_unittest.cc	/^void TestAssertEqualsUncopyable() {$/;"	f	namespace:__anon40
TestAssertNonPositive	test/gtest_unittest.cc	/^void TestAssertNonPositive() {$/;"	f	namespace:__anon40
TestBodyExecuted	test/googletest-param-test-test.cc	/^  void TestBodyExecuted() { test_body_count_++; }$/;"	f	class:TestGenerationEnvironment
TestCase	test/gtest_test_utils.py	/^TestCase = _test_module.TestCase  # pylint: disable=C6409$/;"	v
TestDeleted	test/googletest-death-test-test.cc	/^  bool TestDeleted() const { return test_deleted_; }$/;"	f	class:__anon28::MockDeathTestFactory
TestDisabled	include/gtest/gtest.h	/^  static bool TestDisabled(const TestInfo* test_info) {$/;"	f	class:testing::TestSuite
TestEq1	test/googletest-output-test_.cc	/^void TestEq1(int x) {$/;"	f
TestEq1	test/gtest_unittest.cc	/^void TestEq1(int x) {$/;"	f	namespace:__anon40
TestEventListener	include/gtest/gtest.h	/^class TestEventListener {$/;"	c	namespace:testing
TestEventListeners	include/gtest/gtest.h	/^class GTEST_API_ TestEventListeners {$/;"	c	namespace:testing
TestEventListeners	src/gtest.cc	/^TestEventListeners::TestEventListeners()$/;"	f	class:testing::TestEventListeners
TestEventListenersAccessor	test/gtest_unittest.cc	/^class TestEventListenersAccessor {$/;"	c	namespace:testing::internal	file:
TestEventRepeater	src/gtest.cc	/^  TestEventRepeater() : forwarding_enabled_(true) {}$/;"	f	class:testing::internal::TestEventRepeater
TestEventRepeater	src/gtest.cc	/^class TestEventRepeater : public TestEventListener {$/;"	c	namespace:testing::internal	file:
TestException	test/googletest-death-test_ex_test.cc	/^class TestException : public std::exception {$/;"	c	file:
TestExists	include/gtest/internal/gtest-internal.h	/^  bool TestExists(const std::string& test_name) const {$/;"	f	class:testing::internal::TypedTestSuitePState
TestExitCodeAndOutput	test/googletest-param-test-invalid-name1-test.py	/^def TestExitCodeAndOutput(command):$/;"	f
TestExitCodeAndOutput	test/googletest-param-test-invalid-name2-test.py	/^def TestExitCodeAndOutput(command):$/;"	f
TestExitCodeAndOutput	test/googletest-uninitialized-test.py	/^def TestExitCodeAndOutput(command):$/;"	f
TestExitMacros	test/googletest-death-test-test.cc	/^static void TestExitMacros() {$/;"	f	namespace:__anon28
TestFactoryBase	include/gtest/internal/gtest-internal.h	/^  TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
TestFactoryBase	include/gtest/internal/gtest-internal.h	/^class TestFactoryBase {$/;"	c	namespace:testing::internal
TestFactoryImpl	include/gtest/internal/gtest-internal.h	/^class TestFactoryImpl : public TestFactoryBase {$/;"	c	namespace:testing::internal
TestFailed	include/gtest/gtest.h	/^  static bool TestFailed(const TestInfo* test_info) {$/;"	f	class:testing::TestSuite
TestFailureThrowsRuntimeError	test/gtest_throw_on_failure_ex_test.cc	/^void TestFailureThrowsRuntimeError() {$/;"	f
TestFlag	test/googletest-env-var-test.py	/^def TestFlag(flag, test_val, default_val):$/;"	f
TestForDeathTest	test/googletest-death-test-test.cc	/^  TestForDeathTest() : original_dir_(FilePath::GetCurrentDir()) {}$/;"	f	class:__anon28::TestForDeathTest
TestForDeathTest	test/googletest-death-test-test.cc	/^class TestForDeathTest : public testing::Test {$/;"	c	namespace:__anon28	file:
TestGTestReferenceToConst	test/gtest_unittest.cc	/^void TestGTestReferenceToConst() {$/;"	f
TestGTestRemoveReferenceAndConst	test/gtest_unittest.cc	/^void TestGTestRemoveReferenceAndConst() {$/;"	f
TestGenerationEnvironment	test/googletest-param-test-test.cc	/^  TestGenerationEnvironment() : fixture_constructor_count_(0), set_up_count_(0),$/;"	f	class:TestGenerationEnvironment	file:
TestGenerationEnvironment	test/googletest-param-test-test.cc	/^class TestGenerationEnvironment : public ::testing::Environment {$/;"	c	file:
TestGenerationTest	test/googletest-param-test-test.cc	/^  TestGenerationTest() {$/;"	f	class:TestGenerationTest
TestGenerationTest	test/googletest-param-test-test.cc	/^class TestGenerationTest : public TestWithParam<int> {$/;"	c	file:
TestHelpFlag	test/gtest_help_test.py	/^  def TestHelpFlag(self, flag):$/;"	m	class:GTestHelpTest
TestInfo	include/gtest/gtest.h	/^class GTEST_API_ TestInfo {$/;"	c	namespace:testing
TestInfo	include/gtest/internal/gtest-param-util.h	/^    TestInfo(const char* a_test_suite_base_name, const char* a_test_base_name,$/;"	f	struct:testing::internal::ParameterizedTestSuiteInfo::TestInfo
TestInfo	include/gtest/internal/gtest-param-util.h	/^  struct TestInfo {$/;"	s	class:testing::internal::ParameterizedTestSuiteInfo
TestInfo	src/gtest.cc	/^TestInfo::TestInfo(const std::string& a_test_suite_name,$/;"	f	class:testing::TestInfo
TestInfoTest	test/gtest_unittest.cc	/^class TestInfoTest : public Test {$/;"	c	namespace:testing	file:
TestLifeCycleTest	test/gtest_unittest.cc	/^  TestLifeCycleTest() { count_++; }$/;"	f	class:__anon42::TestLifeCycleTest
TestLifeCycleTest	test/gtest_unittest.cc	/^class TestLifeCycleTest : public Test {$/;"	c	namespace:__anon42	file:
TestListener	test/gtest_unittest.cc	/^  TestListener() : on_start_counter_(nullptr), is_destroyed_(nullptr) {}$/;"	f	class:TestListener
TestListener	test/gtest_unittest.cc	/^  TestListener(int* on_start_counter, bool* is_destroyed)$/;"	f	class:TestListener
TestListener	test/gtest_unittest.cc	/^class TestListener : public EmptyTestEventListener {$/;"	c	file:
TestMetaFactory	include/gtest/internal/gtest-param-util.h	/^  TestMetaFactory() {}$/;"	f	class:testing::internal::TestMetaFactory
TestMetaFactory	include/gtest/internal/gtest-param-util.h	/^class TestMetaFactory$/;"	c	namespace:testing::internal
TestMetaFactoryBase	include/gtest/internal/gtest-param-util.h	/^class TestMetaFactoryBase {$/;"	c	namespace:testing::internal
TestNameIs	src/gtest.cc	/^  explicit TestNameIs(const char* name)$/;"	f	class:testing::__anon16::TestNameIs
TestNameIs	src/gtest.cc	/^class TestNameIs {$/;"	c	namespace:testing::__anon16	file:
TestNamePrinter	test/googletest-shuffle-test_.cc	/^class TestNamePrinter : public EmptyTestEventListener {$/;"	c	namespace:__anon34	file:
TestNonHelpFlag	test/gtest_help_test.py	/^  def TestNonHelpFlag(self, flag):$/;"	m	class:GTestHelpTest
TestNotEmpty	include/gtest/internal/gtest-param-util.h	/^void TestNotEmpty() {$/;"	f	namespace:testing::internal
TestNotEmpty	include/gtest/internal/gtest-param-util.h	/^void TestNotEmpty(const T&) {}$/;"	f	namespace:testing::internal
TestParamInfo	include/gtest/internal/gtest-param-util.h	/^  TestParamInfo(const ParamType& a_param, size_t an_index) :$/;"	f	struct:testing::TestParamInfo
TestParamInfo	include/gtest/internal/gtest-param-util.h	/^struct TestParamInfo {$/;"	s	namespace:testing
TestParsingFlags	test/gtest_unittest.cc	/^  static void TestParsingFlags(int argc1, const CharType** argv1,$/;"	f	class:testing::ParseFlagsTest
TestPartFatallyFailed	src/gtest.cc	/^static bool TestPartFatallyFailed(const TestPartResult& result) {$/;"	f	namespace:testing
TestPartNonfatallyFailed	src/gtest.cc	/^static bool TestPartNonfatallyFailed(const TestPartResult& result) {$/;"	f	namespace:testing
TestPartResult	include/gtest/gtest-test-part.h	/^  TestPartResult(Type a_type, const char* a_file_name, int a_line_number,$/;"	f	class:testing::TestPartResult
TestPartResult	include/gtest/gtest-test-part.h	/^class GTEST_API_ TestPartResult {$/;"	c	namespace:testing
TestPartResultArray	include/gtest/gtest-test-part.h	/^  TestPartResultArray() {}$/;"	f	class:testing::TestPartResultArray
TestPartResultArray	include/gtest/gtest-test-part.h	/^class GTEST_API_ TestPartResultArray {$/;"	c	namespace:testing
TestPartResultArrayDeathTest	test/googletest-test-part-test.cc	/^typedef TestPartResultArrayTest TestPartResultArrayDeathTest;$/;"	t	namespace:__anon24	file:
TestPartResultArrayTest	test/googletest-test-part-test.cc	/^  TestPartResultArrayTest()$/;"	f	class:__anon24::TestPartResultArrayTest
TestPartResultArrayTest	test/googletest-test-part-test.cc	/^class TestPartResultArrayTest : public Test {$/;"	c	namespace:__anon24	file:
TestPartResultReporterInterface	include/gtest/gtest-test-part.h	/^class GTEST_API_ TestPartResultReporterInterface {$/;"	c	namespace:testing
TestPartResultTest	test/googletest-test-part-test.cc	/^  TestPartResultTest()$/;"	f	class:__anon24::TestPartResultTest
TestPartResultTest	test/googletest-test-part-test.cc	/^class TestPartResultTest : public Test {$/;"	c	namespace:__anon24	file:
TestPartResultTypeToString	src/gtest.cc	/^static const char * TestPartResultTypeToString(TestPartResult::Type type) {$/;"	f	namespace:testing
TestPartSkipped	src/gtest.cc	/^static bool TestPartSkipped(const TestPartResult& result) {$/;"	f	namespace:testing
TestPassed	include/gtest/gtest.h	/^  static bool TestPassed(const TestInfo* test_info) {$/;"	f	class:testing::TestSuite
TestPropertiesAsJson	src/gtest.cc	/^std::string JsonUnitTestResultPrinter::TestPropertiesAsJson($/;"	f	class:testing::internal::JsonUnitTestResultPrinter
TestPropertiesAsXmlAttributes	src/gtest.cc	/^std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes($/;"	f	class:testing::internal::XmlUnitTestResultPrinter
TestProperty	include/gtest/gtest.h	/^  TestProperty(const std::string& a_key, const std::string& a_value) :$/;"	f	class:testing::TestProperty
TestProperty	include/gtest/gtest.h	/^class TestProperty {$/;"	c	namespace:testing
TestPropertyKeyIs	src/gtest-internal-inl.h	/^  explicit TestPropertyKeyIs(const std::string& key) : key_(key) {}$/;"	f	class:testing::internal::TestPropertyKeyIs
TestPropertyKeyIs	src/gtest-internal-inl.h	/^class TestPropertyKeyIs {$/;"	c	namespace:testing::internal
TestRepeat	test/gtest_repeat_test.cc	/^void TestRepeat(int repeat) {$/;"	f	namespace:__anon31
TestRepeatUnspecified	test/gtest_repeat_test.cc	/^void TestRepeatUnspecified() {$/;"	f	namespace:__anon31
TestRepeatWithEmptyFilter	test/gtest_repeat_test.cc	/^void TestRepeatWithEmptyFilter(int repeat) {$/;"	f	namespace:__anon31
TestRepeatWithFilterForFailedTests	test/gtest_repeat_test.cc	/^void TestRepeatWithFilterForFailedTests(int repeat) {$/;"	f	namespace:__anon31
TestRepeatWithFilterForSuccessfulTests	test/gtest_repeat_test.cc	/^void TestRepeatWithFilterForSuccessfulTests(int repeat) {$/;"	f	namespace:__anon31
TestReportable	include/gtest/gtest.h	/^  static bool TestReportable(const TestInfo* test_info) {$/;"	f	class:testing::TestSuite
TestReportableDisabled	include/gtest/gtest.h	/^  static bool TestReportableDisabled(const TestInfo* test_info) {$/;"	f	class:testing::TestSuite
TestResult	include/gtest/gtest.h	/^class GTEST_API_ TestResult {$/;"	c	namespace:testing
TestResult	src/gtest.cc	/^TestResult::TestResult()$/;"	f	class:testing::TestResult
TestResultAccessor	src/gtest-internal-inl.h	/^class TestResultAccessor {$/;"	c	namespace:testing::internal
TestResultDeathTest	test/gtest_unittest.cc	/^typedef TestResultTest TestResultDeathTest;$/;"	t	namespace:__anon40	file:
TestResultTest	test/gtest_unittest.cc	/^class TestResultTest : public Test {$/;"	c	namespace:__anon40	file:
TestRole	include/gtest/internal/gtest-death-test-internal.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	g	class:testing::internal::DeathTest
TestSehExceptions	test/googletest-catch-exceptions-test.py	/^    def TestSehExceptions(self, test_output):$/;"	m	class:CatchSehExceptionsTest
TestSize	test/gtest_unittest.cc	/^  void TestSize() {$/;"	f	class:__anon40::FloatingPointTest
TestSkipped	include/gtest/gtest.h	/^  static bool TestSkipped(const TestInfo* test_info) {$/;"	f	class:testing::TestSuite
TestSuite	include/gtest/gtest.h	/^class GTEST_API_ TestSuite {$/;"	c	namespace:testing
TestSuite	src/gtest.cc	/^TestSuite::TestSuite(const char* a_name, const char* a_type_param,$/;"	f	class:testing::TestSuite
TestSuiteFailed	src/gtest.cc	/^static bool TestSuiteFailed(const TestSuite* test_suite) {$/;"	f	namespace:testing::internal
TestSuiteNameIs	src/gtest.cc	/^  explicit TestSuiteNameIs(const std::string& name) : name_(name) {}$/;"	f	class:testing::internal::TestSuiteNameIs
TestSuiteNameIs	src/gtest.cc	/^class TestSuiteNameIs {$/;"	c	namespace:testing::internal	file:
TestSuitePassed	src/gtest.cc	/^static bool TestSuitePassed(const TestSuite* test_suite) {$/;"	f	namespace:testing::internal
TestSuiteWithCommentTest	test/gtest-unittest-api_test.cc	/^template <typename T> class TestSuiteWithCommentTest : public Test {};$/;"	c	namespace:testing::internal	file:
TestValues	test/gtest_unittest.cc	/^  struct TestValues {$/;"	s	class:__anon40::FloatingPointTest	file:
TestWithParam	include/gtest/gtest.h	/^class TestWithParam : public Test, public WithParamInterface<T> {$/;"	c	namespace:testing
TestingVector	test/gtest_unittest.cc	/^class TestingVector : public std::vector<int> {$/;"	c	file:
ThreadFunc	test/googletest-port-test.cc	/^void* ThreadFunc(void* data) {$/;"	f	namespace:testing::internal
ThreadFuncWithCLinkage	include/gtest/internal/gtest-port.h	/^extern "C" inline void* ThreadFuncWithCLinkage(void* thread) {$/;"	f	namespace:testing::internal
ThreadIdAndHandle	src/gtest-port.cc	/^  typedef std::pair<DWORD, HANDLE> ThreadIdAndHandle;$/;"	t	class:testing::internal::ThreadLocalRegistryImpl	file:
ThreadIdToThreadLocals	src/gtest-port.cc	/^  typedef std::map<DWORD, ThreadLocalValues> ThreadIdToThreadLocals;$/;"	t	class:testing::internal::ThreadLocalRegistryImpl	file:
ThreadLocal	include/gtest/internal/gtest-port.h	/^  ThreadLocal() : default_factory_(new DefaultValueHolderFactory()) {}$/;"	f	class:testing::internal::ThreadLocal
ThreadLocal	include/gtest/internal/gtest-port.h	/^  ThreadLocal() : value_() {}$/;"	f	class:testing::internal::ThreadLocal
ThreadLocal	include/gtest/internal/gtest-port.h	/^  ThreadLocal()$/;"	f	class:testing::internal::ThreadLocal
ThreadLocal	include/gtest/internal/gtest-port.h	/^  explicit ThreadLocal(const T& value) : value_(value) {}$/;"	f	class:testing::internal::ThreadLocal
ThreadLocal	include/gtest/internal/gtest-port.h	/^  explicit ThreadLocal(const T& value)$/;"	f	class:testing::internal::ThreadLocal
ThreadLocal	include/gtest/internal/gtest-port.h	/^class GTEST_API_ ThreadLocal {$/;"	c	namespace:testing::internal
ThreadLocal	include/gtest/internal/gtest-port.h	/^class ThreadLocal : public ThreadLocalBase {$/;"	c	namespace:testing::internal
ThreadLocalBase	include/gtest/internal/gtest-port.h	/^  ThreadLocalBase() {}$/;"	f	class:testing::internal::ThreadLocalBase
ThreadLocalBase	include/gtest/internal/gtest-port.h	/^class ThreadLocalBase {$/;"	c	namespace:testing::internal
ThreadLocalRegistry	include/gtest/internal/gtest-port.h	/^class GTEST_API_ ThreadLocalRegistry {$/;"	c	namespace:testing::internal
ThreadLocalRegistryImpl	src/gtest-port.cc	/^class ThreadLocalRegistryImpl {$/;"	c	namespace:testing::internal	file:
ThreadLocalValueHolderBase	include/gtest/internal/gtest-port.h	/^class ThreadLocalValueHolderBase {$/;"	c	namespace:testing::internal
ThreadLocalValues	src/gtest-port.cc	/^      ThreadLocalValues;$/;"	t	class:testing::internal::ThreadLocalRegistryImpl	file:
ThreadMain	src/gtest-port.cc	/^  static DWORD WINAPI ThreadMain(void* ptr) {$/;"	f	class:testing::internal::__anon20::ThreadWithParamSupport	file:
ThreadMainParam	src/gtest-port.cc	/^    ThreadMainParam(Runnable* runnable, Notification* thread_can_start)$/;"	f	struct:testing::internal::__anon20::ThreadWithParamSupport::ThreadMainParam
ThreadMainParam	src/gtest-port.cc	/^  struct ThreadMainParam {$/;"	s	class:testing::internal::__anon20::ThreadWithParamSupport	file:
ThreadParam	test/googletest-port-test.cc	/^typedef ThreadLocal<DestructorTracker>* ThreadParam;$/;"	t	namespace:testing::internal	file:
ThreadRoutine	test/googletest-output-test_.cc	/^static void ThreadRoutine(SpawnThreadNotifications* notifications) {$/;"	f	file:
ThreadSafeLazyInit	src/gtest-port.cc	/^void Mutex::ThreadSafeLazyInit() {$/;"	f	class:testing::internal::Mutex
ThreadWithParam	include/gtest/internal/gtest-port.h	/^  ThreadWithParam(UserThreadFunc* func, T param, Notification* thread_can_start)$/;"	f	class:testing::internal::ThreadWithParam
ThreadWithParam	include/gtest/internal/gtest-port.h	/^class ThreadWithParam : public ThreadWithParamBase {$/;"	c	namespace:testing::internal
ThreadWithParamBase	include/gtest/internal/gtest-port.h	/^class GTEST_API_ ThreadWithParamBase {$/;"	c	namespace:testing::internal
ThreadWithParamBase	include/gtest/internal/gtest-port.h	/^class ThreadWithParamBase {$/;"	c	namespace:testing::internal
ThreadWithParamBase	src/gtest-port.cc	/^ThreadWithParamBase::ThreadWithParamBase(Runnable *runnable,$/;"	f	class:testing::internal::ThreadWithParamBase
ThreadWithParamSupport	src/gtest-port.cc	/^class ThreadWithParamSupport : public ThreadWithParamBase {$/;"	c	namespace:testing::internal::__anon20	file:
ThreadWithScopedTrace	test/googletest-output-test_.cc	/^static void ThreadWithScopedTrace(CheckPoints* check_points) {$/;"	f	file:
ThrowAString	test/gtest_unittest.cc	/^void ThrowAString() {$/;"	f	namespace:__anon40
ThrowAnInteger	test/gtest_unittest.cc	/^void ThrowAnInteger() {$/;"	f	namespace:__anon40
ThrowListener	test/gtest_assert_by_exception_test.cc	/^class ThrowListener : public testing::EmptyTestEventListener {$/;"	c	file:
ThrowNothing	test/gtest_unittest.cc	/^void ThrowNothing() {}$/;"	f	namespace:__anon40
ThrowOnFailure	test/gtest_unittest.cc	/^  static Flags ThrowOnFailure(bool throw_on_failure) {$/;"	f	struct:testing::Flags
ThrowOnFailureTest	test/googletest-throw-on-failure-test.py	/^class ThrowOnFailureTest(gtest_test_utils.TestCase):$/;"	c
TimeInMillis	include/gtest/gtest.h	/^typedef internal::TimeInMillis TimeInMillis;$/;"	t	namespace:testing
TimeInMillis	include/gtest/internal/gtest-port.h	/^typedef TypeWithSize<8>::Int TimeInMillis;  \/\/ Represents time in milliseconds.$/;"	t	namespace:testing::internal
Title	scripts/gen_gtest_pred_impl.py	/^def Title(word):$/;"	f
To	test/googletest-port-test.cc	/^  To(bool* converted) { *converted = true; }  \/\/ NOLINT$/;"	f	class:testing::internal::To
To	test/googletest-port-test.cc	/^class To {$/;"	c	namespace:testing::internal	file:
ToLower	include/gtest/internal/gtest-port.h	/^inline char ToLower(char ch) {$/;"	f	namespace:testing::internal
ToUnixLineEnding	test/googletest-output-test.py	/^def ToUnixLineEnding(s):$/;"	f
ToUpper	include/gtest/internal/gtest-port.h	/^inline char ToUpper(char ch) {$/;"	f	namespace:testing::internal
Token	scripts/pump.py	/^class Token:$/;"	c
Tokenize	scripts/pump.py	/^def Tokenize(s):$/;"	f
TokenizeLines	scripts/pump.py	/^def TokenizeLines(lines, pos):$/;"	f
TraceInfo	src/gtest-internal-inl.h	/^struct TraceInfo {$/;"	s	namespace:testing::internal
TrimTypes	test/gtest-typed-test_test.cc	/^typedef Types<int, double, MyPair<int, int> > TrimTypes;$/;"	t	namespace:library2	file:
TrimmedTest	test/gtest-typed-test_test.cc	/^template <typename T> class TrimmedTest : public Test { };$/;"	c	namespace:library2	file:
TryTestSubroutine	test/googletest-output-test_.cc	/^void TryTestSubroutine() {$/;"	f
TwoTypes	test/gtest-typed-test_test.cc	/^typedef Types<char, int> TwoTypes;$/;"	t	file:
Type	include/gtest/gtest-test-part.h	/^  enum Type {$/;"	g	class:testing::TestPartResult
TypeId	include/gtest/internal/gtest-internal.h	/^typedef const void* TypeId;$/;"	t	namespace:testing::internal
TypeIdHelper	include/gtest/internal/gtest-internal.h	/^class TypeIdHelper {$/;"	c	namespace:testing::internal
TypeKind	include/gtest/gtest-printers.h	/^enum TypeKind {$/;"	g	namespace:testing::internal2
TypeList	include/gtest/internal/gtest-type-util.h	/^struct TypeList {$/;"	s	namespace:testing::internal
TypeList	include/gtest/internal/gtest-type-util.h	/^struct TypeList<Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing::internal
TypeParamTest	test/googletest-list-tests-unittest_.cc	/^TYPED_TEST_SUITE_P(TypeParamTest);$/;"	v
TypeParamTest	test/googletest-list-tests-unittest_.cc	/^class TypeParamTest : public testing::Test {$/;"	c	file:
TypeParameterizedTest	include/gtest/internal/gtest-internal.h	/^class TypeParameterizedTest {$/;"	c	namespace:testing::internal
TypeParameterizedTest	include/gtest/internal/gtest-internal.h	/^class TypeParameterizedTest<Fixture, TestSel, Types0> {$/;"	c	namespace:testing::internal
TypeParameterizedTestSuite	include/gtest/internal/gtest-internal.h	/^class TypeParameterizedTestSuite {$/;"	c	namespace:testing::internal
TypeParameterizedTestSuite	include/gtest/internal/gtest-internal.h	/^class TypeParameterizedTestSuite<Fixture, Templates0, Types> {$/;"	c	namespace:testing::internal
TypeParameterizedTestSuite	test/gtest_xml_output_unittest_.cc	/^TYPED_TEST_SUITE_P(TypeParameterizedTestSuite);$/;"	v
TypeParameterizedTestSuite	test/gtest_xml_output_unittest_.cc	/^class TypeParameterizedTestSuite : public Test {};$/;"	c	file:
TypeParameterizedTestSuiteTypes	test/gtest_xml_output_unittest_.cc	/^typedef testing::Types<int, long> TypeParameterizedTestSuiteTypes;  \/\/ NOLINT$/;"	t	file:
TypeParametrizedTestNames	test/gtest-typed-test_test.cc	/^class TypeParametrizedTestNames {$/;"	c	file:
TypeParametrizedTestWithNames	test/gtest-typed-test_test.cc	/^TYPED_TEST_SUITE_P(TypeParametrizedTestWithNames);$/;"	v
TypeParametrizedTestWithNames	test/gtest-typed-test_test.cc	/^class TypeParametrizedTestWithNames : public Test {};$/;"	c	file:
TypeWithSize	include/gtest/internal/gtest-port.h	/^class TypeWithSize {$/;"	c	namespace:testing::internal
TypeWithSize	include/gtest/internal/gtest-port.h	/^class TypeWithSize<4> {$/;"	c	namespace:testing::internal
TypeWithSize	include/gtest/internal/gtest-port.h	/^class TypeWithSize<8> {$/;"	c	namespace:testing::internal
TypeWithoutFormatter	include/gtest/gtest-printers.h	/^class TypeWithoutFormatter {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	include/gtest/gtest-printers.h	/^class TypeWithoutFormatter<T, kConvertibleToInteger> {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	include/gtest/gtest-printers.h	/^class TypeWithoutFormatter<T, kConvertibleToStringView> {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	include/gtest/gtest-printers.h	/^class TypeWithoutFormatter<T, kProtobuf> {$/;"	c	namespace:testing::internal2
TypedEq	include/gtest/gtest-matchers.h	/^inline Matcher<Lhs> TypedEq(const Rhs& rhs) { return Eq(rhs); }$/;"	f	namespace:testing
TypedTest	test/googletest-list-tests-unittest_.cc	/^class TypedTest : public testing::Test {$/;"	c	file:
TypedTest	test/googletest-output-test_.cc	/^class TypedTest : public testing::Test {$/;"	c	file:
TypedTest	test/gtest_unittest.cc	/^class TypedTest : public Test {$/;"	c	namespace:__anon40	file:
TypedTest	test/gtest_xml_output_unittest_.cc	/^template <typename T> class TypedTest : public Test {};$/;"	c	file:
TypedTest1	test/gtest-typed-test_test.cc	/^class TypedTest1 : public Test {$/;"	c	file:
TypedTest2	test/gtest-typed-test_test.cc	/^class TypedTest2 : public Test {$/;"	c	file:
TypedTestCaseIsDeprecated	include/gtest/internal/gtest-internal.h	/^constexpr bool TypedTestCaseIsDeprecated() { return true; }$/;"	f	namespace:testing::internal
TypedTestCase_P_IsDeprecated	include/gtest/internal/gtest-internal.h	/^constexpr bool TypedTestCase_P_IsDeprecated() { return true; }$/;"	f	namespace:testing::internal
TypedTestNames	test/googletest-output-test_.cc	/^class TypedTestNames {$/;"	c	file:
TypedTestNames	test/gtest-typed-test_test.cc	/^class TypedTestNames {$/;"	c	file:
TypedTestP	test/googletest-output-test_.cc	/^TYPED_TEST_SUITE_P(TypedTestP);$/;"	v
TypedTestP	test/googletest-output-test_.cc	/^class TypedTestP : public testing::Test {$/;"	c	file:
TypedTestP	test/gtest_unittest.cc	/^class TypedTestP : public Test {$/;"	c	namespace:__anon40	file:
TypedTestP1	test/gtest-typed-test_test.cc	/^TYPED_TEST_SUITE_P(TypedTestP1);$/;"	v
TypedTestP1	test/gtest-typed-test_test.cc	/^class TypedTestP1 : public Test {$/;"	c	file:
TypedTestP2	test/gtest-typed-test_test.cc	/^TYPED_TEST_SUITE_P(TypedTestP2);$/;"	v
TypedTestP2	test/gtest-typed-test_test.cc	/^class TypedTestP2 : public Test {$/;"	c	file:
TypedTestPNames	test/googletest-output-test_.cc	/^class TypedTestPNames {$/;"	c	file:
TypedTestSuitePState	include/gtest/internal/gtest-internal.h	/^  TypedTestSuitePState() : registered_(false) {}$/;"	f	class:testing::internal::TypedTestSuitePState
TypedTestSuitePState	include/gtest/internal/gtest-internal.h	/^class GTEST_API_ TypedTestSuitePState {$/;"	c	namespace:testing::internal
TypedTestSuitePStateTest	test/gtest-typed-test_test.cc	/^class TypedTestSuitePStateTest : public Test {$/;"	c	file:
TypedTestTypes	test/gtest_xml_output_unittest_.cc	/^typedef testing::Types<int, long> TypedTestTypes;$/;"	t	file:
TypedTestWithNames	test/googletest-output-test_.cc	/^class TypedTestWithNames : public testing::Test {};$/;"	c	file:
TypedTestWithNames	test/gtest-typed-test_test.cc	/^class TypedTestWithNames : public Test {};$/;"	c	file:
Types	include/gtest/internal/gtest-type-util.h	/^struct Types {$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, internal::None,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, internal::None,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, internal::None,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, internal::None,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, internal::None, internal::None,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, internal::None, internal::None,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, T6, internal::None, internal::None,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, T5, internal::None, internal::None,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, T4, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, T3, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, T2, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<T1, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	include/gtest/internal/gtest-type-util.h	/^struct Types<internal::None, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types0	include/gtest/internal/gtest-type-util.h	/^struct Types0 {};$/;"	s	namespace:testing::internal
Types1	include/gtest/internal/gtest-type-util.h	/^struct Types1 {$/;"	s	namespace:testing::internal
Types10	include/gtest/internal/gtest-type-util.h	/^struct Types10 {$/;"	s	namespace:testing::internal
Types11	include/gtest/internal/gtest-type-util.h	/^struct Types11 {$/;"	s	namespace:testing::internal
Types12	include/gtest/internal/gtest-type-util.h	/^struct Types12 {$/;"	s	namespace:testing::internal
Types13	include/gtest/internal/gtest-type-util.h	/^struct Types13 {$/;"	s	namespace:testing::internal
Types14	include/gtest/internal/gtest-type-util.h	/^struct Types14 {$/;"	s	namespace:testing::internal
Types15	include/gtest/internal/gtest-type-util.h	/^struct Types15 {$/;"	s	namespace:testing::internal
Types16	include/gtest/internal/gtest-type-util.h	/^struct Types16 {$/;"	s	namespace:testing::internal
Types17	include/gtest/internal/gtest-type-util.h	/^struct Types17 {$/;"	s	namespace:testing::internal
Types18	include/gtest/internal/gtest-type-util.h	/^struct Types18 {$/;"	s	namespace:testing::internal
Types19	include/gtest/internal/gtest-type-util.h	/^struct Types19 {$/;"	s	namespace:testing::internal
Types2	include/gtest/internal/gtest-type-util.h	/^struct Types2 {$/;"	s	namespace:testing::internal
Types20	include/gtest/internal/gtest-type-util.h	/^struct Types20 {$/;"	s	namespace:testing::internal
Types21	include/gtest/internal/gtest-type-util.h	/^struct Types21 {$/;"	s	namespace:testing::internal
Types22	include/gtest/internal/gtest-type-util.h	/^struct Types22 {$/;"	s	namespace:testing::internal
Types23	include/gtest/internal/gtest-type-util.h	/^struct Types23 {$/;"	s	namespace:testing::internal
Types24	include/gtest/internal/gtest-type-util.h	/^struct Types24 {$/;"	s	namespace:testing::internal
Types25	include/gtest/internal/gtest-type-util.h	/^struct Types25 {$/;"	s	namespace:testing::internal
Types26	include/gtest/internal/gtest-type-util.h	/^struct Types26 {$/;"	s	namespace:testing::internal
Types27	include/gtest/internal/gtest-type-util.h	/^struct Types27 {$/;"	s	namespace:testing::internal
Types28	include/gtest/internal/gtest-type-util.h	/^struct Types28 {$/;"	s	namespace:testing::internal
Types29	include/gtest/internal/gtest-type-util.h	/^struct Types29 {$/;"	s	namespace:testing::internal
Types3	include/gtest/internal/gtest-type-util.h	/^struct Types3 {$/;"	s	namespace:testing::internal
Types30	include/gtest/internal/gtest-type-util.h	/^struct Types30 {$/;"	s	namespace:testing::internal
Types31	include/gtest/internal/gtest-type-util.h	/^struct Types31 {$/;"	s	namespace:testing::internal
Types32	include/gtest/internal/gtest-type-util.h	/^struct Types32 {$/;"	s	namespace:testing::internal
Types33	include/gtest/internal/gtest-type-util.h	/^struct Types33 {$/;"	s	namespace:testing::internal
Types34	include/gtest/internal/gtest-type-util.h	/^struct Types34 {$/;"	s	namespace:testing::internal
Types35	include/gtest/internal/gtest-type-util.h	/^struct Types35 {$/;"	s	namespace:testing::internal
Types36	include/gtest/internal/gtest-type-util.h	/^struct Types36 {$/;"	s	namespace:testing::internal
Types37	include/gtest/internal/gtest-type-util.h	/^struct Types37 {$/;"	s	namespace:testing::internal
Types38	include/gtest/internal/gtest-type-util.h	/^struct Types38 {$/;"	s	namespace:testing::internal
Types39	include/gtest/internal/gtest-type-util.h	/^struct Types39 {$/;"	s	namespace:testing::internal
Types4	include/gtest/internal/gtest-type-util.h	/^struct Types4 {$/;"	s	namespace:testing::internal
Types40	include/gtest/internal/gtest-type-util.h	/^struct Types40 {$/;"	s	namespace:testing::internal
Types41	include/gtest/internal/gtest-type-util.h	/^struct Types41 {$/;"	s	namespace:testing::internal
Types42	include/gtest/internal/gtest-type-util.h	/^struct Types42 {$/;"	s	namespace:testing::internal
Types43	include/gtest/internal/gtest-type-util.h	/^struct Types43 {$/;"	s	namespace:testing::internal
Types44	include/gtest/internal/gtest-type-util.h	/^struct Types44 {$/;"	s	namespace:testing::internal
Types45	include/gtest/internal/gtest-type-util.h	/^struct Types45 {$/;"	s	namespace:testing::internal
Types46	include/gtest/internal/gtest-type-util.h	/^struct Types46 {$/;"	s	namespace:testing::internal
Types47	include/gtest/internal/gtest-type-util.h	/^struct Types47 {$/;"	s	namespace:testing::internal
Types48	include/gtest/internal/gtest-type-util.h	/^struct Types48 {$/;"	s	namespace:testing::internal
Types49	include/gtest/internal/gtest-type-util.h	/^struct Types49 {$/;"	s	namespace:testing::internal
Types5	include/gtest/internal/gtest-type-util.h	/^struct Types5 {$/;"	s	namespace:testing::internal
Types50	include/gtest/internal/gtest-type-util.h	/^struct Types50 {$/;"	s	namespace:testing::internal
Types6	include/gtest/internal/gtest-type-util.h	/^struct Types6 {$/;"	s	namespace:testing::internal
Types7	include/gtest/internal/gtest-type-util.h	/^struct Types7 {$/;"	s	namespace:testing::internal
Types8	include/gtest/internal/gtest-type-util.h	/^struct Types8 {$/;"	s	namespace:testing::internal
Types9	include/gtest/internal/gtest-type-util.h	/^struct Types9 {$/;"	s	namespace:testing::internal
TypesForTestWithNames	test/googletest-output-test_.cc	/^typedef testing::Types<char, int> TypesForTestWithNames;$/;"	t	file:
UInt	include/gtest/internal/gtest-port.h	/^  typedef unsigned __int64 UInt;$/;"	t	class:testing::internal::TypeWithSize
UInt	include/gtest/internal/gtest-port.h	/^  typedef unsigned int UInt;$/;"	t	class:testing::internal::TypeWithSize
UInt	include/gtest/internal/gtest-port.h	/^  typedef void UInt;$/;"	t	class:testing::internal::TypeWithSize
UInt32	include/gtest/internal/gtest-port.h	/^typedef TypeWithSize<4>::UInt UInt32;$/;"	t	namespace:testing::internal
UInt64	include/gtest/internal/gtest-port.h	/^typedef TypeWithSize<8>::UInt UInt64;$/;"	t	namespace:testing::internal
UNIT_TEST	scripts/gen_gtest_pred_impl.py	/^UNIT_TEST = os.path.join(SCRIPT_DIR, '..\/test\/gtest_pred_impl_unittest.cc')$/;"	v
UNKNOWN_FLAG	test/gtest_help_test.py	/^UNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'$/;"	v
Uncopyable	test/gtest_unittest.cc	/^  explicit Uncopyable(int a_value) : value_(a_value) {}$/;"	f	class:__anon40::Uncopyable
Uncopyable	test/gtest_unittest.cc	/^class Uncopyable {$/;"	c	namespace:__anon40	file:
UnexpectedHRESULTFailure	test/gtest_unittest.cc	/^static HRESULT UnexpectedHRESULTFailure() {$/;"	f	namespace:__anon40
UnitTest	include/gtest/gtest.h	/^class GTEST_API_ UnitTest {$/;"	c	namespace:testing
UnitTest	src/gtest.cc	/^UnitTest::UnitTest() {$/;"	f	class:testing::UnitTest
UnitTestHelper	test/gtest-unittest-api_test.cc	/^class UnitTestHelper {$/;"	c	namespace:testing::internal	file:
UnitTestImpl	src/gtest-internal-inl.h	/^class GTEST_API_ UnitTestImpl {$/;"	c	namespace:testing::internal
UnitTestOptions	src/gtest-internal-inl.h	/^class GTEST_API_ UnitTestOptions {$/;"	c	namespace:testing::internal
UnitTestRecordProperty	test/gtest_unittest.cc	/^  void UnitTestRecordProperty(const char* key, const std::string& value) {$/;"	f	class:testing::internal::UnitTestRecordPropertyTestHelper
UnitTestRecordPropertyTest	test/gtest_unittest.cc	/^class UnitTestRecordPropertyTest :$/;"	c	namespace:__anon40	file:
UnitTestRecordPropertyTestEnvironment	test/gtest_unittest.cc	/^class UnitTestRecordPropertyTestEnvironment : public Environment {$/;"	c	namespace:__anon40	file:
UnitTestRecordPropertyTestHelper	test/gtest_unittest.cc	/^  UnitTestRecordPropertyTestHelper() {}$/;"	f	class:testing::internal::UnitTestRecordPropertyTestHelper
UnitTestRecordPropertyTestHelper	test/gtest_unittest.cc	/^class UnitTestRecordPropertyTestHelper : public Test {$/;"	c	namespace:testing::internal	file:
UniversalPrint	include/gtest/gtest-printers.h	/^void UniversalPrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	include/gtest/gtest-printers.h	/^void UniversalPrintArray(const T* begin, size_t len, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	src/gtest-printers.cc	/^void UniversalPrintArray(const char* begin, size_t len, ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	src/gtest-printers.cc	/^void UniversalPrintArray(const wchar_t* begin, size_t len, ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintCharArray	src/gtest-printers.cc	/^static void UniversalPrintCharArray($/;"	f	namespace:testing::internal
UniversalPrinter	include/gtest/gtest-printers.h	/^class UniversalPrinter {$/;"	c	namespace:testing::internal
UniversalPrinter	include/gtest/gtest-printers.h	/^class UniversalPrinter<::absl::optional<T>> {$/;"	c	namespace:testing::internal
UniversalPrinter	include/gtest/gtest-printers.h	/^class UniversalPrinter<::absl::variant<T...>> {$/;"	c	namespace:testing::internal
UniversalPrinter	include/gtest/gtest-printers.h	/^class UniversalPrinter<T&> {$/;"	c	namespace:testing::internal
UniversalPrinter	include/gtest/gtest-printers.h	/^class UniversalPrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrint	include/gtest/gtest-printers.h	/^void UniversalTersePrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalTersePrintTupleFieldsToStrings	include/gtest/gtest-printers.h	/^Strings UniversalTersePrintTupleFieldsToStrings(const Tuple& value) {$/;"	f	namespace:testing::internal
UniversalTersePrinter	include/gtest/gtest-printers.h	/^class UniversalTersePrinter {$/;"	c	namespace:testing::internal
UniversalTersePrinter	include/gtest/gtest-printers.h	/^class UniversalTersePrinter<T&> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	include/gtest/gtest-printers.h	/^class UniversalTersePrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	include/gtest/gtest-printers.h	/^class UniversalTersePrinter<char*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	include/gtest/gtest-printers.h	/^class UniversalTersePrinter<const char*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	include/gtest/gtest-printers.h	/^class UniversalTersePrinter<const wchar_t*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	include/gtest/gtest-printers.h	/^class UniversalTersePrinter<wchar_t*> {$/;"	c	namespace:testing::internal
Unlock	include/gtest/internal/gtest-port.h	/^  void Unlock() {$/;"	f	class:testing::internal::MutexBase
Unlock	include/gtest/internal/gtest-port.h	/^  void Unlock() {}$/;"	f	class:testing::internal::Mutex
Unlock	src/gtest-port.cc	/^void Mutex::Unlock() {$/;"	f	class:testing::internal::Mutex
UnprintableChar	test/gtest_unittest.cc	/^  explicit UnprintableChar(char ch) : char_(ch) {}$/;"	f	class:__anon42::UnprintableChar
UnprintableChar	test/gtest_unittest.cc	/^class UnprintableChar {$/;"	c	namespace:__anon42	file:
UnprintableInFoo	test/googletest-printers-test.cc	/^  UnprintableInFoo() : z_(0) { memcpy(xy_, "\\xEF\\x12\\x0\\x0\\x34\\xAB\\x0\\x0", 8); }$/;"	f	class:foo::UnprintableInFoo
UnprintableInFoo	test/googletest-printers-test.cc	/^class UnprintableInFoo {$/;"	c	namespace:foo	file:
UnprintableTemplateInGlobal	test/googletest-printers-test.cc	/^  UnprintableTemplateInGlobal() : value_() {}$/;"	f	class:UnprintableTemplateInGlobal
UnprintableTemplateInGlobal	test/googletest-printers-test.cc	/^class UnprintableTemplateInGlobal {$/;"	c	file:
UnshuffleTests	src/gtest.cc	/^void TestSuite::UnshuffleTests() {$/;"	f	class:testing::TestSuite
UnshuffleTests	src/gtest.cc	/^void UnitTestImpl::UnshuffleTests() {$/;"	f	class:testing::internal::UnitTestImpl
UnsignedTypes	test/googletest-output-test_.cc	/^typedef testing::Types<unsigned char, unsigned int> UnsignedTypes;$/;"	t	file:
Unstreamable	test/googletest-param-test-test.cc	/^  explicit Unstreamable(int value) : value_(value) {}$/;"	f	class:Unstreamable
Unstreamable	test/googletest-param-test-test.cc	/^class Unstreamable {$/;"	c	file:
Unwrap	include/gtest/gtest-matchers.h	/^  static const T& Unwrap(const T& v) { return v; }$/;"	f	class:testing::internal::ComparisonBase
Unwrap	include/gtest/gtest-matchers.h	/^  static const T& Unwrap(std::reference_wrapper<T> v) { return v; }$/;"	f	class:testing::internal::ComparisonBase
UpdateLinksInBranchedFiles	scripts/release_docs.py	/^  def UpdateLinksInBranchedFiles(self):$/;"	m	class:WikiBrancher
UploadBaseFiles	scripts/upload.py	/^  def UploadBaseFiles(self, issue, rpc_server, patch_list, patchset, options,$/;"	m	class:VersionControlSystem
UploadFile	scripts/upload.py	/^    def UploadFile(filename, file_id, content, is_binary, status, is_base):$/;"	f	function:VersionControlSystem.UploadBaseFiles
UploadSeparatePatches	scripts/upload.py	/^def UploadSeparatePatches(issue, rpc_server, patchset, data, options):$/;"	f
UrlEncode	src/gtest.cc	/^std::string StreamingListener::UrlEncode(const char* str) {$/;"	f	class:testing::internal::StreamingListener
UserThreadFunc	include/gtest/internal/gtest-port.h	/^  typedef void UserThreadFunc(T);$/;"	t	class:testing::internal::ThreadWithParam
UsesColor	test/googletest-color-test.py	/^def UsesColor(term, color_env_var, color_flag):$/;"	f
Utf16ToAnsi	src/gtest.cc	/^const char* String::Utf16ToAnsi(LPCWSTR utf16_str)  {$/;"	f	class:testing::internal::String
VERIFY_CODE_LOCATION	test/gtest_unittest.cc	/^#define VERIFY_CODE_LOCATION /;"	d	file:
VERIFY_CODE_LOCATION	test/gtest_unittest.cc	/^#undef VERIFY_CODE_LOCATION$/;"	d	file:
ValidateGTestRootDir	scripts/fuse_gtest_files.py	/^def ValidateGTestRootDir(gtest_root):$/;"	f
ValidateOutputDir	scripts/fuse_gtest_files.py	/^def ValidateOutputDir(output_dir):$/;"	f
ValidateRegex	src/gtest-port.cc	/^bool ValidateRegex(const char* regex) {$/;"	f	namespace:testing::internal
ValidateTestProperty	src/gtest.cc	/^bool TestResult::ValidateTestProperty(const std::string& xml_element,$/;"	f	class:testing::TestResult
ValidateTestPropertyName	src/gtest.cc	/^static bool ValidateTestPropertyName($/;"	f	namespace:testing
ValueArray	include/gtest/internal/gtest-param-util.h	/^  ValueArray(Ts... v) : v_{std::move(v)...} {}$/;"	f	class:testing::internal::ValueArray
ValueArray	include/gtest/internal/gtest-param-util.h	/^class ValueArray {$/;"	c	namespace:testing::internal
ValueHolder	include/gtest/internal/gtest-port.h	/^    ValueHolder() : value_() {}$/;"	f	class:testing::internal::ThreadLocal::ValueHolder
ValueHolder	include/gtest/internal/gtest-port.h	/^    explicit ValueHolder(const T& value) : value_(value) {}$/;"	f	class:testing::internal::ThreadLocal::ValueHolder
ValueHolder	include/gtest/internal/gtest-port.h	/^  class ValueHolder : public ThreadLocalValueHolderBase {$/;"	c	class:testing::internal::ThreadLocal
ValueHolderFactory	include/gtest/internal/gtest-port.h	/^    ValueHolderFactory() {}$/;"	f	class:testing::internal::ThreadLocal::ValueHolderFactory
ValueHolderFactory	include/gtest/internal/gtest-port.h	/^  class ValueHolderFactory {$/;"	c	class:testing::internal::ThreadLocal
ValueParamTest	test/googletest-list-tests-unittest_.cc	/^class ValueParamTest : public testing::TestWithParam<MyType> {$/;"	c	file:
ValueParamTest	test/gtest_xml_output_unittest_.cc	/^class ValueParamTest : public TestWithParam<int> {};$/;"	c	file:
Values	include/gtest/gtest-param-test.h	/^internal::ValueArray<T...> Values(T... v) {$/;"	f	namespace:testing
ValuesIn	include/gtest/gtest-param-test.h	/^ValuesIn(ForwardIterator begin, ForwardIterator end) {$/;"	f	namespace:testing
ValuesIn	include/gtest/gtest-param-test.h	/^internal::ParamGenerator<typename Container::value_type> ValuesIn($/;"	f	namespace:testing
ValuesInIteratorRangeGenerator	include/gtest/internal/gtest-param-util.h	/^  ValuesInIteratorRangeGenerator(ForwardIterator begin, ForwardIterator end)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
ValuesInIteratorRangeGenerator	include/gtest/internal/gtest-param-util.h	/^class ValuesInIteratorRangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
VarNode	scripts/pump.py	/^class VarNode:$/;"	c
Vector	test/gtest-typed-test_test.cc	/^  typedef std::vector<T> Vector;$/;"	t	class:CommonTest	file:
VectorIsCorrupt	test/gtest_unittest.cc	/^  static bool VectorIsCorrupt(const TestingVector& vector) {$/;"	f	class:__anon40::VectorShuffleTest
VectorIsNotCorrupt	test/gtest_unittest.cc	/^  static bool VectorIsNotCorrupt(const TestingVector& vector) {$/;"	f	class:__anon40::VectorShuffleTest
VectorIsShuffled	test/gtest_unittest.cc	/^  static bool VectorIsShuffled(const TestingVector& vector) {$/;"	f	class:__anon40::VectorShuffleTest
VectorIsUnshuffled	test/gtest_unittest.cc	/^  static bool VectorIsUnshuffled(const TestingVector& vector) {$/;"	f	class:__anon40::VectorShuffleTest
VectorShuffleTest	test/gtest_unittest.cc	/^  VectorShuffleTest() : random_(1) {$/;"	f	class:__anon40::VectorShuffleTest
VectorShuffleTest	test/gtest_unittest.cc	/^class VectorShuffleTest : public Test {$/;"	c	namespace:__anon40	file:
VerifyAndModifyFlags	test/gtest_unittest.cc	/^  void VerifyAndModifyFlags() {$/;"	f	class:__anon40::GTestFlagSaverTest
VerifyFileExists	scripts/fuse_gtest_files.py	/^def VerifyFileExists(directory, relative_path):$/;"	f
VerifyGenerator	test/googletest-param-test-test.cc	/^void VerifyGenerator(const ParamGenerator<T>& generator,$/;"	f
VerifyGeneratorIsEmpty	test/googletest-param-test-test.cc	/^void VerifyGeneratorIsEmpty(const ParamGenerator<T>& generator) {$/;"	f
VerifyOutputFile	scripts/fuse_gtest_files.py	/^def VerifyOutputFile(output_dir, relative_path):$/;"	f
VerifyRegisteredTestNames	src/gtest-typed-test.cc	/^const char* TypedTestSuitePState::VerifyRegisteredTestNames($/;"	f	class:testing::internal::TypedTestSuitePState
VerifyResults	test/googletest-listener-test.cc	/^void VerifyResults(const std::vector<std::string>& data,$/;"	f
VersionControlSystem	scripts/upload.py	/^class VersionControlSystem(object):$/;"	c
VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName	test/googletest-list-tests-unittest_.cc	/^class VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName {  \/\/ NOLINT$/;"	c	file:
Visitor	include/gtest/gtest-printers.h	/^  struct Visitor {$/;"	s	class:testing::internal::UniversalPrinter
WHITE_SPACE_REGEX	scripts/pump.py	/^WHITE_SPACE_REGEX = re.compile(r'\\s')$/;"	v
Wait	src/gtest-death-test.cc	/^int ForkingDeathTest::Wait() {$/;"	f	class:testing::internal::ForkingDeathTest
Wait	src/gtest-death-test.cc	/^int FuchsiaDeathTest::Wait() {$/;"	f	class:testing::internal::FuchsiaDeathTest
Wait	src/gtest-death-test.cc	/^int WindowsDeathTest::Wait() {$/;"	f	class:testing::internal::WindowsDeathTest
WaitCalls	test/googletest-death-test-test.cc	/^  int WaitCalls() const { return wait_calls_; }$/;"	f	class:__anon28::MockDeathTestFactory
WaitForNotification	include/gtest/internal/gtest-port.h	/^  void WaitForNotification() {$/;"	f	class:testing::internal::Notification
WaitForNotification	src/gtest-port.cc	/^void Notification::WaitForNotification() {$/;"	f	class:testing::internal::Notification
WatcherThreadFunc	src/gtest-port.cc	/^  static DWORD WINAPI WatcherThreadFunc(LPVOID param) {$/;"	f	class:testing::internal::ThreadLocalRegistryImpl	file:
Water	samples/sample10_unittest.cc	/^class Water {$/;"	c	namespace:__anon4	file:
WideCStringEquals	src/gtest.cc	/^bool String::WideCStringEquals(const wchar_t * lhs, const wchar_t * rhs) {$/;"	f	class:testing::internal::String
WideStringToUtf8	src/gtest.cc	/^std::string WideStringToUtf8(const wchar_t* str, int num_chars) {$/;"	f	namespace:testing::internal
WikiBrancher	scripts/release_docs.py	/^class WikiBrancher(object):$/;"	c
WindowsDeathTest	src/gtest-death-test.cc	/^  WindowsDeathTest(const char* a_statement, Matcher<const std::string&> matcher,$/;"	f	class:testing::internal::WindowsDeathTest
WindowsDeathTest	src/gtest-death-test.cc	/^class WindowsDeathTest : public DeathTestImpl {$/;"	c	namespace:testing::internal	file:
WithParamInterface	include/gtest/gtest.h	/^class WithParamInterface {$/;"	c	namespace:testing
WrapCode	scripts/pump.py	/^def WrapCode(line, line_concat, output):$/;"	f
WrapComment	scripts/pump.py	/^def WrapComment(line, output):$/;"	f
WrapLongLine	scripts/pump.py	/^def WrapLongLine(line, output):$/;"	f
WrapPlainCode	scripts/pump.py	/^def WrapPlainCode(line, output):$/;"	f
WrapPreprocessorDirective	scripts/pump.py	/^def WrapPreprocessorDirective(line, output):$/;"	f
WrapPrinterType	include/gtest/gtest-printers.h	/^template <DefaultPrinterType type> struct WrapPrinterType {};$/;"	s	namespace:testing::internal
Write	include/gtest/internal/gtest-port.h	/^inline int Write(int fd, const void* buf, unsigned int count) {$/;"	f	namespace:testing::internal::posix
WriteToShardStatusFileIfNeeded	src/gtest.cc	/^void WriteToShardStatusFileIfNeeded() {$/;"	f	namespace:testing::internal
XmlOutputChangeDirTest	test/googletest-options-test.cc	/^class XmlOutputChangeDirTest : public Test {$/;"	c	namespace:testing::internal::__anon45	file:
XmlUnitTestResultPrinter	src/gtest.cc	/^XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)$/;"	f	class:testing::internal::XmlUnitTestResultPrinter
XmlUnitTestResultPrinter	src/gtest.cc	/^class XmlUnitTestResultPrinter : public EmptyTestEventListener {$/;"	c	namespace:testing::internal	file:
_Authenticate	scripts/upload.py	/^  def _Authenticate(self):$/;"	m	class:AbstractRpcServer
_Authenticate	scripts/upload.py	/^  def _Authenticate(self):$/;"	m	class:HttpRpcServer
_CollapseKeywords	scripts/upload.py	/^  def _CollapseKeywords(self, content, keyword_str):$/;"	m	class:SubversionVCS
_CreateRequest	scripts/upload.py	/^  def _CreateRequest(self, url, data=None):$/;"	m	class:AbstractRpcServer
_GetAuthCookie	scripts/upload.py	/^  def _GetAuthCookie(self, auth_token):$/;"	m	class:AbstractRpcServer
_GetAuthToken	scripts/upload.py	/^  def _GetAuthToken(self, email, password):$/;"	m	class:AbstractRpcServer
_GetChildren	test/gtest_xml_test_utils.py	/^  def _GetChildren(self, element):$/;"	m	class:GTestXMLTestCase
_GetJsonOutput	test/googletest-json-output-unittest.py	/^  def _GetJsonOutput(self, gtest_prog_name, extra_args, expected_exit_code):$/;"	m	class:GTestJsonOutputUnitTest
_GetOpener	scripts/upload.py	/^  def _GetOpener(self):$/;"	m	class:AbstractRpcServer
_GetOpener	scripts/upload.py	/^  def _GetOpener(self):$/;"	m	class:HttpRpcServer
_GetOutput	test/gtest_list_output_unittest.py	/^  def _GetOutput(self, out_format):$/;"	m	class:GTestListTestsOutputUnitTest
_GetRelPath	scripts/upload.py	/^  def _GetRelPath(self, filename):$/;"	m	class:MercurialVCS
_GetXmlOutput	test/gtest_xml_output_unittest.py	/^  def _GetXmlOutput(self, gtest_prog_name, extra_args, extra_env,$/;"	m	class:GTestXMLOutputUnitTest
_GuessBase	scripts/upload.py	/^  def _GuessBase(self, required):$/;"	m	class:SubversionVCS
_HAS_EXCEPTIONS	include/gtest/internal/gtest-port.h	/^#   define _HAS_EXCEPTIONS /;"	d
_ParseAndStripGTestFlags	test/gtest_test_utils.py	/^def _ParseAndStripGTestFlags(argv):$/;"	f
_RemoveTempDir	test/gtest_test_utils.py	/^def _RemoveTempDir():$/;"	f
_ReplaceEnvDict	test/gtest_test_utils.py	/^      def _ReplaceEnvDict(dest, src):$/;"	f	function:Subprocess.__init__
_SUBPROCESS_MODULE_AVAILABLE	test/gtest_test_utils.py	/^  _SUBPROCESS_MODULE_AVAILABLE = False$/;"	v
_SUBPROCESS_MODULE_AVAILABLE	test/gtest_test_utils.py	/^  _SUBPROCESS_MODULE_AVAILABLE = True$/;"	v
_SVN_INFO_URL_RE	scripts/common.py	/^_SVN_INFO_URL_RE = re.compile(r'^URL: https:\/\/(\\w+)\\.googlecode\\.com\/svn(.*)')$/;"	v
_TestJsonOutput	test/googletest-json-output-unittest.py	/^  def _TestJsonOutput(self, gtest_prog_name, expected,$/;"	m	class:GTestJsonOutputUnitTest
_TestOutFile	test/googletest-json-outfiles-test.py	/^  def _TestOutFile(self, test_name, expected):$/;"	m	class:GTestJsonOutFilesTest
_TestOutFile	test/gtest_xml_outfiles_test.py	/^  def _TestOutFile(self, test_name, expected_xml):$/;"	m	class:GTestXMLOutFilesTest
_TestOutput	test/gtest_list_output_unittest.py	/^  def _TestOutput(self, test_format, expected_output):$/;"	m	class:GTestListTestsOutputUnitTest
_TestXmlOutput	test/gtest_xml_output_unittest.py	/^  def _TestXmlOutput(self, gtest_prog_name, expected_xml,$/;"	m	class:GTestXMLOutputUnitTest
_VerifyTestCasesDoNotInterleave	test/googletest-shuffle-test.py	/^  def _VerifyTestCasesDoNotInterleave(self, tests):$/;"	m	class:GTestShuffleUnitTest
__add__	scripts/pump.py	/^  def __add__(self, offset):$/;"	m	class:Cursor	file:
__author__	scripts/common.py	/^__author__ = 'wan@google.com (Zhanyong Wan)'$/;"	v
__author__	scripts/fuse_gtest_files.py	/^__author__ = 'wan@google.com (Zhanyong Wan)'$/;"	v
__author__	scripts/gen_gtest_pred_impl.py	/^__author__ = 'wan@google.com (Zhanyong Wan)'$/;"	v
__author__	scripts/pump.py	/^__author__ = 'wan@google.com (Zhanyong Wan)'$/;"	v
__author__	scripts/release_docs.py	/^__author__ = 'wan@google.com (Zhanyong Wan)'$/;"	v
__author__	scripts/upload_gtest.py	/^__author__ = 'wan@google.com (Zhanyong Wan)'$/;"	v
__eq__	scripts/pump.py	/^  def __eq__(self, rhs):$/;"	m	class:Cursor	file:
__ge__	scripts/pump.py	/^  def __ge__(self, rhs):$/;"	m	class:Cursor	file:
__gt__	scripts/pump.py	/^  def __gt__(self, rhs):$/;"	m	class:Cursor	file:
__init__	scripts/pump.py	/^  def __init__(self):$/;"	m	class:Env
__init__	scripts/pump.py	/^  def __init__(self):$/;"	m	class:Output
__init__	scripts/pump.py	/^  def __init__(self, atomic_code_list=None):$/;"	m	class:CodeNode
__init__	scripts/pump.py	/^  def __init__(self, else_branch=None):$/;"	m	class:ElseNode
__init__	scripts/pump.py	/^  def __init__(self, exp=None, then_branch=None, else_branch=None):$/;"	m	class:IfNode
__init__	scripts/pump.py	/^  def __init__(self, identifier=None, atomic_code=None):$/;"	m	class:VarNode
__init__	scripts/pump.py	/^  def __init__(self, identifier=None, exp1=None, exp2=None):$/;"	m	class:RangeNode
__init__	scripts/pump.py	/^  def __init__(self, identifier=None, sep=None, code=None):$/;"	m	class:ForNode
__init__	scripts/pump.py	/^  def __init__(self, line=-1, column=-1):$/;"	m	class:Cursor
__init__	scripts/pump.py	/^  def __init__(self, start=None, end=None, value=None, token_type=None):$/;"	m	class:Token
__init__	scripts/pump.py	/^  def __init__(self, token):$/;"	m	class:LiteralDollarNode
__init__	scripts/pump.py	/^  def __init__(self, token, python_exp):$/;"	m	class:ExpNode
__init__	scripts/pump.py	/^  def __init__(self, token=None):$/;"	m	class:RawCodeNode
__init__	scripts/release_docs.py	/^  def __init__(self, dot_version):$/;"	m	class:WikiBrancher
__init__	scripts/upload.py	/^  def __init__(self, host, auth_function, host_override=None, extra_headers={},$/;"	m	class:AbstractRpcServer
__init__	scripts/upload.py	/^  def __init__(self, options):$/;"	m	class:GitVCS
__init__	scripts/upload.py	/^  def __init__(self, options):$/;"	m	class:SubversionVCS
__init__	scripts/upload.py	/^  def __init__(self, options):$/;"	m	class:VersionControlSystem
__init__	scripts/upload.py	/^  def __init__(self, options, repo_dir):$/;"	m	class:MercurialVCS
__init__	scripts/upload.py	/^  def __init__(self, url, code, msg, headers, args):$/;"	m	class:ClientLoginError
__init__	test/gtest_test_utils.py	/^  def __init__(self, command, working_dir=None, capture_stderr=True, env=None):$/;"	m	class:Subprocess
__le__	scripts/pump.py	/^  def __le__(self, rhs):$/;"	m	class:Cursor	file:
__lt__	scripts/pump.py	/^  def __lt__(self, rhs):$/;"	m	class:Cursor	file:
__ne__	scripts/pump.py	/^  def __ne__(self, rhs):$/;"	m	class:Cursor	file:
__str__	scripts/pump.py	/^  def __str__(self):$/;"	m	class:Cursor	file:
__str__	scripts/pump.py	/^  def __str__(self):$/;"	m	class:Token	file:
__sub__	scripts/pump.py	/^  def __sub__(self, offset):$/;"	m	class:Cursor	file:
_flag_map	test/gtest_test_utils.py	/^_flag_map = {'source_dir': os.path.dirname(sys.argv[0]),$/;"	v
_gtest_flags_are_parsed	test/gtest_test_utils.py	/^_gtest_flags_are_parsed = False$/;"	v
_normalize	test/gtest_json_test_utils.py	/^  def _normalize(key, value):$/;"	f	function:normalize
_rmdir	test/googletest-filepath-test.cc	/^int _rmdir(const char* path) {$/;"	f	namespace:testing::internal::__anon36
_temp_dir	test/gtest_test_utils.py	/^_temp_dir = None$/;"	v
_test_module	test/gtest_test_utils.py	/^import unittest as _test_module$/;"	i
a_	test/gtest_unittest.cc	/^  static int a_;$/;"	m	class:__anon40::SingleEvaluationTest	file:
a_	test/gtest_unittest.cc	/^int SingleEvaluationTest::a_;$/;"	m	class:__anon40::SingleEvaluationTest	file:
abort_args_	test/googletest-death-test-test.cc	/^  std::vector<DeathTest::AbortReason> abort_args_;$/;"	m	class:__anon28::MockDeathTestFactory	file:
ad_hoc_test_result	include/gtest/gtest.h	/^  const TestResult& ad_hoc_test_result() const { return ad_hoc_test_result_; }$/;"	f	class:testing::TestSuite
ad_hoc_test_result	src/gtest-internal-inl.h	/^  const TestResult* ad_hoc_test_result() const { return &ad_hoc_test_result_; }$/;"	f	class:testing::internal::UnitTestImpl
ad_hoc_test_result	src/gtest.cc	/^const TestResult& UnitTest::ad_hoc_test_result() const {$/;"	f	class:testing::UnitTest
ad_hoc_test_result_	include/gtest/gtest.h	/^  TestResult ad_hoc_test_result_;$/;"	m	class:testing::TestSuite
ad_hoc_test_result_	src/gtest-internal-inl.h	/^  TestResult ad_hoc_test_result_;$/;"	m	class:testing::internal::UnitTestImpl
adds_	src/gtest.cc	/^  size_t adds_, removes_, common_;$/;"	m	class:testing::internal::edit_distance::__anon12::Hunk	file:
after	test/gtest-typed-test_test.cc	/^IntAfterTypedTestSuiteP after = 0;$/;"	v
allocated	samples/sample10_unittest.cc	/^  static int allocated() { return allocated_; }$/;"	f	class:__anon4::Water
allocated_	samples/sample10_unittest.cc	/^  static int allocated_;$/;"	m	class:__anon4::Water	file:
allocated_	samples/sample10_unittest.cc	/^int Water::allocated_ = 0;$/;"	m	class:__anon4::Water	file:
also_run_disabled_tests	test/gtest_unittest.cc	/^  bool also_run_disabled_tests;$/;"	m	struct:testing::Flags	file:
also_run_disabled_tests_	src/gtest-internal-inl.h	/^  bool also_run_disabled_tests_;$/;"	m	class:testing::internal::GTestFlagSaver
args_	src/gtest-death-test.cc	/^  std::vector<char*> args_;$/;"	m	class:testing::internal::Arguments	file:
argv	src/gtest-death-test.cc	/^  char* const* argv;  \/\/ Command-line arguments for the child's call to exec$/;"	m	struct:testing::internal::ExecDeathTestArgs	file:
array	test/googletest-printers-test.cc	/^  char array[257];$/;"	m	struct:testing::gtest_printers_test::Big	file:
array_	include/gtest/gtest-test-part.h	/^  std::vector<TestPartResult> array_;$/;"	m	class:testing::TestPartResultArray
array_	include/gtest/internal/gtest-internal.h	/^  const Element* array_;$/;"	m	class:testing::internal::NativeArray
assume_role_calls_	test/googletest-death-test-test.cc	/^  int assume_role_calls_;$/;"	m	class:__anon28::MockDeathTestFactory	file:
atexit	test/gtest_test_utils.py	/^import atexit$/;"	i
b_	test/gtest_unittest.cc	/^  static int b_;$/;"	m	class:__anon40::SingleEvaluationTest	file:
b_	test/gtest_unittest.cc	/^int SingleEvaluationTest::b_;$/;"	m	class:__anon40::SingleEvaluationTest	file:
bar	test/googletest-output-test_.cc	/^namespace bar {$/;"	n	file:
base_	include/gtest/internal/gtest-param-util.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator::IteratorImpl
base_	include/gtest/internal/gtest-param-util.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
base_	include/gtest/internal/gtest-param-util.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
basic_manipulator	include/gtest/gtest.h	/^      ::std::ostream& (*basic_manipulator)(::std::ostream& stream)) {$/;"	f	class:testing::AssertionResult
before	test/gtest-typed-test_test.cc	/^IntBeforeRegisterTypedTestSuiteP before = 0;$/;"	v
begin	include/gtest/internal/gtest-internal.h	/^  const_iterator begin() const { return array_; }$/;"	f	class:testing::internal::NativeArray
begin	include/gtest/internal/gtest-param-util.h	/^  iterator begin() const { return iterator(impl_->Begin()); }$/;"	f	class:testing::internal::ParamGenerator
begin	test/googletest-printers-test.cc	/^  iterator begin() const { return iterator(); }$/;"	f	class:foo::PathLike
begin_	include/gtest/internal/gtest-param-util.h	/^    std::tuple<typename ParamGenerator<T>::iterator...> begin_;$/;"	m	class:testing::internal::CartesianProductGenerator::IteratorImpl
begin_	include/gtest/internal/gtest-param-util.h	/^  const T begin_;$/;"	m	class:testing::internal::RangeGenerator
binary_name	test/googletest-param-test-invalid-name1-test.py	/^binary_name = 'googletest-param-test-invalid-name1-test_'$/;"	v
binary_name	test/googletest-param-test-invalid-name2-test.py	/^binary_name = 'googletest-param-test-invalid-name2-test_'$/;"	v
binary_name	test/gtest_testbridge_test.py	/^binary_name = 'gtest_testbridge_test_'$/;"	v
bits	include/gtest/internal/gtest-internal.h	/^  const Bits &bits() const { return u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
bits_	include/gtest/internal/gtest-internal.h	/^    Bits bits_;      \/\/ The bits that represent the number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
break_on_failure	test/gtest_unittest.cc	/^  bool break_on_failure;$/;"	m	struct:testing::Flags	file:
break_on_failure_	src/gtest-internal-inl.h	/^  bool break_on_failure_;$/;"	m	class:testing::internal::GTestFlagSaver
c_str	include/gtest/internal/gtest-filepath.h	/^  const char* c_str() const { return pathname_.c_str(); }$/;"	f	class:testing::internal::FilePath
c_string	samples/sample2.h	/^  const char* c_string() const { return c_string_; }$/;"	f	class:MyString
c_string_	samples/sample2.h	/^  const char* c_string_;$/;"	m	class:MyString
caller_frame_	src/gtest-internal-inl.h	/^  void* caller_frame_ = nullptr;$/;"	m	class:testing::internal::OsStackTraceGetter
captured_stderr_	src/gtest-death-test.cc	/^  std::string captured_stderr_;$/;"	m	class:testing::internal::FuchsiaDeathTest	file:
catch_exceptions	src/gtest-internal-inl.h	/^  bool catch_exceptions() const { return catch_exceptions_; }$/;"	f	class:testing::internal::UnitTestImpl
catch_exceptions	test/gtest_unittest.cc	/^  bool catch_exceptions;$/;"	m	struct:testing::Flags	file:
catch_exceptions_	src/gtest-internal-inl.h	/^  bool catch_exceptions_;$/;"	m	class:testing::internal::GTestFlagSaver
catch_exceptions_	src/gtest-internal-inl.h	/^  bool catch_exceptions_;$/;"	m	class:testing::internal::UnitTestImpl
catch_exceptions_	src/gtest.cc	/^      catch_exceptions_(false) {$/;"	f	namespace:testing::internal
char_	test/gtest_unittest.cc	/^  char char_;$/;"	m	class:__anon42::UnprintableChar	file:
check_versions	scripts/gtest-config.in	/^check_versions()$/;"	f
child	test/googletest-filter-unittest.py	/^  child = gtest_test_utils.Subprocess($/;"	v
child_handle_	src/gtest-death-test.cc	/^  AutoHandle child_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
child_pid_	src/gtest-death-test.cc	/^  pid_t child_pid_;$/;"	m	class:testing::internal::ForkingDeathTest	file:
child_process_	src/gtest-death-test.cc	/^  zx::process child_process_;$/;"	m	class:testing::internal::FuchsiaDeathTest	file:
clone_	include/gtest/internal/gtest-internal.h	/^  void (NativeArray::*clone_)(const Element*, size_t);$/;"	m	class:testing::internal::NativeArray
close_fd	src/gtest-death-test.cc	/^  int close_fd;       \/\/ File descriptor to close; the read end of a pipe$/;"	m	struct:testing::internal::ExecDeathTestArgs	file:
close_to_infinity	test/gtest_unittest.cc	/^    RawType close_to_infinity;$/;"	m	struct:__anon40::FloatingPointTest::TestValues	file:
close_to_negative_zero	test/gtest_unittest.cc	/^    RawType close_to_negative_zero;$/;"	m	struct:__anon40::FloatingPointTest::TestValues	file:
close_to_one	test/gtest_unittest.cc	/^    RawType close_to_one;$/;"	m	struct:__anon40::FloatingPointTest::TestValues	file:
close_to_positive_zero	test/gtest_unittest.cc	/^    RawType close_to_positive_zero;$/;"	m	struct:__anon40::FloatingPointTest::TestValues	file:
code_location_	include/gtest/internal/gtest-param-util.h	/^  CodeLocation code_location_;$/;"	m	class:testing::internal::ParameterizedTestSuiteInfo
collected_parameters_	test/googletest-param-test-test.cc	/^  static vector<int> collected_parameters_;$/;"	m	class:TestGenerationTest	file:
collected_parameters_	test/googletest-param-test-test.cc	/^vector<int> TestGenerationTest::collected_parameters_;$/;"	m	class:TestGenerationTest	file:
color_	src/gtest-internal-inl.h	/^  std::string color_;$/;"	m	class:testing::internal::GTestFlagSaver
common	scripts/release_docs.py	/^import common$/;"	i
common_	src/gtest.cc	/^  size_t adds_, removes_, common_;$/;"	m	class:testing::internal::edit_distance::__anon12::Hunk	file:
compatibility	scripts/fuse_gtest_files.py	/^  from sets import Set as set  # For Python 2.3 compatibility$/;"	i
compatibility	test/googletest-filter-unittest.py	/^  from sets import Set as set  # For Python 2.3 compatibility$/;"	i
const_converted_	test/googletest-port-test.cc	/^  bool* const_converted_;$/;"	m	class:testing::internal::ConstAndNonConstCastable	file:
const_iterator	include/gtest/internal/gtest-internal.h	/^  typedef const Element* const_iterator;$/;"	t	class:testing::internal::NativeArray
const_iterator	test/googletest-printers-test.cc	/^struct const_iterator {$/;"	s	namespace:testing::gtest_printers_test	file:
const_iterator	test/gtest_unittest.cc	/^  struct const_iterator {$/;"	s	struct:ConstOnlyContainerWithClassIterator	file:
container_	include/gtest/internal/gtest-param-util.h	/^  const ContainerType container_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator
contents	test/googletest-printers-test.cc	/^  unsigned char contents = 17;$/;"	m	struct:testing::gtest_printers_test::NonPrintable	file:
converted_	test/googletest-port-test.cc	/^  bool* converted_;$/;"	m	class:testing::internal::Castable	file:
converted_	test/googletest-port-test.cc	/^  bool* converted_;$/;"	m	class:testing::internal::ConstAndNonConstCastable	file:
converted_	test/googletest-port-test.cc	/^  bool* converted_;$/;"	m	class:testing::internal::ConstCastable	file:
cookielib	scripts/upload.py	/^import cookielib$/;"	i
count	test/gtest_unittest.cc	/^  int count() const { return count_; }$/;"	f	class:__anon42::TestLifeCycleTest
count_	test/googletest-param-test-test.cc	/^  int count_;$/;"	m	class:ParameterizedDerivedTest	file:
count_	test/googletest-param-test-test.cc	/^  int count_;$/;"	m	class:SeparateInstanceTest	file:
count_	test/gtest_unittest.cc	/^  static int count_;$/;"	m	class:__anon42::TestLifeCycleTest	file:
count_	test/gtest_unittest.cc	/^int TestLifeCycleTest::count_ = 0;$/;"	m	class:__anon42::TestLifeCycleTest	file:
counter_	samples/sample4.h	/^  int counter_;$/;"	m	class:Counter
counter_	test/gtest_unittest.cc	/^  static int counter_;$/;"	m	class:testing::SetUpTestCaseTest	file:
counter_	test/gtest_unittest.cc	/^  static int counter_;$/;"	m	class:testing::SetUpTestSuiteTest	file:
counter_	test/gtest_unittest.cc	/^int SetUpTestCaseTest::counter_ = 0;$/;"	m	class:testing::SetUpTestCaseTest	file:
counter_	test/gtest_unittest.cc	/^int SetUpTestSuiteTest::counter_ = 0;$/;"	m	class:testing::SetUpTestSuiteTest	file:
create_	test/googletest-death-test-test.cc	/^  bool create_;$/;"	m	class:__anon28::MockDeathTestFactory	file:
critical_section_	include/gtest/internal/gtest-port.h	/^  GTEST_CRITICAL_SECTION* critical_section_;$/;"	m	class:testing::internal::Mutex
critical_section_init_phase_	include/gtest/internal/gtest-port.h	/^  long critical_section_init_phase_;  \/\/ NOLINT$/;"	m	class:testing::internal::Mutex
current_	include/gtest/internal/gtest-param-util.h	/^    std::tuple<typename ParamGenerator<T>::iterator...> current_;$/;"	m	class:testing::internal::CartesianProductGenerator::IteratorImpl
current_parameter_	test/googletest-param-test-test.cc	/^  int current_parameter_;$/;"	m	class:TestGenerationTest	file:
current_test_info	src/gtest-internal-inl.h	/^  TestInfo* current_test_info() { return current_test_info_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_info	src/gtest-internal-inl.h	/^  const TestInfo* current_test_info() const { return current_test_info_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_info_	src/gtest-internal-inl.h	/^  TestInfo* current_test_info_;$/;"	m	class:testing::internal::UnitTestImpl
current_test_result	src/gtest.cc	/^TestResult* UnitTestImpl::current_test_result() {$/;"	f	class:testing::internal::UnitTestImpl
current_test_suite	src/gtest-internal-inl.h	/^  const TestSuite* current_test_suite() const { return current_test_suite_; }$/;"	f	class:testing::internal::UnitTestImpl
current_test_suite_	src/gtest-internal-inl.h	/^  TestSuite* current_test_suite_;$/;"	m	class:testing::internal::UnitTestImpl
current_value_	include/gtest/internal/gtest-param-util.h	/^    std::shared_ptr<ParamType> current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator::IteratorImpl
data_	include/gtest/gtest.h	/^  AssertHelperData* const data_;$/;"	m	class:testing::internal::AssertHelper
data_	test/googletest-printers-test.cc	/^  const char* data_;$/;"	m	class:testing::gtest_printers_test::__anon38::string_ptr	file:
data_	test/googletest-printers-test.cc	/^  const char* data_;$/;"	m	class:testing::gtest_printers_test::__anon38::string_ref	file:
datetime	test/googletest-json-output-unittest.py	/^import datetime$/;"	i
datetime	test/gtest_xml_output_unittest.py	/^import datetime$/;"	i
death_test_count	include/gtest/gtest.h	/^  int death_test_count() const { return death_test_count_; }$/;"	f	class:testing::TestResult
death_test_count_	include/gtest/gtest.h	/^  int death_test_count_;$/;"	m	class:testing::TestResult
death_test_factory	src/gtest-internal-inl.h	/^  internal::DeathTestFactory* death_test_factory() {$/;"	f	class:testing::internal::UnitTestImpl
death_test_factory_	src/gtest-internal-inl.h	/^  std::unique_ptr<internal::DeathTestFactory> death_test_factory_;$/;"	m	class:testing::internal::UnitTestImpl
death_test_style_	src/gtest-internal-inl.h	/^  std::string death_test_style_;$/;"	m	class:testing::internal::GTestFlagSaver
death_test_use_fork	test/gtest_unittest.cc	/^  bool death_test_use_fork;$/;"	m	struct:testing::Flags	file:
death_test_use_fork_	src/gtest-internal-inl.h	/^  bool death_test_use_fork_;$/;"	m	class:testing::internal::GTestFlagSaver
default_factory_	include/gtest/internal/gtest-port.h	/^  std::unique_ptr<ValueHolderFactory> default_factory_;$/;"	m	class:testing::internal::ThreadLocal
default_global_test_part_result_reporter_	src/gtest-internal-inl.h	/^  DefaultGlobalTestPartResultReporter default_global_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl
default_global_test_part_result_reporter_	src/gtest.cc	/^          &default_global_test_part_result_reporter_),$/;"	m	namespace:testing::internal	file:
default_per_thread_test_part_result_reporter_	src/gtest-internal-inl.h	/^      default_per_thread_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl
default_per_thread_test_part_result_reporter_	src/gtest.cc	/^          &default_per_thread_test_part_result_reporter_),$/;"	m	namespace:testing::internal	file:
default_result_printer	include/gtest/gtest.h	/^  TestEventListener* default_result_printer() const {$/;"	f	class:testing::TestEventListeners
default_result_printer_	include/gtest/gtest.h	/^  TestEventListener* default_result_printer_;$/;"	m	class:testing::TestEventListeners
default_xml_generator	include/gtest/gtest.h	/^  TestEventListener* default_xml_generator() const {$/;"	f	class:testing::TestEventListeners
default_xml_generator_	include/gtest/gtest.h	/^  TestEventListener* default_xml_generator_;$/;"	m	class:testing::TestEventListeners
difference_type	include/gtest/internal/gtest-param-util.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:testing::internal::ParamIterator
difflib	test/googletest-output-test.py	/^import difflib$/;"	i
disabled_test_count	src/gtest.cc	/^int TestSuite::disabled_test_count() const {$/;"	f	class:testing::TestSuite
disabled_test_count	src/gtest.cc	/^int UnitTest::disabled_test_count() const {$/;"	f	class:testing::UnitTest
disabled_test_count	src/gtest.cc	/^int UnitTestImpl::disabled_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
dummy_	include/gtest/internal/gtest-internal.h	/^  static bool dummy_;$/;"	m	class:testing::internal::TypeIdHelper
dummy_	include/gtest/internal/gtest-internal.h	/^bool TypeIdHelper<T>::dummy_ = false;$/;"	m	class:testing::internal::TypeIdHelper
dummy_value	test/googletest-param-test-test.cc	/^  const int& dummy_value() const { return value_; }$/;"	f	class:Unstreamable
dynamic_test	test/googletest-output-test_.cc	/^auto dynamic_test = ($/;"	v
dynamic_test	test/gtest_unittest.cc	/^auto* dynamic_test = testing::RegisterTest($/;"	v
edit_distance	include/gtest/internal/gtest-internal.h	/^namespace edit_distance {$/;"	n	namespace:testing::internal
edit_distance	src/gtest.cc	/^namespace edit_distance {$/;"	n	namespace:testing::internal	file:
elapsed_time	include/gtest/gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestResult
elapsed_time	include/gtest/gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestSuite
elapsed_time	src/gtest-internal-inl.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::internal::UnitTestImpl
elapsed_time	src/gtest.cc	/^internal::TimeInMillis UnitTest::elapsed_time() const {$/;"	f	class:testing::UnitTest
elapsed_time_	include/gtest/gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestResult
elapsed_time_	include/gtest/gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestSuite
elapsed_time_	src/gtest-internal-inl.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::internal::UnitTestImpl
element	samples/sample3-inl.h	/^  const E& element() const { return element_; }$/;"	f	class:QueueNode
element_	samples/sample3-inl.h	/^  E element_;$/;"	m	class:QueueNode
end	include/gtest/internal/gtest-internal.h	/^  const_iterator end() const { return array_ + size_; }$/;"	f	class:testing::internal::NativeArray
end	include/gtest/internal/gtest-param-util.h	/^  iterator end() const { return iterator(impl_->End()); }$/;"	f	class:testing::internal::ParamGenerator
end	test/googletest-printers-test.cc	/^  iterator end() const { return iterator(); }$/;"	f	class:foo::PathLike
end_	include/gtest/internal/gtest-param-util.h	/^    std::tuple<typename ParamGenerator<T>::iterator...> end_;$/;"	m	class:testing::internal::CartesianProductGenerator::IteratorImpl
end_	include/gtest/internal/gtest-param-util.h	/^  const T end_;$/;"	m	class:testing::internal::RangeGenerator
end_index_	include/gtest/internal/gtest-param-util.h	/^  const int end_index_;$/;"	m	class:testing::internal::RangeGenerator
environ	src/gtest-death-test.cc	/^extern "C" char** environ;$/;"	m	namespace:testing::internal	file:
environ	test/googletest-break-on-failure-unittest.py	/^environ = gtest_test_utils.environ$/;"	v
environ	test/googletest-catch-exceptions-test.py	/^environ = gtest_test_utils.environ$/;"	v
environ	test/googletest-env-var-test.py	/^environ = os.environ.copy()$/;"	v
environ	test/googletest-filter-unittest.py	/^environ = os.environ.copy()$/;"	v
environ	test/gtest_test_utils.py	/^environ = os.environ.copy()$/;"	v
environments	src/gtest-internal-inl.h	/^  std::vector<Environment*>& environments() { return environments_; }$/;"	f	class:testing::internal::UnitTestImpl
environments_	src/gtest-internal-inl.h	/^  std::vector<Environment*> environments_;$/;"	m	class:testing::internal::UnitTestImpl
errno	test/googletest-json-output-unittest.py	/^import errno$/;"	i
errno	test/gtest_xml_output_unittest.py	/^import errno$/;"	i
event_	include/gtest/internal/gtest-port.h	/^  AutoHandle event_;$/;"	m	class:testing::internal::Notification
event_handle_	src/gtest-death-test.cc	/^  AutoHandle event_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
exception_channel_	src/gtest-death-test.cc	/^  zx::channel exception_channel_;$/;"	m	class:testing::internal::FuchsiaDeathTest	file:
exit_code_	include/gtest/gtest-death-test.h	/^  const int exit_code_;$/;"	m	class:testing::ExitedWithCode
expected_to_finish_	scripts/gen_gtest_pred_impl.py	/^    expected_to_finish_ = true;$/;"	v	class:Predicate
expected_to_finish_	scripts/gen_gtest_pred_impl.py	/^  expected_to_finish_ = false;$/;"	v
expected_to_finish_	test/gtest_pred_impl_unittest.cc	/^  static bool expected_to_finish_;$/;"	m	class:Predicate1Test	file:
expected_to_finish_	test/gtest_pred_impl_unittest.cc	/^  static bool expected_to_finish_;$/;"	m	class:Predicate2Test	file:
expected_to_finish_	test/gtest_pred_impl_unittest.cc	/^  static bool expected_to_finish_;$/;"	m	class:Predicate3Test	file:
expected_to_finish_	test/gtest_pred_impl_unittest.cc	/^  static bool expected_to_finish_;$/;"	m	class:Predicate4Test	file:
expected_to_finish_	test/gtest_pred_impl_unittest.cc	/^  static bool expected_to_finish_;$/;"	m	class:Predicate5Test	file:
expected_to_finish_	test/gtest_pred_impl_unittest.cc	/^bool Predicate1Test::expected_to_finish_;$/;"	m	class:Predicate1Test	file:
expected_to_finish_	test/gtest_pred_impl_unittest.cc	/^bool Predicate2Test::expected_to_finish_;$/;"	m	class:Predicate2Test	file:
expected_to_finish_	test/gtest_pred_impl_unittest.cc	/^bool Predicate3Test::expected_to_finish_;$/;"	m	class:Predicate3Test	file:
expected_to_finish_	test/gtest_pred_impl_unittest.cc	/^bool Predicate4Test::expected_to_finish_;$/;"	m	class:Predicate4Test	file:
expected_to_finish_	test/gtest_pred_impl_unittest.cc	/^bool Predicate5Test::expected_to_finish_;$/;"	m	class:Predicate5Test	file:
exponent_bits	include/gtest/internal/gtest-internal.h	/^  Bits exponent_bits() const { return kExponentBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
factory_	include/gtest/gtest.h	/^  internal::TestFactoryBase* const factory_;  \/\/ The factory that creates$/;"	m	class:testing::TestInfo::internal
factory_	test/googletest-death-test-test.cc	/^  static MockDeathTestFactory* factory_;$/;"	m	class:__anon28::MacroLogicDeathTest	file:
factory_	test/googletest-death-test-test.cc	/^MockDeathTestFactory* MacroLogicDeathTest::factory_ = nullptr;$/;"	m	class:__anon28::MacroLogicDeathTest	file:
failed	include/gtest/gtest-test-part.h	/^  bool failed() const { return fatally_failed() || nonfatally_failed(); }$/;"	f	class:testing::TestPartResult
failed_test_case_count	src/gtest.cc	/^int UnitTest::failed_test_case_count() const {$/;"	f	class:testing::UnitTest
failed_test_count	src/gtest.cc	/^int TestSuite::failed_test_count() const {$/;"	f	class:testing::TestSuite
failed_test_count	src/gtest.cc	/^int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }$/;"	f	class:testing::UnitTest
failed_test_count	src/gtest.cc	/^int UnitTestImpl::failed_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
failed_test_suite_count	src/gtest.cc	/^int UnitTest::failed_test_suite_count() const {$/;"	f	class:testing::UnitTest
failed_test_suite_count	src/gtest.cc	/^int UnitTestImpl::failed_test_suite_count() const {$/;"	f	class:testing::internal::UnitTestImpl
failure_in_set_up_	test/gtest_environment_test.cc	/^  FailureType failure_in_set_up_;$/;"	m	class:__anon26::MyEnvironment	file:
failure_message	include/gtest/gtest.h	/^  const char* failure_message() const { return message(); }$/;"	f	class:testing::AssertionResult
fake_sock_writer_	test/gtest_unittest.cc	/^  FakeSocketWriter* const fake_sock_writer_;$/;"	m	class:testing::internal::StreamingListenerTest	file:
faketype	include/gtest/gtest.h	/^struct faketype {};$/;"	s	namespace:testing::internal
fatally_failed	include/gtest/gtest-test-part.h	/^  bool fatally_failed() const { return type_ == kFatalFailure; }$/;"	f	class:testing::TestPartResult
fd_	src/gtest-port.cc	/^  const int fd_;  \/\/ A stream to capture.$/;"	m	class:testing::internal::CapturedStream	file:
file	include/gtest/gtest.h	/^    const char* const file;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
file	include/gtest/gtest.h	/^  const char* file() const { return location_.file.c_str(); }$/;"	f	class:testing::TestInfo
file	include/gtest/internal/gtest-death-test-internal.h	/^  const std::string& file() const { return file_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
file	include/gtest/internal/gtest-internal.h	/^  std::string file;$/;"	m	struct:testing::internal::CodeLocation
file	include/gtest/internal/gtest-param-util.h	/^      const char* file;$/;"	m	struct:testing::internal::ParameterizedTestSuiteInfo::InstantiationInfo
file	src/gtest-internal-inl.h	/^  const char* file;$/;"	m	struct:testing::internal::TraceInfo
file_	include/gtest/internal/gtest-death-test-internal.h	/^  std::string file_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
file_	src/gtest-death-test.cc	/^  const char* const file_;$/;"	m	class:testing::internal::ExecDeathTest	file:
file_	src/gtest-death-test.cc	/^  const char* const file_;$/;"	m	class:testing::internal::FuchsiaDeathTest	file:
file_	src/gtest-death-test.cc	/^  const char* const file_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
file_name	include/gtest/gtest-test-part.h	/^  const char* file_name() const {$/;"	f	class:testing::TestPartResult
file_name_	include/gtest/gtest-test-part.h	/^  std::string file_name_;$/;"	m	class:testing::TestPartResult
filename_	src/gtest-port.cc	/^  ::std::string filename_;$/;"	m	class:testing::internal::CapturedStream	file:
filter	test/gtest_unittest.cc	/^  const char* filter;$/;"	m	struct:testing::Flags	file:
filter_	src/gtest-internal-inl.h	/^  std::string filter_;$/;"	m	class:testing::internal::GTestFlagSaver
finished_	include/gtest/internal/gtest-port.h	/^  bool finished_;  \/\/ true if and only if we know that the thread function has$/;"	m	class:testing::internal::ThreadWithParam
finished_	test/gtest_pred_impl_unittest.cc	/^  static bool finished_;$/;"	m	class:Predicate1Test	file:
finished_	test/gtest_pred_impl_unittest.cc	/^  static bool finished_;$/;"	m	class:Predicate2Test	file:
finished_	test/gtest_pred_impl_unittest.cc	/^  static bool finished_;$/;"	m	class:Predicate3Test	file:
finished_	test/gtest_pred_impl_unittest.cc	/^  static bool finished_;$/;"	m	class:Predicate4Test	file:
finished_	test/gtest_pred_impl_unittest.cc	/^  static bool finished_;$/;"	m	class:Predicate5Test	file:
finished_	test/gtest_pred_impl_unittest.cc	/^bool Predicate1Test::finished_;$/;"	m	class:Predicate1Test	file:
finished_	test/gtest_pred_impl_unittest.cc	/^bool Predicate2Test::finished_;$/;"	m	class:Predicate2Test	file:
finished_	test/gtest_pred_impl_unittest.cc	/^bool Predicate3Test::finished_;$/;"	m	class:Predicate3Test	file:
finished_	test/gtest_pred_impl_unittest.cc	/^bool Predicate4Test::finished_;$/;"	m	class:Predicate4Test	file:
finished_	test/gtest_pred_impl_unittest.cc	/^bool Predicate5Test::finished_;$/;"	m	class:Predicate5Test	file:
fixture_class_id_	include/gtest/gtest.h	/^  const internal::TypeId fixture_class_id_;  \/\/ ID of the test fixture class$/;"	m	class:testing::TestInfo
fixture_constructor_count_	test/googletest-param-test-test.cc	/^  int fixture_constructor_count_;$/;"	m	class:TestGenerationEnvironment	file:
foo	test/googletest-output-test_.cc	/^namespace foo {$/;"	n	file:
foo	test/googletest-printers-test.cc	/^namespace foo {$/;"	n	file:
foo	test/gtest_unittest.cc	/^  Foo foo;$/;"	m	class:__anon42::FRIEND_TEST_Test2	file:
forwarding_enabled	src/gtest.cc	/^  bool forwarding_enabled() const { return forwarding_enabled_; }$/;"	f	class:testing::internal::TestEventRepeater
forwarding_enabled_	src/gtest.cc	/^  bool forwarding_enabled_;$/;"	m	class:testing::internal::TestEventRepeater	file:
fraction_bits	include/gtest/internal/gtest-internal.h	/^  Bits fraction_bits() const { return kFractionBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
full_match_	include/gtest/gtest-matchers.h	/^  const bool full_match_;$/;"	m	class:testing::internal::MatchesRegexMatcher
full_pattern_	include/gtest/internal/gtest-port.h	/^  const char* full_pattern_;  \/\/ For FullMatch();$/;"	m	class:testing::internal::RE
full_regex_	include/gtest/internal/gtest-port.h	/^  regex_t full_regex_;     \/\/ For FullMatch().$/;"	m	class:testing::internal::RE
func_	include/gtest/internal/gtest-port.h	/^    UserThreadFunc* const func_;$/;"	m	class:testing::internal::ThreadWithParam::RunnableImpl
func_	include/gtest/internal/gtest-port.h	/^  UserThreadFunc* const func_;  \/\/ User-supplied thread function.$/;"	m	class:testing::internal::ThreadWithParam
further_from_infinity	test/gtest_unittest.cc	/^    RawType further_from_infinity;$/;"	m	struct:__anon40::FloatingPointTest::TestValues	file:
further_from_negative_zero	test/gtest_unittest.cc	/^    RawType further_from_negative_zero;$/;"	m	struct:__anon40::FloatingPointTest::TestValues	file:
further_from_one	test/gtest_unittest.cc	/^    RawType further_from_one;$/;"	m	struct:__anon40::FloatingPointTest::TestValues	file:
g_argvs	src/gtest.cc	/^static ::std::vector<std::string> g_argvs;$/;"	m	namespace:testing::internal	file:
g_captured_stderr	src/gtest-port.cc	/^static CapturedStream* g_captured_stderr = nullptr;$/;"	m	namespace:testing::internal	file:
g_captured_stdout	src/gtest-port.cc	/^static CapturedStream* g_captured_stdout = nullptr;$/;"	m	namespace:testing::internal	file:
g_death_test_count	test/gtest_repeat_test.cc	/^int g_death_test_count = 0;$/;"	m	namespace:__anon31	file:
g_environment_set_up_count	test/gtest_repeat_test.cc	/^int g_environment_set_up_count = 0;$/;"	m	namespace:__anon31	file:
g_environment_tear_down_count	test/gtest_repeat_test.cc	/^int g_environment_tear_down_count = 0;$/;"	m	namespace:__anon31	file:
g_help_flag	src/gtest.cc	/^bool g_help_flag = false;$/;"	m	namespace:testing::internal	file:
g_in_fast_death_test_child	src/gtest-death-test.cc	/^static bool g_in_fast_death_test_child = false;$/;"	m	namespace:testing::internal	file:
g_injected_test_argvs	src/gtest-port.cc	/^static const std::vector<std::string>* g_injected_test_argvs =$/;"	m	namespace:testing::internal	file:
g_param_test_count	test/gtest_repeat_test.cc	/^int g_param_test_count = 0;$/;"	m	namespace:__anon31	file:
g_should_fail_count	test/gtest_repeat_test.cc	/^int g_should_fail_count = 0;$/;"	m	namespace:__anon31	file:
g_should_pass_count	test/gtest_repeat_test.cc	/^int g_should_pass_count = 0;$/;"	m	namespace:__anon31	file:
g_sum	test/gtest_unittest.cc	/^static int g_sum = 0;$/;"	m	namespace:__anon40	file:
generator	include/gtest/internal/gtest-param-util.h	/^      GeneratorCreationFunc* generator;$/;"	m	struct:testing::internal::ParameterizedTestSuiteInfo::InstantiationInfo
generators_	include/gtest/internal/gtest-param-util.h	/^  std::tuple<Gen...> generators_;$/;"	m	class:testing::internal::CartesianProductHolder
get	include/gtest/internal/gtest-port.h	/^  const T& get() const { return *pointer(); }$/;"	f	class:testing::internal::ThreadLocal
get	include/gtest/internal/gtest-port.h	/^  const T& get() const { return value_; }$/;"	f	class:testing::internal::ThreadLocal
getpass	scripts/upload.py	/^import getpass$/;"	i
global_count_	test/googletest-param-test-test.cc	/^  static int global_count_;$/;"	m	class:ParameterizedDerivedTest	file:
global_count_	test/googletest-param-test-test.cc	/^  static int global_count_;$/;"	m	class:SeparateInstanceTest	file:
global_count_	test/googletest-param-test-test.cc	/^int ParameterizedDerivedTest::global_count_ = 0;$/;"	m	class:ParameterizedDerivedTest	file:
global_count_	test/googletest-param-test-test.cc	/^int SeparateInstanceTest::global_count_ = 0;$/;"	m	class:SeparateInstanceTest	file:
global_integer	test/googletest-output-test_.cc	/^int global_integer = 0;$/;"	v
global_test_part_result_reporter_mutex_	src/gtest-internal-inl.h	/^  internal::Mutex global_test_part_result_reporter_mutex_;$/;"	m	class:testing::internal::UnitTestImpl
global_test_part_result_repoter_	src/gtest-internal-inl.h	/^  TestPartResultReporterInterface* global_test_part_result_repoter_;$/;"	m	class:testing::internal::UnitTestImpl
global_var	test/gtest_unittest.cc	/^static int global_var = 0;$/;"	m	namespace:__anon40	file:
group	scripts/upload.py	/^group = parser.add_option_group("Issue options")$/;"	v
group	scripts/upload.py	/^group = parser.add_option_group("Logging options")$/;"	v
group	scripts/upload.py	/^group = parser.add_option_group("Patch options")$/;"	v
group	scripts/upload.py	/^group = parser.add_option_group("Review server options")$/;"	v
gtest_flag_saver_	include/gtest/gtest.h	/^  const std::unique_ptr<GTEST_FLAG_SAVER_> gtest_flag_saver_;$/;"	m	class:testing::Test
gtest_json_test_utils	test/googletest-json-outfiles-test.py	/^import gtest_json_test_utils$/;"	i
gtest_json_test_utils	test/googletest-json-output-unittest.py	/^import gtest_json_test_utils$/;"	i
gtest_printers_test	test/googletest-printers-test.cc	/^namespace gtest_printers_test {$/;"	n	namespace:testing	file:
gtest_test_utils	test/googletest-break-on-failure-unittest.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/googletest-catch-exceptions-test.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/googletest-color-test.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/googletest-env-var-test.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/googletest-filter-unittest.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/googletest-json-outfiles-test.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/googletest-json-output-unittest.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/googletest-list-tests-unittest.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/googletest-output-test.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/googletest-param-test-invalid-name1-test.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/googletest-param-test-invalid-name2-test.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/googletest-shuffle-test.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/googletest-throw-on-failure-test.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/googletest-uninitialized-test.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/gtest_help_test.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/gtest_list_output_unittest.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/gtest_skip_environment_check_output_test.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/gtest_testbridge_test.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/gtest_xml_outfiles_test.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/gtest_xml_output_unittest.py	/^import gtest_test_utils$/;"	i
gtest_test_utils	test/gtest_xml_test_utils.py	/^import gtest_test_utils$/;"	i
gtest_trace_stack	src/gtest-internal-inl.h	/^  const std::vector<TraceInfo>& gtest_trace_stack() const {$/;"	f	class:testing::internal::UnitTestImpl
gtest_trace_stack	src/gtest-internal-inl.h	/^  std::vector<TraceInfo>& gtest_trace_stack() {$/;"	f	class:testing::internal::UnitTestImpl
gtest_trace_stack_	src/gtest-internal-inl.h	/^  internal::ThreadLocal<std::vector<TraceInfo> > gtest_trace_stack_;$/;"	m	class:testing::internal::UnitTestImpl
gtest_xml_test_utils	test/gtest_xml_outfiles_test.py	/^import gtest_xml_test_utils$/;"	i
gtest_xml_test_utils	test/gtest_xml_output_unittest.py	/^import gtest_xml_test_utils$/;"	i
handle_	include/gtest/internal/gtest-port.h	/^  Handle handle_;$/;"	m	class:testing::internal::AutoHandle
has_edits	src/gtest.cc	/^  bool has_edits() const { return adds_ || removes_; }$/;"	f	class:testing::internal::edit_distance::__anon12::Hunk
has_new_fatal_failure	include/gtest/gtest-test-part.h	/^  bool has_new_fatal_failure() const { return has_new_fatal_failure_; }$/;"	f	class:testing::internal::HasNewFatalFailureHelper
has_new_fatal_failure_	include/gtest/gtest-test-part.h	/^  bool has_new_fatal_failure_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
has_owner_	include/gtest/internal/gtest-port.h	/^  bool has_owner_;$/;"	m	class:testing::internal::MutexBase
hasher	test/gtest_unittest.cc	/^  typedef void hasher;$/;"	t	struct:AHashTable	file:
hasher	test/gtest_unittest.cc	/^  typedef void hasher;$/;"	t	struct:NotReallyAHashTable	file:
head_	samples/sample3-inl.h	/^  QueueNode<E>* head_;  \/\/ The first node of the queue.$/;"	m	class:Queue
host_name_	src/gtest-internal-inl.h	/^    const std::string host_name_;$/;"	m	class:testing::internal::StreamingListener::SocketWriter
hunk_	src/gtest.cc	/^  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;$/;"	m	class:testing::internal::edit_distance::__anon12::Hunk	file:
hunk_adds_	src/gtest.cc	/^  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;$/;"	m	class:testing::internal::edit_distance::__anon12::Hunk	file:
hunk_removes_	src/gtest.cc	/^  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;$/;"	m	class:testing::internal::edit_distance::__anon12::Hunk	file:
id_	test/gtest_unittest.cc	/^  const char* const id_;$/;"	m	class:SequenceTestingListener	file:
identifying_attribute	test/gtest_xml_test_utils.py	/^  identifying_attribute = {$/;"	v	class:GTestXMLTestCase
ids_	src/gtest.cc	/^  IdMap ids_;$/;"	m	class:testing::internal::edit_distance::__anon11::InternalStrings	file:
impl	include/gtest/gtest-matchers.h	/^  const Impl& impl() const { return impl_; }$/;"	f	class:testing::PolymorphicMatcher
impl	include/gtest/gtest.h	/^  const internal::UnitTestImpl* impl() const { return impl_; }$/;"	f	class:testing::UnitTest
impl	include/gtest/gtest.h	/^  internal::UnitTestImpl* impl() { return impl_; }$/;"	f	class:testing::UnitTest
impl_	include/gtest/gtest-matchers.h	/^    const Impl impl_;$/;"	m	class:testing::PolymorphicMatcher::MonomorphicImpl
impl_	include/gtest/gtest-matchers.h	/^  Impl impl_;$/;"	m	class:testing::PolymorphicMatcher
impl_	include/gtest/gtest-matchers.h	/^  const MatcherInterface<T>* const impl_;$/;"	m	class:testing::internal::MatcherInterfaceAdapter
impl_	include/gtest/gtest-matchers.h	/^  std::shared_ptr<const MatcherInterface<const T&>> impl_;$/;"	m	class:testing::internal::MatcherBase
impl_	include/gtest/gtest.h	/^  internal::UnitTestImpl* impl_;$/;"	m	class:testing::UnitTest
impl_	include/gtest/internal/gtest-param-util.h	/^  std::shared_ptr<const ParamGeneratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamGenerator
impl_	include/gtest/internal/gtest-param-util.h	/^  std::unique_ptr<ParamIteratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamIterator
increment_death_test_count	include/gtest/gtest.h	/^  int increment_death_test_count() { return ++death_test_count_; }$/;"	f	class:testing::TestResult
increment_death_test_count	include/gtest/gtest.h	/^  int increment_death_test_count() {$/;"	f	class:testing::TestInfo
index	include/gtest/internal/gtest-death-test-internal.h	/^  int index() const { return index_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
index	include/gtest/internal/gtest-param-util.h	/^  size_t index;$/;"	m	struct:testing::TestParamInfo
index_	include/gtest/internal/gtest-death-test-internal.h	/^  int index_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
index_	include/gtest/internal/gtest-param-util.h	/^    int index_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
index_	test/googletest-port-test.cc	/^  const size_t index_;$/;"	m	class:testing::internal::DestructorTracker	file:
index_var_	test/gtest_unittest.cc	/^  const char* index_var_;$/;"	m	class:__anon40::ShouldShardTest	file:
infinity	test/gtest_unittest.cc	/^    RawType infinity;$/;"	m	struct:__anon40::FloatingPointTest::TestValues	file:
initially_allocated_	samples/sample10_unittest.cc	/^  int initially_allocated_;$/;"	m	class:__anon4::LeakChecker	file:
instantiations_	include/gtest/internal/gtest-param-util.h	/^  InstantiationContainer instantiations_;$/;"	m	class:testing::internal::ParameterizedTestSuiteInfo
intercept_mode_	include/gtest/gtest-spi.h	/^  const InterceptMode intercept_mode_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter
internal	include/gtest/gtest-death-test.h	/^namespace internal {$/;"	n	namespace:testing
internal	include/gtest/gtest-matchers.h	/^namespace internal {$/;"	n	namespace:testing
internal	include/gtest/gtest-message.h	/^namespace internal {$/;"	n	namespace:testing
internal	include/gtest/gtest-printers.h	/^namespace internal {$/;"	n	namespace:testing
internal	include/gtest/gtest-spi.h	/^namespace internal {$/;"	n	namespace:testing
internal	include/gtest/gtest-test-part.h	/^namespace internal {$/;"	n	namespace:testing
internal	include/gtest/gtest.h	/^namespace internal {$/;"	n	namespace:testing
internal	include/gtest/internal/gtest-death-test-internal.h	/^namespace internal {$/;"	n	namespace:testing
internal	include/gtest/internal/gtest-filepath.h	/^namespace internal {$/;"	n	namespace:testing
internal	include/gtest/internal/gtest-internal.h	/^namespace internal {$/;"	n	namespace:testing
internal	include/gtest/internal/gtest-param-util.h	/^namespace internal {$/;"	n	namespace:testing
internal	include/gtest/internal/gtest-port.h	/^namespace internal {$/;"	n	namespace:testing
internal	include/gtest/internal/gtest-string.h	/^namespace internal {$/;"	n	namespace:testing
internal	include/gtest/internal/gtest-type-util.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/gtest-death-test.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	src/gtest-filepath.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	src/gtest-internal-inl.h	/^namespace internal {$/;"	n	namespace:testing
internal	src/gtest-port.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	src/gtest-printers.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	src/gtest-test-part.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	src/gtest-typed-test.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	src/gtest.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	test/googletest-death-test-test.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	test/googletest-filepath-test.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	test/googletest-listener-test.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	test/googletest-options-test.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	test/googletest-port-test.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	test/gtest-unittest-api_test.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal	test/gtest_unittest.cc	/^namespace internal {$/;"	n	namespace:testing	file:
internal2	include/gtest/gtest-printers.h	/^namespace internal2 {$/;"	n	namespace:testing
internal2	src/gtest-printers.cc	/^namespace internal2 {$/;"	n	namespace:testing	file:
internal_run_death_test_	src/gtest-internal-inl.h	/^  std::string internal_run_death_test_;$/;"	m	class:testing::internal::GTestFlagSaver
internal_run_death_test_flag	src/gtest-internal-inl.h	/^  const InternalRunDeathTestFlag* internal_run_death_test_flag() const {$/;"	f	class:testing::internal::UnitTestImpl
internal_run_death_test_flag_	src/gtest-internal-inl.h	/^  std::unique_ptr<InternalRunDeathTestFlag> internal_run_death_test_flag_;$/;"	m	class:testing::internal::UnitTestImpl
invoked_	test/googletest-port-test.cc	/^  bool invoked_;$/;"	m	class:testing::internal::DestructorCall	file:
is_destroyed_	test/gtest_unittest.cc	/^  bool* is_destroyed_;$/;"	m	class:TestListener	file:
is_disabled_	include/gtest/gtest.h	/^  bool is_disabled_;          \/\/ True if and only if this test is disabled$/;"	m	class:testing::TestInfo
is_in_another_shard	include/gtest/gtest.h	/^  bool is_in_another_shard() const { return is_in_another_shard_; }$/;"	f	class:testing::TestInfo
is_in_another_shard_	include/gtest/gtest.h	/^  bool is_in_another_shard_;  \/\/ Will be run in another shard.$/;"	m	class:testing::TestInfo
is_nan	include/gtest/internal/gtest-internal.h	/^  bool is_nan() const {$/;"	f	class:testing::internal::FloatingPoint
is_prime_	samples/prime_tables.h	/^  bool* const is_prime_;$/;"	m	class:PreCalculatedPrimeTable
is_prime_size_	samples/prime_tables.h	/^  const int is_prime_size_;$/;"	m	class:PreCalculatedPrimeTable
is_reportable	include/gtest/gtest.h	/^  bool is_reportable() const {$/;"	f	class:testing::TestInfo
is_valid_	include/gtest/internal/gtest-port.h	/^  bool is_valid_;$/;"	m	class:testing::internal::RE
iterator	include/gtest/internal/gtest-internal.h	/^  typedef Element* iterator;$/;"	t	class:testing::internal::NativeArray
iterator	include/gtest/internal/gtest-param-util.h	/^  typedef ParamIterator<T> iterator;$/;"	t	class:testing::internal::ParamGenerator
iterator	test/googletest-printers-test.cc	/^  struct iterator {$/;"	s	class:foo::PathLike	file:
iterator	test/googletest-printers-test.cc	/^struct iterator {$/;"	s	namespace:testing::gtest_printers_test	file:
iterator_	include/gtest/internal/gtest-param-util.h	/^    typename ContainerType::const_iterator iterator_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
json	test/googletest-json-outfiles-test.py	/^import json$/;"	i
json	test/googletest-json-output-unittest.py	/^import json$/;"	i
kAE1	test/googletest-printers-test.cc	/^  kAE1 = -1,$/;"	e	enum:AnonymousEnum	file:
kAE2	test/googletest-printers-test.cc	/^  kAE2 = 1$/;"	e	enum:AnonymousEnum	file:
kAdd	include/gtest/internal/gtest-internal.h	/^enum EditType { kMatch, kAdd, kRemove, kReplace };$/;"	e	enum:testing::internal::edit_distance::EditType
kAlsoRunDisabledTestsFlag	src/gtest-internal-inl.h	/^const char kAlsoRunDisabledTestsFlag[] = "also_run_disabled_tests";$/;"	m	namespace:testing::internal
kAlternatePathSeparator	src/gtest-filepath.cc	/^const char kAlternatePathSeparator = '\/';$/;"	m	namespace:testing::internal	file:
kAlternatePathSeparatorString	src/gtest-filepath.cc	/^const char kAlternatePathSeparatorString[] = "\/";$/;"	m	namespace:testing::internal	file:
kAsIs	src/gtest-printers.cc	/^  kAsIs,$/;"	e	enum:testing::internal::CharFormat	file:
kBiggestParsableMax	test/googletest-death-test-test.cc	/^const BiggestParsable kBiggestParsableMax = ULLONG_MAX;$/;"	m	namespace:__anon28	file:
kBiggestSignedParsableMax	test/googletest-death-test-test.cc	/^const BiggestSignedParsable kBiggestSignedParsableMax = LLONG_MAX;$/;"	m	namespace:__anon28	file:
kBitCount	include/gtest/internal/gtest-internal.h	/^  static const size_t kBitCount = 8*sizeof(RawType);$/;"	m	class:testing::internal::FloatingPoint
kBreakOnFailureFlag	src/gtest-internal-inl.h	/^const char kBreakOnFailureFlag[] = "break_on_failure";$/;"	m	namespace:testing::internal
kCaseA	test/gtest_unittest.cc	/^  kCaseA = -1,$/;"	e	enum:__anon40::__anon41	file:
kCaseB	test/gtest_unittest.cc	/^  kCaseB = testing::internal::kMaxBiggestInt,$/;"	e	enum:__anon40::__anon41	file:
kCaseC	test/gtest_unittest.cc	/^  kCaseC = 42$/;"	e	enum:__anon40::__anon41	file:
kCatchExceptionsFlag	src/gtest-internal-inl.h	/^const char kCatchExceptionsFlag[] = "catch_exceptions";$/;"	m	namespace:testing::internal
kColorEncodedHelpMessage	src/gtest.cc	/^static const char kColorEncodedHelpMessage[] =$/;"	m	namespace:testing::internal	file:
kColorFlag	src/gtest-internal-inl.h	/^const char kColorFlag[] = "color";$/;"	m	namespace:testing::internal
kConvertibleToInteger	include/gtest/gtest-printers.h	/^  kConvertibleToInteger,  \/\/ a type implicitly convertible to BiggestInt$/;"	e	enum:testing::internal2::TypeKind
kConvertibleToStringView	include/gtest/gtest-printers.h	/^  kConvertibleToStringView,  \/\/ a type implicitly convertible to$/;"	e	enum:testing::internal2::TypeKind
kCurrentDirectoryString	src/gtest-filepath.cc	/^const char kCurrentDirectoryString[] = ".\\\\";$/;"	m	namespace:testing::internal	file:
kCurrentDirectoryString	src/gtest-filepath.cc	/^const char kCurrentDirectoryString[] = "\\\\";$/;"	m	namespace:testing::internal	file:
kDeathTestInternalError	src/gtest-death-test.cc	/^static const char kDeathTestInternalError = 'I';$/;"	m	namespace:testing::internal	file:
kDeathTestLived	src/gtest-death-test.cc	/^static const char kDeathTestLived = 'L';$/;"	m	namespace:testing::internal	file:
kDeathTestReturned	src/gtest-death-test.cc	/^static const char kDeathTestReturned = 'R';$/;"	m	namespace:testing::internal	file:
kDeathTestStyleFlag	include/gtest/internal/gtest-death-test-internal.h	/^const char kDeathTestStyleFlag[] = "death_test_style";$/;"	m	namespace:testing::internal
kDeathTestSuiteFilter	src/gtest.cc	/^static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest\/*";$/;"	m	namespace:testing	file:
kDeathTestThrew	src/gtest-death-test.cc	/^static const char kDeathTestThrew = 'T';$/;"	m	namespace:testing::internal	file:
kDeathTestUseFork	include/gtest/internal/gtest-death-test-internal.h	/^const char kDeathTestUseFork[] = "death_test_use_fork";$/;"	m	namespace:testing::internal
kDefaultDeathTestStyle	src/gtest-death-test.cc	/^static const char kDefaultDeathTestStyle[] = GTEST_DEFAULT_DEATH_TEST_STYLE;$/;"	m	namespace:testing	file:
kDefaultOutputFile	src/gtest.cc	/^static const char kDefaultOutputFile[] = "test_detail";$/;"	m	namespace:testing	file:
kDefaultOutputFormat	src/gtest.cc	/^static const char kDefaultOutputFormat[] = "xml";$/;"	m	namespace:testing	file:
kDisableTestFilter	src/gtest.cc	/^static const char kDisableTestFilter[] = "DISABLED_*:*\/DISABLED_*";$/;"	m	namespace:testing	file:
kDynamic	include/gtest/internal/gtest-port.h	/^  enum MutexType { kStatic = 0, kDynamic = 1 };$/;"	e	enum:testing::internal::Mutex::MutexType
kE1	test/gtest_unittest.cc	/^  kE1 = 0,$/;"	e	enum:__anon40::NamedEnum	file:
kE2	test/gtest_unittest.cc	/^  kE2 = 1$/;"	e	enum:__anon40::NamedEnum	file:
kEWP1	test/googletest-printers-test.cc	/^  kEWP1 = -2,$/;"	e	enum:EnumWithoutPrinter	file:
kEWP2	test/googletest-printers-test.cc	/^  kEWP2 = 42$/;"	e	enum:EnumWithoutPrinter	file:
kEWPT1	test/googletest-printers-test.cc	/^  kEWPT1 = 1$/;"	e	enum:EnumWithPrintTo	file:
kEWS1	test/googletest-printers-test.cc	/^  kEWS1 = 10$/;"	e	enum:EnumWithStreaming	file:
kElidedFramesMarker	src/gtest-internal-inl.h	/^  static const char* const kElidedFramesMarker;$/;"	m	class:testing::internal::OsStackTraceGetterInterface
kElidedFramesMarker	src/gtest.cc	/^const char* const OsStackTraceGetterInterface::kElidedFramesMarker =$/;"	m	class:testing::internal::OsStackTraceGetterInterface	file:
kExponentBitCount	include/gtest/internal/gtest-internal.h	/^  static const size_t kExponentBitCount = kBitCount - 1 - kFractionBitCount;$/;"	m	class:testing::internal::FloatingPoint
kExponentBitMask	include/gtest/internal/gtest-internal.h	/^  static const Bits kExponentBitMask = ~(kSignBitMask | kFractionBitMask);$/;"	m	class:testing::internal::FloatingPoint
kFatalFailure	include/gtest/gtest-test-part.h	/^    kFatalFailure,     \/\/ Failed and the test should be terminated.$/;"	e	enum:testing::TestPartResult::Type
kFilterFlag	src/gtest-internal-inl.h	/^const char kFilterFlag[] = "filter";$/;"	m	namespace:testing::internal
kFlagfileFlag	src/gtest-internal-inl.h	/^const char kFlagfileFlag[] = "flagfile";$/;"	m	namespace:testing::internal
kFractionBitCount	include/gtest/internal/gtest-internal.h	/^  static const size_t kFractionBitCount =$/;"	m	class:testing::internal::FloatingPoint
kFractionBitMask	include/gtest/internal/gtest-internal.h	/^  static const Bits kFractionBitMask =$/;"	m	class:testing::internal::FloatingPoint
kFuchsiaReadPipeFd	src/gtest-death-test.cc	/^static const int kFuchsiaReadPipeFd = 3;$/;"	m	namespace:testing::internal	file:
kGoldenString	test/googletest-output-test_.cc	/^static const char kGoldenString[] = "\\"Line\\0 1\\"\\nLine 2";$/;"	v	file:
kHelloString	samples/sample2_unittest.cc	/^const char kHelloString[] = "Hello, world!";$/;"	m	namespace:__anon6	file:
kHexEscape	src/gtest-printers.cc	/^  kHexEscape,$/;"	e	enum:testing::internal::CharFormat	file:
kInternalRunDeathTestFlag	include/gtest/internal/gtest-death-test-internal.h	/^const char kInternalRunDeathTestFlag[] = "internal_run_death_test";$/;"	m	namespace:testing::internal
kInvalidFileAttributes	src/gtest-filepath.cc	/^const DWORD kInvalidFileAttributes = 0xffffffff;$/;"	m	namespace:testing::internal	file:
kListTestsFlag	src/gtest-internal-inl.h	/^const char kListTestsFlag[] = "list_tests";$/;"	m	namespace:testing::internal
kMatch	include/gtest/internal/gtest-internal.h	/^enum EditType { kMatch, kAdd, kRemove, kReplace };$/;"	e	enum:testing::internal::edit_distance::EditType
kMaxBiggestInt	include/gtest/internal/gtest-port.h	/^const BiggestInt kMaxBiggestInt =$/;"	m	namespace:testing::internal
kMaxCodePoint1	src/gtest.cc	/^const UInt32 kMaxCodePoint1 = (static_cast<UInt32>(1) <<  7) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint2	src/gtest.cc	/^const UInt32 kMaxCodePoint2 = (static_cast<UInt32>(1) << (5 + 6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint3	src/gtest.cc	/^const UInt32 kMaxCodePoint3 = (static_cast<UInt32>(1) << (4 + 2*6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxCodePoint4	src/gtest.cc	/^const UInt32 kMaxCodePoint4 = (static_cast<UInt32>(1) << (3 + 3*6)) - 1;$/;"	m	namespace:testing::internal	file:
kMaxRandomSeed	src/gtest-internal-inl.h	/^const int kMaxRandomSeed = 99999;$/;"	m	namespace:testing::internal
kMaxRange	include/gtest/internal/gtest-internal.h	/^  static const UInt32 kMaxRange = 1u << 31;$/;"	m	class:testing::internal::Random
kMaxStackTraceDepth	include/gtest/gtest.h	/^const int kMaxStackTraceDepth = 100;$/;"	m	namespace:testing
kMaxUlps	include/gtest/internal/gtest-internal.h	/^  static const size_t kMaxUlps = 4;$/;"	m	class:testing::internal::FloatingPoint
kMillisPerSec	test/gtest_unittest.cc	/^  static const TimeInMillis kMillisPerSec = 1000;$/;"	m	class:__anon40::FormatEpochTimeInMillisAsIso8601Test	file:
kMillisPerSec	test/gtest_unittest.cc	/^const TimeInMillis FormatEpochTimeInMillisAsIso8601Test::kMillisPerSec;$/;"	m	class:__anon40::FormatEpochTimeInMillisAsIso8601Test	file:
kNonFatalFailure	include/gtest/gtest-test-part.h	/^    kNonFatalFailure,  \/\/ Failed but the test can continue.$/;"	e	enum:testing::TestPartResult::Type
kNull	test/gtest_unittest.cc	/^static const wchar_t* const kNull = nullptr;$/;"	m	namespace:__anon40	file:
kNumberOfParamTests	test/gtest_repeat_test.cc	/^const int kNumberOfParamTests = 10;$/;"	m	namespace:__anon31	file:
kOtherType	include/gtest/gtest-printers.h	/^  kOtherType  \/\/ anything else$/;"	e	enum:testing::internal2::TypeKind
kOutputFlag	src/gtest-internal-inl.h	/^const char kOutputFlag[] = "output";$/;"	m	namespace:testing::internal
kPathSeparator	src/gtest-filepath.cc	/^const char kPathSeparator = '\\\\';$/;"	m	namespace:testing::internal	file:
kPrintContainer	include/gtest/gtest-printers.h	/^  kPrintContainer,$/;"	e	enum:testing::internal::DefaultPrinterType
kPrintFunctionPointer	include/gtest/gtest-printers.h	/^  kPrintFunctionPointer,$/;"	e	enum:testing::internal::DefaultPrinterType
kPrintOther	include/gtest/gtest-printers.h	/^  kPrintOther,$/;"	e	enum:testing::internal::DefaultPrinterType
kPrintPointer	include/gtest/gtest-printers.h	/^  kPrintPointer,$/;"	e	enum:testing::internal::DefaultPrinterType
kPrintTimeFlag	src/gtest-internal-inl.h	/^const char kPrintTimeFlag[] = "print_time";$/;"	m	namespace:testing::internal
kPrintUTF8Flag	src/gtest-internal-inl.h	/^const char kPrintUTF8Flag[] = "print_utf8";$/;"	m	namespace:testing::internal
kProtobuf	include/gtest/gtest-printers.h	/^  kProtobuf,              \/\/ a protobuf type$/;"	e	enum:testing::internal2::TypeKind
kProtobufOneLinerMaxLength	include/gtest/gtest-printers.h	/^const size_t kProtobufOneLinerMaxLength = 50;$/;"	m	namespace:testing::internal2
kRandomSeedFlag	src/gtest-internal-inl.h	/^const char kRandomSeedFlag[] = "random_seed";$/;"	m	namespace:testing::internal
kRemove	include/gtest/internal/gtest-internal.h	/^enum EditType { kMatch, kAdd, kRemove, kReplace };$/;"	e	enum:testing::internal::edit_distance::EditType
kRepeatFlag	src/gtest-internal-inl.h	/^const char kRepeatFlag[] = "repeat";$/;"	m	namespace:testing::internal
kReplace	include/gtest/internal/gtest-internal.h	/^enum EditType { kMatch, kAdd, kRemove, kReplace };$/;"	e	enum:testing::internal::edit_distance::EditType
kReservedOutputTestCaseAttributes	src/gtest.cc	/^static const char* const kReservedOutputTestCaseAttributes[] = {$/;"	m	namespace:testing	file:
kReservedTestCaseAttributes	src/gtest.cc	/^static const char* const kReservedTestCaseAttributes[] = {$/;"	m	namespace:testing	file:
kReservedTestSuiteAttributes	src/gtest.cc	/^static const char* const kReservedTestSuiteAttributes[] = {$/;"	m	namespace:testing	file:
kReservedTestSuitesAttributes	src/gtest.cc	/^static const char* const kReservedTestSuitesAttributes[] = {$/;"	m	namespace:testing	file:
kShuffleFlag	src/gtest-internal-inl.h	/^const char kShuffleFlag[] = "shuffle";$/;"	m	namespace:testing::internal
kSignBitMask	include/gtest/internal/gtest-internal.h	/^  static const Bits kSignBitMask = static_cast<Bits>(1) << (kBitCount - 1);$/;"	m	class:testing::internal::FloatingPoint
kSkip	include/gtest/gtest-test-part.h	/^    kSkip              \/\/ Skipped.$/;"	e	enum:testing::TestPartResult::Type
kSpecialEscape	src/gtest-printers.cc	/^  kSpecialEscape$/;"	e	enum:testing::internal::CharFormat	file:
kStackTraceDepthFlag	src/gtest-internal-inl.h	/^const char kStackTraceDepthFlag[] = "stack_trace_depth";$/;"	m	namespace:testing::internal
kStackTraceMarker	src/gtest.cc	/^const char kStackTraceMarker[] = "\\nStack trace:\\n";$/;"	m	namespace:testing::internal	file:
kStatic	include/gtest/internal/gtest-port.h	/^  enum MutexType { kStatic = 0, kDynamic = 1 };$/;"	e	enum:testing::internal::Mutex::MutexType
kStaticMutex	include/gtest/internal/gtest-port.h	/^  enum StaticConstructorSelector { kStaticMutex = 0 };$/;"	e	enum:testing::internal::Mutex::StaticConstructorSelector
kStdErrFileno	src/gtest-port.cc	/^const int kStdErrFileno = 2;$/;"	m	namespace:testing::internal	file:
kStdOutFileno	src/gtest-port.cc	/^const int kStdOutFileno = 1;$/;"	m	namespace:testing::internal	file:
kStreamResultToFlag	src/gtest-internal-inl.h	/^const char kStreamResultToFlag[] = "stream_result_to";$/;"	m	namespace:testing::internal
kSuccess	include/gtest/gtest-test-part.h	/^    kSuccess,          \/\/ Succeeded.$/;"	e	enum:testing::TestPartResult::Type
kTestForContinuingTest	test/gtest_assert_by_exception_test.cc	/^int kTestForContinuingTest = 0;$/;"	v
kTestShardIndex	src/gtest.cc	/^static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";$/;"	m	namespace:testing	file:
kTestShardStatusFile	src/gtest.cc	/^static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";$/;"	m	namespace:testing	file:
kTestTotalShards	src/gtest.cc	/^static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";$/;"	m	namespace:testing	file:
kTestTypeIdInGoogleTest	src/gtest.cc	/^extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();$/;"	m	namespace:testing::internal	file:
kThreadCount	test/gtest_stress_test.cc	/^const int kThreadCount = 50;$/;"	m	namespace:testing::__anon30	file:
kThrowOnFailureFlag	src/gtest-internal-inl.h	/^const char kThrowOnFailureFlag[] = "throw_on_failure";$/;"	m	namespace:testing::internal
kTypeParamLabel	src/gtest.cc	/^static const char kTypeParamLabel[] = "TypeParam";$/;"	m	namespace:testing::internal	file:
kTypedTestSuites	test/gtest-unittest-api_test.cc	/^const int kTypedTestSuites = 0;$/;"	m	namespace:testing::internal	file:
kTypedTestSuites	test/gtest-unittest-api_test.cc	/^const int kTypedTestSuites = 1;$/;"	m	namespace:testing::internal	file:
kTypedTests	test/gtest-unittest-api_test.cc	/^const int kTypedTests = 0;$/;"	m	namespace:testing::internal	file:
kTypedTests	test/gtest-unittest-api_test.cc	/^const int kTypedTests = 1;$/;"	m	namespace:testing::internal	file:
kUniversalFilter	src/gtest.cc	/^static const char kUniversalFilter[] = "*";$/;"	m	namespace:testing	file:
kUnknownFile	src/gtest-port.cc	/^const char kUnknownFile[] = "unknown file";$/;"	m	namespace:testing::internal	file:
kValueParamLabel	src/gtest.cc	/^static const char kValueParamLabel[] = "GetParam()";$/;"	m	namespace:testing::internal	file:
kVectorSize	test/gtest_unittest.cc	/^  static const size_t kVectorSize = 20;$/;"	m	class:__anon40::VectorShuffleTest	file:
kVectorSize	test/gtest_unittest.cc	/^const size_t VectorShuffleTest::kVectorSize;$/;"	m	class:__anon40::VectorShuffleTest	file:
key	include/gtest/gtest.h	/^  const char* key() const {$/;"	f	class:testing::TestProperty
key_	include/gtest/gtest.h	/^  std::string key_;$/;"	m	class:testing::TestProperty
key_	include/gtest/internal/gtest-port.h	/^  const pthread_key_t key_;$/;"	m	class:testing::internal::ThreadLocal
key_	src/gtest-internal-inl.h	/^  std::string key_;$/;"	m	class:testing::internal::TestPropertyKeyIs
kinfo_proc	src/gtest-port.cc	/^#define kinfo_proc /;"	d	file:
last_	samples/sample3-inl.h	/^  QueueNode<E>* last_;  \/\/ The last node of the queue.$/;"	m	class:Queue
last_death_test_message_	include/gtest/internal/gtest-death-test-internal.h	/^  static std::string last_death_test_message_;$/;"	m	class:testing::internal::DeathTest
last_death_test_message_	src/gtest-death-test.cc	/^std::string DeathTest::last_death_test_message_;$/;"	m	class:testing::internal::DeathTest	file:
last_death_test_suite_	src/gtest-internal-inl.h	/^  int last_death_test_suite_;$/;"	m	class:testing::internal::UnitTestImpl
left_start_	src/gtest.cc	/^  size_t left_start_, right_start_;$/;"	m	class:testing::internal::edit_distance::__anon12::Hunk	file:
library1	test/gtest-typed-test_test.cc	/^namespace library1 {$/;"	n	file:
library2	test/gtest-typed-test_test.cc	/^namespace library2 {$/;"	n	file:
line	include/gtest/gtest.h	/^    int const line;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
line	include/gtest/gtest.h	/^  int line() const { return location_.line; }$/;"	f	class:testing::TestInfo
line	include/gtest/internal/gtest-death-test-internal.h	/^  int line() const { return line_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
line	include/gtest/internal/gtest-internal.h	/^  int line;$/;"	m	struct:testing::internal::CodeLocation
line	include/gtest/internal/gtest-param-util.h	/^      int line;$/;"	m	struct:testing::internal::ParameterizedTestSuiteInfo::InstantiationInfo
line	src/gtest-internal-inl.h	/^  int line;$/;"	m	struct:testing::internal::TraceInfo
line_	include/gtest/internal/gtest-death-test-internal.h	/^  int line_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
line_	src/gtest-death-test.cc	/^  const int line_;$/;"	m	class:testing::internal::ExecDeathTest	file:
line_	src/gtest-death-test.cc	/^  const int line_;$/;"	m	class:testing::internal::FuchsiaDeathTest	file:
line_	src/gtest-death-test.cc	/^  const int line_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
line_number	include/gtest/gtest-test-part.h	/^  int line_number() const { return line_number_; }$/;"	f	class:testing::TestPartResult
line_number_	include/gtest/gtest-test-part.h	/^  int line_number_;$/;"	m	class:testing::TestPartResult
list_	test/googletest-port-test.cc	/^  static std::vector<DestructorCall*>* const list_;$/;"	m	class:testing::internal::DestructorCall::std	file:
list_	test/googletest-port-test.cc	/^std::vector<DestructorCall*>* const DestructorCall::list_ =$/;"	m	class:testing::internal::std::DestructorCall	file:
list_tests	test/gtest_unittest.cc	/^  bool list_tests;$/;"	m	struct:testing::Flags	file:
list_tests_	src/gtest-internal-inl.h	/^  bool list_tests_;$/;"	m	class:testing::internal::GTestFlagSaver
listeners	src/gtest-internal-inl.h	/^  TestEventListeners* listeners() { return &listeners_; }$/;"	f	class:testing::internal::UnitTestImpl
listeners	src/gtest.cc	/^TestEventListeners& UnitTest::listeners() {$/;"	f	class:testing::UnitTest
listeners_	src/gtest-internal-inl.h	/^  TestEventListeners listeners_;$/;"	m	class:testing::internal::UnitTestImpl
listeners_	src/gtest.cc	/^  std::vector<TestEventListener*> listeners_;$/;"	m	class:testing::internal::TestEventRepeater	file:
location_	include/gtest/gtest.h	/^  internal::CodeLocation location_;$/;"	m	class:testing::TestInfo
logging	scripts/upload.py	/^import logging$/;"	i
loop	src/gtest_main.cc	/^void loop() { RUN_ALL_TESTS(); }$/;"	f
main	samples/sample10_unittest.cc	/^int main(int argc, char **argv) {$/;"	f
main	samples/sample9_unittest.cc	/^int main(int argc, char **argv) {$/;"	f
main	scripts/fuse_gtest_files.py	/^def main():$/;"	f
main	scripts/pump.py	/^def main(argv):$/;"	f
main	scripts/release_docs.py	/^def main():$/;"	f
main	scripts/upload.py	/^def main():$/;"	f
main	scripts/upload_gtest.py	/^def main():$/;"	f
main	src/gtest_main.cc	/^GTEST_API_ int main(int argc, char **argv) {$/;"	f
main	test/googletest-break-on-failure-unittest_.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/googletest-catch-exceptions-test_.cc	/^int main(int argc, char** argv) {$/;"	f
main	test/googletest-color-test_.cc	/^int main(int argc, char** argv) {$/;"	f
main	test/googletest-death-test_ex_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	test/googletest-env-var-test_.cc	/^int main(int argc, char** argv) {$/;"	f
main	test/googletest-filter-unittest_.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/googletest-list-tests-unittest_.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/googletest-listener-test.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/googletest-output-test_.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/googletest-param-test-invalid-name1-test_.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	test/googletest-param-test-invalid-name2-test_.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	test/googletest-param-test-test.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/googletest-shuffle-test_.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/googletest-throw-on-failure-test_.cc	/^int main(int argc, char** argv) {$/;"	f
main	test/googletest-uninitialized-test_.cc	/^int main() {$/;"	f
main	test/gtest-unittest-api_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/gtest_assert_by_exception_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	test/gtest_environment_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/gtest_list_output_unittest_.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/gtest_no_test_unittest.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/gtest_premature_exit_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/gtest_repeat_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/gtest_skip_in_environment_setup_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/gtest_stress_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/gtest_test_macro_stack_footprint_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	test/gtest_throw_on_failure_ex_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	test/gtest_xml_output_unittest_.cc	/^int main(int argc, char** argv) {$/;"	f
matcher_	src/gtest-death-test.cc	/^  Matcher<const std::string&> matcher_;$/;"	m	class:testing::internal::DeathTestImpl	file:
matches_filter_	include/gtest/gtest.h	/^  bool matches_filter_;       \/\/ True if this test matches the$/;"	m	class:testing::TestInfo
max_precalculated_	samples/sample8_unittest.cc	/^  int max_precalculated_;$/;"	m	class:__anon10::HybridPrimeTable	file:
md5	scripts/upload.py	/^import md5$/;"	i
member	test/googletest-port-test.cc	/^  int member() { return member_; }$/;"	f	class:testing::internal::Base
member_	test/googletest-port-test.cc	/^  int member_;$/;"	m	class:testing::internal::Base	file:
message	include/gtest/gtest-test-part.h	/^  const char* message() const { return message_.c_str(); }$/;"	f	class:testing::TestPartResult
message	include/gtest/gtest.h	/^    std::string const message;$/;"	m	class:testing::internal::AssertHelper::AssertHelperData::std
message	include/gtest/gtest.h	/^  const char* message() const {$/;"	f	class:testing::AssertionResult
message	src/gtest-internal-inl.h	/^  std::string message;$/;"	m	struct:testing::internal::TraceInfo
message_	include/gtest/gtest-test-part.h	/^  std::string message_;  \/\/ The test failure message.$/;"	m	class:testing::TestPartResult
message_	include/gtest/gtest.h	/^  std::unique_ptr< ::std::string> message_;$/;"	m	class:testing::AssertionResult
mimetypes	scripts/upload.py	/^import mimetypes$/;"	i
min	src/gtest.cc	/^# undef min$/;"	d	file:
minidom	test/gtest_xml_outfiles_test.py	/^from xml.dom import minidom, Node$/;"	i
minidom	test/gtest_xml_output_unittest.py	/^from xml.dom import minidom, Node$/;"	i
minidom	test/gtest_xml_test_utils.py	/^from xml.dom import minidom, Node$/;"	i
mutable_impl	include/gtest/gtest-matchers.h	/^  Impl& mutable_impl() { return impl_; }$/;"	f	class:testing::PolymorphicMatcher
mutex_	include/gtest/gtest.h	/^  mutable internal::Mutex mutex_;$/;"	m	class:testing::UnitTest
mutex_	include/gtest/internal/gtest-port.h	/^  Mutex* const mutex_;$/;"	m	class:testing::internal::GTestMutexLock
mutex_	include/gtest/internal/gtest-port.h	/^  MutexBase* const mutex_;$/;"	m	class:testing::internal::GTestMutexLock
mutex_	include/gtest/internal/gtest-port.h	/^  pthread_mutex_t mutex_;  \/\/ The underlying pthread mutex.$/;"	m	class:testing::internal::MutexBase
mutex_	include/gtest/internal/gtest-port.h	/^  pthread_mutex_t mutex_;$/;"	m	class:testing::internal::Notification
mutex_	src/gtest-internal-inl.h	/^  Mutex mutex_;  \/\/ Protects all internal state.$/;"	m	class:testing::internal::OsStackTraceGetter
mutex_	src/gtest-port.cc	/^  static Mutex mutex_;$/;"	m	class:testing::internal::ThreadLocalRegistryImpl	file:
mutex_	test/googletest-port-test.cc	/^  Mutex* const mutex_;  \/\/ Protects value_.$/;"	m	class:testing::internal::AtomicCounterWithMutex	file:
my_namespace	test/gtest_unittest.cc	/^namespace my_namespace {$/;"	n	file:
n1	test/googletest-output-test_.cc	/^  Notification n1;$/;"	m	struct:CheckPoints	file:
n1_	test/gtest_pred_impl_unittest.cc	/^  static int n1_;$/;"	m	class:Predicate1Test	file:
n1_	test/gtest_pred_impl_unittest.cc	/^  static int n1_;$/;"	m	class:Predicate2Test	file:
n1_	test/gtest_pred_impl_unittest.cc	/^  static int n1_;$/;"	m	class:Predicate3Test	file:
n1_	test/gtest_pred_impl_unittest.cc	/^  static int n1_;$/;"	m	class:Predicate4Test	file:
n1_	test/gtest_pred_impl_unittest.cc	/^  static int n1_;$/;"	m	class:Predicate5Test	file:
n1_	test/gtest_pred_impl_unittest.cc	/^int Predicate1Test::n1_;$/;"	m	class:Predicate1Test	file:
n1_	test/gtest_pred_impl_unittest.cc	/^int Predicate2Test::n1_;$/;"	m	class:Predicate2Test	file:
n1_	test/gtest_pred_impl_unittest.cc	/^int Predicate3Test::n1_;$/;"	m	class:Predicate3Test	file:
n1_	test/gtest_pred_impl_unittest.cc	/^int Predicate4Test::n1_;$/;"	m	class:Predicate4Test	file:
n1_	test/gtest_pred_impl_unittest.cc	/^int Predicate5Test::n1_;$/;"	m	class:Predicate5Test	file:
n2	test/googletest-output-test_.cc	/^  Notification n2;$/;"	m	struct:CheckPoints	file:
n2_	test/gtest_pred_impl_unittest.cc	/^  static int n2_;$/;"	m	class:Predicate2Test	file:
n2_	test/gtest_pred_impl_unittest.cc	/^  static int n2_;$/;"	m	class:Predicate3Test	file:
n2_	test/gtest_pred_impl_unittest.cc	/^  static int n2_;$/;"	m	class:Predicate4Test	file:
n2_	test/gtest_pred_impl_unittest.cc	/^  static int n2_;$/;"	m	class:Predicate5Test	file:
n2_	test/gtest_pred_impl_unittest.cc	/^int Predicate2Test::n2_;$/;"	m	class:Predicate2Test	file:
n2_	test/gtest_pred_impl_unittest.cc	/^int Predicate3Test::n2_;$/;"	m	class:Predicate3Test	file:
n2_	test/gtest_pred_impl_unittest.cc	/^int Predicate4Test::n2_;$/;"	m	class:Predicate4Test	file:
n2_	test/gtest_pred_impl_unittest.cc	/^int Predicate5Test::n2_;$/;"	m	class:Predicate5Test	file:
n3	test/googletest-output-test_.cc	/^  Notification n3;$/;"	m	struct:CheckPoints	file:
n3_	test/gtest_pred_impl_unittest.cc	/^  static int n3_;$/;"	m	class:Predicate3Test	file:
n3_	test/gtest_pred_impl_unittest.cc	/^  static int n3_;$/;"	m	class:Predicate4Test	file:
n3_	test/gtest_pred_impl_unittest.cc	/^  static int n3_;$/;"	m	class:Predicate5Test	file:
n3_	test/gtest_pred_impl_unittest.cc	/^int Predicate3Test::n3_;$/;"	m	class:Predicate3Test	file:
n3_	test/gtest_pred_impl_unittest.cc	/^int Predicate4Test::n3_;$/;"	m	class:Predicate4Test	file:
n3_	test/gtest_pred_impl_unittest.cc	/^int Predicate5Test::n3_;$/;"	m	class:Predicate5Test	file:
n4_	test/gtest_pred_impl_unittest.cc	/^  static int n4_;$/;"	m	class:Predicate4Test	file:
n4_	test/gtest_pred_impl_unittest.cc	/^  static int n4_;$/;"	m	class:Predicate5Test	file:
n4_	test/gtest_pred_impl_unittest.cc	/^int Predicate4Test::n4_;$/;"	m	class:Predicate4Test	file:
n4_	test/gtest_pred_impl_unittest.cc	/^int Predicate5Test::n4_;$/;"	m	class:Predicate5Test	file:
n5_	test/gtest_pred_impl_unittest.cc	/^  static int n5_;$/;"	m	class:Predicate5Test	file:
n5_	test/gtest_pred_impl_unittest.cc	/^int Predicate5Test::n5_;$/;"	m	class:Predicate5Test	file:
n_	test/googletest-param-test-test.cc	/^  int n_;$/;"	m	class:NonParameterizedBaseTest	file:
name	include/gtest/gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestInfo
name	include/gtest/gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestSuite
name	include/gtest/internal/gtest-param-util.h	/^      std::string name;$/;"	m	struct:testing::internal::ParameterizedTestSuiteInfo::InstantiationInfo
name_	include/gtest/gtest.h	/^  const std::string name_;               \/\/ Test name$/;"	m	class:testing::TestInfo
name_	include/gtest/gtest.h	/^  std::string name_;$/;"	m	class:testing::TestSuite
name_	src/gtest.cc	/^  std::string name_;$/;"	m	class:testing::__anon16::TestNameIs	file:
name_	src/gtest.cc	/^  std::string name_;$/;"	m	class:testing::internal::TestSuiteNameIs	file:
name_	test/googletest-listener-test.cc	/^  std::string name_;$/;"	m	class:testing::internal::EventRecordingListener	file:
name_	test/googletest-listener-test.cc	/^  std::string name_;$/;"	m	class:testing::internal::EventRecordingListener2	file:
name_func	include/gtest/internal/gtest-param-util.h	/^      ParamNameGeneratorFunc* name_func;$/;"	m	struct:testing::internal::ParameterizedTestSuiteInfo::InstantiationInfo
namespace1	test/gtest_unittest.cc	/^namespace namespace1 {$/;"	n	file:
namespace2	test/gtest_unittest.cc	/^namespace namespace2 {$/;"	n	file:
nan1	test/gtest_unittest.cc	/^    RawType nan1;$/;"	m	struct:__anon40::FloatingPointTest::TestValues	file:
nan2	test/gtest_unittest.cc	/^    RawType nan2;$/;"	m	struct:__anon40::FloatingPointTest::TestValues	file:
next	samples/sample3-inl.h	/^  QueueNode* next() { return next_; }$/;"	f	class:QueueNode
next	samples/sample3-inl.h	/^  const QueueNode* next() const { return next_; }$/;"	f	class:QueueNode
next_	samples/sample3-inl.h	/^  QueueNode* next_;$/;"	m	class:QueueNode
noexcept	test/googletest-printers-test.cc	/^  string_ref operator*() const noexcept;$/;"	m	class:testing::gtest_printers_test::__anon38::string_ptr	file:
nonfatally_failed	include/gtest/gtest-test-part.h	/^  bool nonfatally_failed() const { return type_ == kNonFatalFailure; }$/;"	f	class:testing::TestPartResult
normalize	test/gtest_json_test_utils.py	/^def normalize(obj):$/;"	f
notifications_	test/googletest-output-test_.cc	/^  SpawnThreadNotifications notifications_;$/;"	m	class:DeathTestAndMultiThreadsTest	file:
notified_	include/gtest/internal/gtest-port.h	/^  bool notified_;$/;"	m	class:testing::internal::Notification
old_crtdbg_flag_	src/gtest-port.cc	/^  int old_crtdbg_flag_;$/;"	m	class:testing::internal::__anon19::MemoryIsNotDeallocated	file:
old_factory_	test/googletest-death-test-test.cc	/^  DeathTestFactory* old_factory_;$/;"	m	class:testing::internal::ReplaceDeathTestFactory	file:
old_reporter_	include/gtest/gtest-spi.h	/^  TestPartResultReporterInterface* old_reporter_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter
on_start_counter_	test/gtest_unittest.cc	/^  int* on_start_counter_;$/;"	m	class:TestListener	file:
on_the_fly_impl_	samples/sample8_unittest.cc	/^  OnTheFlyPrimeTable* on_the_fly_impl_;$/;"	m	class:__anon10::HybridPrimeTable	file:
operator !	src/gtest.cc	/^AssertionResult AssertionResult::operator!() const {$/;"	f	class:testing::AssertionResult
operator !=	include/gtest/gtest.h	/^inline bool operator!=(faketype, faketype) { return false; }$/;"	f	namespace:testing::internal
operator !=	include/gtest/internal/gtest-param-util.h	/^  bool operator!=(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator !=	test/gtest_unittest.cc	/^  bool operator!=(const UnprintableChar& rhs) const {$/;"	f	class:__anon42::UnprintableChar
operator ()	include/gtest/gtest-matchers.h	/^  bool operator()(const A& a, const B& b) const { return a != b; }$/;"	f	struct:testing::internal::AnyNe
operator ()	include/gtest/gtest-matchers.h	/^  bool operator()(const A& a, const B& b) const { return a < b; }$/;"	f	struct:testing::internal::AnyLt
operator ()	include/gtest/gtest-matchers.h	/^  bool operator()(const A& a, const B& b) const { return a <= b; }$/;"	f	struct:testing::internal::AnyLe
operator ()	include/gtest/gtest-matchers.h	/^  bool operator()(const A& a, const B& b) const { return a == b; }$/;"	f	struct:testing::internal::AnyEq
operator ()	include/gtest/gtest-matchers.h	/^  bool operator()(const A& a, const B& b) const { return a > b; }$/;"	f	struct:testing::internal::AnyGt
operator ()	include/gtest/gtest-matchers.h	/^  bool operator()(const A& a, const B& b) const { return a >= b; }$/;"	f	struct:testing::internal::AnyGe
operator ()	include/gtest/gtest-printers.h	/^    void operator()(const U& u) const {$/;"	f	struct:testing::internal::UniversalPrinter::Visitor
operator ()	include/gtest/internal/gtest-param-util.h	/^  std::string operator()(const TestParamInfo<ParamType>& info) const {$/;"	f	struct:testing::PrintToStringParamName
operator ()	src/gtest-death-test.cc	/^bool ExitedWithCode::operator()(int exit_status) const {$/;"	f	class:testing::ExitedWithCode
operator ()	src/gtest-death-test.cc	/^bool KilledBySignal::operator()(int exit_status) const {$/;"	f	class:testing::KilledBySignal
operator ()	src/gtest-internal-inl.h	/^  bool operator()(const TestProperty& test_property) const {$/;"	f	class:testing::internal::TestPropertyKeyIs
operator ()	src/gtest.cc	/^  bool operator()(const TestInfo * test_info) const {$/;"	f	class:testing::__anon16::TestNameIs
operator ()	src/gtest.cc	/^  bool operator()(const TestSuite* test_suite) const {$/;"	f	class:testing::internal::TestSuiteNameIs
operator ()	test/googletest-param-test-test.cc	/^  std::string operator()(const ::testing::TestParamInfo<int>& info) {$/;"	f	struct:StatefulNamingFunctor
operator ()	test/googletest-param-test-test.cc	/^  std::string operator()(const ::testing::TestParamInfo<std::string>& inf) {$/;"	f	struct:CustomParamNameFunctor
operator ()	test/gtest-unittest-api_test.cc	/^  bool operator()(const T* a, const T* b) {$/;"	f	struct:testing::internal::LessByName
operator ()	test/gtest_pred_impl_unittest.cc	/^  bool operator()(const T1& v1) {$/;"	f	struct:PredFunctor1
operator ()	test/gtest_pred_impl_unittest.cc	/^  bool operator()(const T1& v1,$/;"	f	struct:PredFunctor2
operator ()	test/gtest_pred_impl_unittest.cc	/^  bool operator()(const T1& v1,$/;"	f	struct:PredFunctor3
operator ()	test/gtest_pred_impl_unittest.cc	/^  bool operator()(const T1& v1,$/;"	f	struct:PredFunctor4
operator ()	test/gtest_pred_impl_unittest.cc	/^  bool operator()(const T1& v1,$/;"	f	struct:PredFunctor5
operator ()	test/gtest_pred_impl_unittest.cc	/^  testing::AssertionResult operator()(const char* e1,$/;"	f	struct:PredFormatFunctor1
operator ()	test/gtest_pred_impl_unittest.cc	/^  testing::AssertionResult operator()(const char* e1,$/;"	f	struct:PredFormatFunctor2
operator ()	test/gtest_pred_impl_unittest.cc	/^  testing::AssertionResult operator()(const char* e1,$/;"	f	struct:PredFormatFunctor3
operator ()	test/gtest_pred_impl_unittest.cc	/^  testing::AssertionResult operator()(const char* e1,$/;"	f	struct:PredFormatFunctor4
operator ()	test/gtest_pred_impl_unittest.cc	/^  testing::AssertionResult operator()(const char* e1,$/;"	f	struct:PredFormatFunctor5
operator ()	test/gtest_unittest.cc	/^  AssertionResult operator()($/;"	f	struct:__anon40::AssertSumIsEven5Functor
operator ()	test/gtest_unittest.cc	/^  AssertionResult operator()(const char* expr, int n) {$/;"	f	struct:__anon40::AssertIsEvenFunctor
operator ()	test/gtest_unittest.cc	/^  bool operator()(int n) { return IsEven(n); }$/;"	f	struct:__anon40::IsEvenFunctor
operator ()	test/gtest_unittest.cc	/^  bool operator()(int n1, int n2, int n3) {$/;"	f	struct:__anon40::SumIsEven3Functor
operator *	include/gtest/internal/gtest-param-util.h	/^  const T& operator*() const { return *impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator +	test/googletest-param-test-test.cc	/^  DogAdder operator+(const DogAdder& other) const {$/;"	f	class:DogAdder
operator +	test/googletest-param-test-test.cc	/^  IntWrapper operator+(int other) const { return IntWrapper(value_ + other); }$/;"	f	class:IntWrapper
operator +	test/gtest_pred_impl_unittest.cc	/^  Bool operator+(const Bool& rhs) const { return Bool(value + rhs.value); }$/;"	f	struct:Bool
operator ++	include/gtest/internal/gtest-param-util.h	/^  ParamIterator operator++(int \/*unused*\/) {$/;"	f	class:testing::internal::ParamIterator
operator ++	include/gtest/internal/gtest-param-util.h	/^  ParamIterator& operator++() {$/;"	f	class:testing::internal::ParamIterator
operator ->	include/gtest/internal/gtest-param-util.h	/^  const T* operator->() const { return impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator <	test/googletest-param-test-test.cc	/^  bool operator<(const DogAdder& other) const {$/;"	f	class:DogAdder
operator <	test/googletest-param-test-test.cc	/^  bool operator<(const IntWrapper& other) const {$/;"	f	class:IntWrapper
operator <	test/gtest_unittest.cc	/^  bool operator<(const UnprintableChar& rhs) const {$/;"	f	class:__anon42::UnprintableChar
operator <<	include/gtest/gtest-matchers.h	/^  MatchResultListener& operator<<(const T& x) {$/;"	f	class:testing::MatchResultListener
operator <<	include/gtest/gtest-matchers.h	/^std::ostream& operator<<(std::ostream& os, const Matcher<T>& matcher) {$/;"	f	namespace:testing
operator <<	include/gtest/gtest-message.h	/^  Message& operator <<(BasicNarrowIoManip val) {$/;"	f	class:testing::Message
operator <<	include/gtest/gtest-message.h	/^  Message& operator <<(bool b) {$/;"	f	class:testing::Message
operator <<	include/gtest/gtest-message.h	/^  inline Message& operator <<(T* const& pointer) {  \/\/ NOLINT$/;"	f	class:testing::Message
operator <<	include/gtest/gtest-message.h	/^  inline Message& operator <<(const T& val) {$/;"	f	class:testing::Message
operator <<	include/gtest/gtest-message.h	/^inline std::ostream& operator <<(std::ostream& os, const Message& sb) {$/;"	f	namespace:testing
operator <<	include/gtest/gtest-printers.h	/^::std::basic_ostream<Char, CharTraits>& operator<<($/;"	f	namespace:testing::internal2
operator <<	include/gtest/gtest.h	/^  template <typename T> AssertionResult& operator<<(const T& value) {$/;"	f	class:testing::AssertionResult
operator <<	src/gtest-test-part.cc	/^std::ostream& operator<<(std::ostream& os, const TestPartResult& result) {$/;"	f	namespace:testing
operator <<	src/gtest.cc	/^Message& Message::operator <<(const ::std::wstring& wstr) {$/;"	f	class:testing::Message
operator <<	src/gtest.cc	/^Message& Message::operator <<(const wchar_t* wide_c_str) {$/;"	f	class:testing::Message
operator <<	src/gtest.cc	/^Message& Message::operator <<(wchar_t* wide_c_str) {$/;"	f	class:testing::Message
operator <<	test/googletest-param-test-test.cc	/^std::ostream& operator<<(std::ostream& stream, const CustomStruct& val) {$/;"	f
operator <<	test/googletest-printers-test.cc	/^  friend ::std::ostream& operator<<(::std::ostream& os, const PathLike&) {$/;"	f	class:foo::PathLike
operator <<	test/googletest-printers-test.cc	/^::std::ostream& operator<<(::std::ostream& os,$/;"	f	namespace:foo
operator <<	test/googletest-printers-test.cc	/^inline ::std::ostream& operator<<(::std::ostream& os,$/;"	f	namespace:foo
operator <<	test/googletest-printers-test.cc	/^inline void operator<<(::std::ostream& os, const StreamableInGlobal& \/* x *\/) {$/;"	f
operator <<	test/googletest-printers-test.cc	/^std::basic_ostream<Char, CharTraits>& operator<<($/;"	f	namespace:testing::gtest_printers_test
operator <<	test/googletest-printers-test.cc	/^std::ostream& operator<<(std::ostream& os, EnumWithStreaming e) {$/;"	f
operator <<	test/googletest-printers-test.cc	/^void operator<<(::std::ostream& os, const StreamableInGlobal* \/* x *\/) {$/;"	f
operator <<	test/gtest_pred_impl_unittest.cc	/^std::ostream& operator<<(std::ostream& os, const Bool& x) {$/;"	f
operator <<	test/gtest_unittest.cc	/^::std::ostream& operator<<(::std::ostream& os, const Uncopyable& value) {$/;"	f	namespace:__anon40
operator <<	test/gtest_unittest.cc	/^::std::ostream& operator<<(::std::ostream& os,$/;"	f
operator <<	test/gtest_unittest.cc	/^std::ostream& operator<<(std::ostream& os,$/;"	f
operator <<	test/gtest_unittest.cc	/^std::ostream& operator<<(std::ostream& os,$/;"	f	namespace:__anon43
operator <<	test/gtest_unittest.cc	/^std::ostream& operator<<(std::ostream& os,$/;"	f	namespace:namespace1
operator <=	test/gtest_unittest.cc	/^  bool operator<=(const UnprintableChar& rhs) const {$/;"	f	class:__anon42::UnprintableChar
operator =	include/gtest/gtest.h	/^  AssertionResult& operator=(AssertionResult other) {$/;"	f	class:testing::AssertionResult
operator =	include/gtest/internal/gtest-filepath.h	/^  FilePath& operator=(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
operator =	include/gtest/internal/gtest-param-util.h	/^  ParamGenerator& operator=(const ParamGenerator& other) {$/;"	f	class:testing::internal::ParamGenerator
operator =	include/gtest/internal/gtest-param-util.h	/^  ParamIterator& operator=(const ParamIterator& other) {$/;"	f	class:testing::internal::ParamIterator
operator =	src/gtest.cc	/^void AssertHelper::operator=(const Message& message) const {$/;"	f	class:testing::internal::AssertHelper
operator =	test/googletest-param-test-test.cc	/^  DogAdder operator=(const DogAdder& other) {$/;"	f	class:DogAdder
operator =	test/googletest-param-test-test.cc	/^  IntWrapper operator=(const IntWrapper& other) {$/;"	f	class:IntWrapper
operator ==	include/gtest/gtest.h	/^inline bool operator==(faketype, faketype) { return true; }$/;"	f	namespace:testing::internal
operator ==	include/gtest/internal/gtest-internal.h	/^  bool operator==(const NativeArray& rhs) const {$/;"	f	class:testing::internal::NativeArray
operator ==	include/gtest/internal/gtest-param-util.h	/^  bool operator==(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator ==	test/gtest_pred_impl_unittest.cc	/^  bool operator==(const Bool& rhs) const { return value == rhs.value; }$/;"	f	struct:Bool
operator ==	test/gtest_unittest.cc	/^  bool operator==(const Uncopyable& rhs) const {$/;"	f	class:__anon40::Uncopyable
operator ==	test/gtest_unittest.cc	/^  bool operator==(const UnprintableChar& rhs) const {$/;"	f	class:__anon42::UnprintableChar
operator ==	test/gtest_unittest.cc	/^inline bool operator==(MyType const&, MyType const&) { return true; }$/;"	f	namespace:__anon40
operator >	test/gtest_pred_impl_unittest.cc	/^  bool operator>(int n) const { return value > Bool(n).value; }$/;"	f	struct:Bool
operator >	test/gtest_unittest.cc	/^  bool operator>(const UnprintableChar& rhs) const {$/;"	f	class:__anon42::UnprintableChar
operator >=	test/gtest_unittest.cc	/^  bool operator>=(const UnprintableChar& rhs) const {$/;"	f	class:__anon42::UnprintableChar
operator AssertionResult	test/gtest_unittest.cc	/^  operator AssertionResult() const { return AssertionResult(true); }$/;"	f	struct:ConvertibleToAssertionResult
operator Base	test/googletest-port-test.cc	/^  operator Base() const {$/;"	f	class:testing::internal::ConstAndNonConstCastable
operator Base	test/googletest-port-test.cc	/^  operator Base() const {$/;"	f	class:testing::internal::ConstCastable
operator Base	test/googletest-port-test.cc	/^  operator Base() {$/;"	f	class:testing::internal::Castable
operator Base	test/googletest-port-test.cc	/^  operator Base() {$/;"	f	class:testing::internal::ConstAndNonConstCastable
operator Matcher<Lhs>	include/gtest/gtest-matchers.h	/^  operator Matcher<Lhs>() const {$/;"	f	class:testing::internal::ComparisonBase
operator Matcher<T>	include/gtest/gtest-matchers.h	/^  operator Matcher<T>() const {$/;"	f	class:testing::PolymorphicMatcher
operator ParamGenerator<::std::tuple<T...>>	include/gtest/internal/gtest-param-util.h	/^  operator ParamGenerator<::std::tuple<T...>>() const {$/;"	f	class:testing::internal::CartesianProductHolder
operator ParamGenerator<T>	include/gtest/internal/gtest-param-util.h	/^  operator ParamGenerator<T>() const {  \/\/ NOLINT$/;"	f	class:testing::internal::ValueArray
operator T	test/gtest_unittest.cc	/^  operator T() const {  \/\/ NOLINT$/;"	f	struct:__anon40::ConvertToAll
operator T	test/gtest_unittest.cc	/^  operator T() const {  \/\/ NOLINT$/;"	f	struct:__anon40::ConvertToAllButNoPointers
operator T*	test/gtest_unittest.cc	/^  operator T*() const {  \/\/ NOLINT$/;"	f	struct:__anon40::ConvertToPointer
operator bool	include/gtest/gtest.h	/^  operator bool() const { return success_; }  \/\/ NOLINT$/;"	f	class:testing::AssertionResult
operator bool	include/gtest/internal/gtest-internal.h	/^  operator bool() const { return true; }$/;"	f	struct:testing::internal::ConstCharPtr
operator bool	test/googletest-printers-test.cc	/^  operator bool() const { return false; }$/;"	f	class:testing::gtest_printers_test::AllowsGenericStreamingAndImplicitConversionTemplate
operator delete	samples/sample10_unittest.cc	/^  void operator delete(void* block, size_t \/* allocation_size *\/) {$/;"	f	class:__anon4::Water
operator new	samples/sample10_unittest.cc	/^  void* operator new(size_t allocation_size) {$/;"	f	class:__anon4::Water
optparse	scripts/upload.py	/^import optparse$/;"	i
original_dir_	test/googletest-death-test-test.cc	/^  const FilePath original_dir_;$/;"	m	class:__anon28::TestForDeathTest	file:
original_reporter_	include/gtest/gtest-test-part.h	/^  TestPartResultReporterInterface* original_reporter_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
original_working_dir	src/gtest.cc	/^const char* UnitTest::original_working_dir() const {$/;"	f	class:testing::UnitTest
original_working_dir_	src/gtest-internal-inl.h	/^  internal::FilePath original_working_dir_;$/;"	m	class:testing::internal::UnitTestImpl
original_working_dir_	test/googletest-options-test.cc	/^  FilePath original_working_dir_;$/;"	m	class:testing::internal::__anon45::XmlOutputChangeDirTest	file:
os	include/gtest/gtest-printers.h	/^    ::std::ostream* os;$/;"	m	struct:testing::internal::UniversalPrinter::Visitor
os	scripts/common.py	/^import os$/;"	i
os	scripts/fuse_gtest_files.py	/^import os$/;"	i
os	scripts/gen_gtest_pred_impl.py	/^import os$/;"	i
os	scripts/pump.py	/^import os$/;"	i
os	scripts/release_docs.py	/^import os$/;"	i
os	scripts/upload.py	/^import os$/;"	i
os	scripts/upload_gtest.py	/^import os$/;"	i
os	test/googletest-break-on-failure-unittest.py	/^import os$/;"	i
os	test/googletest-color-test.py	/^import os$/;"	i
os	test/googletest-env-var-test.py	/^import os$/;"	i
os	test/googletest-filter-unittest.py	/^      [sys.executable, '-c', 'import os; print(\\'EMPTY_VAR\\' in os.environ)'])$/;"	i
os	test/googletest-filter-unittest.py	/^      [sys.executable, '-c', 'import os; print(\\'UNSET_VAR\\' not in os.environ)'$/;"	i
os	test/googletest-filter-unittest.py	/^import os$/;"	i
os	test/googletest-json-outfiles-test.py	/^import os$/;"	i
os	test/googletest-json-output-unittest.py	/^import os$/;"	i
os	test/googletest-output-test.py	/^import os$/;"	i
os	test/googletest-shuffle-test.py	/^import os$/;"	i
os	test/googletest-throw-on-failure-test.py	/^import os$/;"	i
os	test/gtest_help_test.py	/^import os$/;"	i
os	test/gtest_list_output_unittest.py	/^import os$/;"	i
os	test/gtest_test_utils.py	/^import os$/;"	i
os	test/gtest_testbridge_test.py	/^import os$/;"	i
os	test/gtest_xml_outfiles_test.py	/^import os$/;"	i
os	test/gtest_xml_output_unittest.py	/^import os$/;"	i
os_stack_trace_getter	src/gtest.cc	/^OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {$/;"	f	class:testing::internal::UnitTestImpl
os_stack_trace_getter_	src/gtest-internal-inl.h	/^  OsStackTraceGetterInterface* os_stack_trace_getter_;$/;"	m	class:testing::internal::UnitTestImpl
outcome	src/gtest-death-test.cc	/^  DeathTestOutcome outcome() const { return outcome_; }$/;"	f	class:testing::internal::DeathTestImpl
outcome_	src/gtest-death-test.cc	/^  DeathTestOutcome outcome_;$/;"	m	class:testing::internal::DeathTestImpl	file:
output	test/gtest_unittest.cc	/^  const char* output;$/;"	m	struct:testing::Flags	file:
output	test/gtest_unittest.cc	/^  std::string* output() { return &(fake_sock_writer_->output_); }$/;"	f	class:testing::internal::StreamingListenerTest
output_	src/gtest-internal-inl.h	/^  std::string output_;$/;"	m	class:testing::internal::GTestFlagSaver
output_	test/gtest_unittest.cc	/^    std::string output_;$/;"	m	class:testing::internal::StreamingListenerTest::FakeSocketWriter	file:
output_file_	src/gtest.cc	/^  const std::string output_file_;$/;"	m	class:testing::internal::JsonUnitTestResultPrinter	file:
output_file_	src/gtest.cc	/^  const std::string output_file_;$/;"	m	class:testing::internal::XmlUnitTestResultPrinter	file:
override	include/gtest/gtest-spi.h	/^  void ReportTestPartResult(const TestPartResult& result) override;$/;"	m	class:testing::ScopedFakeTestPartResultReporter
override	include/gtest/gtest-spi.h	/^  ~ScopedFakeTestPartResultReporter() override;$/;"	m	class:testing::ScopedFakeTestPartResultReporter
override	include/gtest/gtest-test-part.h	/^  void ReportTestPartResult(const TestPartResult& result) override;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
override	include/gtest/gtest-test-part.h	/^  ~HasNewFatalFailureHelper() override;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
override	include/gtest/internal/gtest-death-test-internal.h	/^              const char* file, int line, DeathTest** test) override;$/;"	m	class:testing::internal::DefaultDeathTestFactory
override	src/gtest-death-test.cc	/^  TestRole AssumeRole() override;$/;"	m	class:testing::internal::ExecDeathTest	file:
override	src/gtest-death-test.cc	/^  TestRole AssumeRole() override;$/;"	m	class:testing::internal::FuchsiaDeathTest	file:
override	src/gtest-death-test.cc	/^  TestRole AssumeRole() override;$/;"	m	class:testing::internal::NoExecDeathTest	file:
override	src/gtest-death-test.cc	/^  bool Passed(bool status_ok) override;$/;"	m	class:testing::internal::DeathTestImpl	file:
override	src/gtest-death-test.cc	/^  int Wait() override;$/;"	m	class:testing::internal::ForkingDeathTest	file:
override	src/gtest-death-test.cc	/^  int Wait() override;$/;"	m	class:testing::internal::FuchsiaDeathTest	file:
override	src/gtest-death-test.cc	/^  std::string GetErrorLogs() override;$/;"	m	class:testing::internal::FuchsiaDeathTest	file:
override	src/gtest-death-test.cc	/^  void Abort(AbortReason reason) override;$/;"	m	class:testing::internal::DeathTestImpl	file:
override	src/gtest-internal-inl.h	/^  std::string CurrentStackTrace(int max_depth, int skip_count) override;$/;"	m	class:testing::internal::OsStackTraceGetter
override	src/gtest-internal-inl.h	/^  void ReportTestPartResult(const TestPartResult& result) override;$/;"	m	class:testing::internal::DefaultGlobalTestPartResultReporter
override	src/gtest-internal-inl.h	/^  void ReportTestPartResult(const TestPartResult& result) override;$/;"	m	class:testing::internal::DefaultPerThreadTestPartResultReporter
override	src/gtest-internal-inl.h	/^  void UponLeavingGTest() override;$/;"	m	class:testing::internal::OsStackTraceGetter
override	src/gtest.cc	/^  void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;$/;"	m	class:testing::internal::PrettyUnitTestResultPrinter	file:
override	src/gtest.cc	/^  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;$/;"	m	class:testing::internal::PrettyUnitTestResultPrinter	file:
override	src/gtest.cc	/^  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnTestCaseEnd(const TestCase& parameter) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnTestCaseEnd(const TestCase& test_case) override;$/;"	m	class:testing::internal::PrettyUnitTestResultPrinter	file:
override	src/gtest.cc	/^  void OnTestCaseStart(const TestCase& test_case) override;$/;"	m	class:testing::internal::PrettyUnitTestResultPrinter	file:
override	src/gtest.cc	/^  void OnTestCaseStart(const TestSuite& parameter) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnTestEnd(const TestInfo& test_info) override;$/;"	m	class:testing::internal::PrettyUnitTestResultPrinter	file:
override	src/gtest.cc	/^  void OnTestEnd(const TestInfo& test_info) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;$/;"	m	class:testing::internal::JsonUnitTestResultPrinter	file:
override	src/gtest.cc	/^  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;$/;"	m	class:testing::internal::PrettyUnitTestResultPrinter	file:
override	src/gtest.cc	/^  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;$/;"	m	class:testing::internal::XmlUnitTestResultPrinter	file:
override	src/gtest.cc	/^  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;$/;"	m	class:testing::internal::PrettyUnitTestResultPrinter	file:
override	src/gtest.cc	/^  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnTestPartResult(const TestPartResult& result) override;$/;"	m	class:testing::internal::PrettyUnitTestResultPrinter	file:
override	src/gtest.cc	/^  void OnTestPartResult(const TestPartResult& result) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnTestProgramEnd(const UnitTest& unit_test) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnTestProgramStart(const UnitTest& unit_test) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnTestStart(const TestInfo& test_info) override;$/;"	m	class:testing::internal::PrettyUnitTestResultPrinter	file:
override	src/gtest.cc	/^  void OnTestStart(const TestInfo& test_info) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnTestSuiteEnd(const TestSuite& parameter) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnTestSuiteEnd(const TestSuite& test_suite) override;$/;"	m	class:testing::internal::PrettyUnitTestResultPrinter	file:
override	src/gtest.cc	/^  void OnTestSuiteStart(const TestSuite& parameter) override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	src/gtest.cc	/^  void OnTestSuiteStart(const TestSuite& test_suite) override;$/;"	m	class:testing::internal::PrettyUnitTestResultPrinter	file:
override	src/gtest.cc	/^  ~TestEventRepeater() override;$/;"	m	class:testing::internal::TestEventRepeater	file:
override	test/googletest-death-test-test.cc	/^              int line, DeathTest** test) override;$/;"	m	class:__anon28::MockDeathTestFactory	file:
owner_	include/gtest/internal/gtest-port.h	/^  pthread_t owner_;  \/\/ The thread holding the mutex.$/;"	m	class:testing::internal::MutexBase
owner_thread_id_	include/gtest/internal/gtest-port.h	/^  unsigned int owner_thread_id_;$/;"	m	class:testing::internal::Mutex
p1_	test/gtest_unittest.cc	/^  static const char* p1_;$/;"	m	class:__anon40::SingleEvaluationTest	file:
p1_	test/gtest_unittest.cc	/^const char* SingleEvaluationTest::p1_;$/;"	m	class:__anon40::SingleEvaluationTest	file:
p2_	test/gtest_unittest.cc	/^  static const char* p2_;$/;"	m	class:__anon40::SingleEvaluationTest	file:
p2_	test/gtest_unittest.cc	/^const char* SingleEvaluationTest::p2_;$/;"	m	class:__anon40::SingleEvaluationTest	file:
param	include/gtest/internal/gtest-param-util.h	/^  ParamType param;$/;"	m	struct:testing::TestParamInfo
param_	include/gtest/internal/gtest-port.h	/^    const T param_;$/;"	m	class:testing::internal::ThreadWithParam::RunnableImpl
param_	include/gtest/internal/gtest-port.h	/^  const T param_;  \/\/ User-supplied parameter to the thread function.$/;"	m	class:testing::internal::ThreadWithParam
param_tests_present	test/googletest-filter-unittest.py	/^param_tests_present = None$/;"	v
param_value	test/googletest-param-test-test.cc	/^  static int param_value() { return param_value_; }$/;"	f	class:GeneratorEvaluationTest
param_value_	test/googletest-param-test-test.cc	/^  static int param_value_;$/;"	m	class:GeneratorEvaluationTest	file:
param_value_	test/googletest-param-test-test.cc	/^int GeneratorEvaluationTest::param_value_ = 0;$/;"	m	class:GeneratorEvaluationTest	file:
parameter_	include/gtest/gtest.h	/^  static const ParamType* parameter_;$/;"	m	class:testing::WithParamInterface
parameter_	include/gtest/gtest.h	/^const T* WithParamInterface<T>::parameter_ = nullptr;$/;"	m	class:testing::WithParamInterface
parameter_	include/gtest/internal/gtest-param-util.h	/^  const ParamType parameter_;$/;"	m	class:testing::internal::ParameterizedTestFactory
parameterized_test_registry	src/gtest-internal-inl.h	/^  internal::ParameterizedTestSuiteRegistry& parameterized_test_registry() {$/;"	f	class:testing::internal::UnitTestImpl
parameterized_test_registry_	src/gtest-internal-inl.h	/^  internal::ParameterizedTestSuiteRegistry parameterized_test_registry_;$/;"	m	class:testing::internal::UnitTestImpl
parameterized_tests_registered_	src/gtest-internal-inl.h	/^  bool parameterized_tests_registered_;$/;"	m	class:testing::internal::UnitTestImpl
parent_	src/gtest-internal-inl.h	/^  UnitTest* const parent_;$/;"	m	class:testing::internal::UnitTestImpl
parent_	test/googletest-death-test-test.cc	/^  MockDeathTestFactory* const parent_;$/;"	m	class:__anon28::MockDeathTest	file:
parser	scripts/upload.py	/^parser = optparse.OptionParser(usage="%prog [options] [-- diff_options]")$/;"	v
partial_regex_	include/gtest/internal/gtest-port.h	/^  regex_t partial_regex_;  \/\/ For PartialMatch().$/;"	m	class:testing::internal::RE
passed	include/gtest/gtest-test-part.h	/^  bool passed() const { return type_ == kSuccess; }$/;"	f	class:testing::TestPartResult
passed_	test/googletest-death-test-test.cc	/^  bool passed_;$/;"	m	class:__anon28::MockDeathTestFactory	file:
passed_	test/googletest-death-test-test.cc	/^  const bool passed_;$/;"	m	class:__anon28::MockDeathTest	file:
passed_args_	test/googletest-death-test-test.cc	/^  std::vector<bool> passed_args_;$/;"	m	class:__anon28::MockDeathTestFactory	file:
pathname_	include/gtest/internal/gtest-filepath.h	/^  std::string pathname_;$/;"	m	class:testing::internal::FilePath
pattern	include/gtest/internal/gtest-port.h	/^  const char* pattern() const { return pattern_; }$/;"	f	class:testing::internal::RE
pattern_	include/gtest/internal/gtest-port.h	/^  const char* pattern_;$/;"	m	class:testing::internal::RE
per_thread_test_part_result_reporter_	src/gtest-internal-inl.h	/^      per_thread_test_part_result_reporter_;$/;"	m	class:testing::internal::UnitTestImpl
pointer	include/gtest/internal/gtest-port.h	/^    T* pointer() { return &value_; }$/;"	f	class:testing::internal::ThreadLocal::ValueHolder
pointer	include/gtest/internal/gtest-port.h	/^  T* pointer() { return &value_; }$/;"	f	class:testing::internal::ThreadLocal
pointer	include/gtest/internal/gtest-port.h	/^  T* pointer() { return GetOrCreateValue(); }$/;"	f	class:testing::internal::ThreadLocal
pointer	include/gtest/internal/gtest-port.h	/^  const T* pointer() const { return &value_; }$/;"	f	class:testing::internal::ThreadLocal
pointer	include/gtest/internal/gtest-port.h	/^  const T* pointer() const { return GetOrCreateValue(); }$/;"	f	class:testing::internal::ThreadLocal
popen2	test/gtest_test_utils.py	/^  import popen2$/;"	i
port_num_	src/gtest-internal-inl.h	/^    const std::string port_num_;$/;"	m	class:testing::internal::StreamingListener::SocketWriter
posix	include/gtest/internal/gtest-port.h	/^namespace posix {$/;"	n	namespace:testing::internal
posix	src/gtest-port.cc	/^namespace posix {$/;"	n	namespace:testing::internal	file:
post_flag_parse_init_performed_	src/gtest-internal-inl.h	/^  bool post_flag_parse_init_performed_;$/;"	m	class:testing::internal::UnitTestImpl
pr1	test/gtest_unittest.cc	/^  TestPartResult * pr1, * pr2;$/;"	m	class:__anon40::TestResultTest	file:
pr2	test/gtest_unittest.cc	/^  TestPartResult * pr1, * pr2;$/;"	m	class:__anon40::TestResultTest	file:
precalc_impl_	samples/sample8_unittest.cc	/^  PreCalculatedPrimeTable* precalc_impl_;$/;"	m	class:__anon10::HybridPrimeTable	file:
premature_exit_file_path_	test/gtest_premature_exit_test.cc	/^  const char* premature_exit_file_path_;$/;"	m	class:__anon35::PrematureExitTest	file:
premature_exit_filepath_	src/gtest.cc	/^  const std::string premature_exit_filepath_;$/;"	m	class:testing::internal::ScopedPrematureExitFile	file:
print	test/googletest-filter-unittest.py	/^      [sys.executable, '-c', 'import os; print(\\'EMPTY_VAR\\' in os.environ)'])$/;"	i
print	test/googletest-filter-unittest.py	/^      [sys.executable, '-c', 'import os; print(\\'UNSET_VAR\\' not in os.environ)'$/;"	i
print_time	test/gtest_unittest.cc	/^  bool print_time;$/;"	m	struct:testing::Flags	file:
print_time_	src/gtest-internal-inl.h	/^  bool print_time_;$/;"	m	class:testing::internal::GTestFlagSaver
print_utf8_	src/gtest-internal-inl.h	/^  bool print_utf8_;$/;"	m	class:testing::internal::GTestFlagSaver
proto2	include/gtest/internal/gtest-internal.h	/^namespace proto2 { class Message; }$/;"	n
pthread_flag	test/googletest-death-test-test.cc	/^bool pthread_flag;$/;"	m	namespace:__anon28	file:
q0_	samples/sample3_unittest.cc	/^  Queue<int> q0_;$/;"	m	class:__anon2::QueueTestSmpl3	file:
q0_	samples/sample5_unittest.cc	/^  Queue<int> q0_;$/;"	m	class:__anon5::QueueTest	file:
q1_	samples/sample3_unittest.cc	/^  Queue<int> q1_;$/;"	m	class:__anon2::QueueTestSmpl3	file:
q1_	samples/sample5_unittest.cc	/^  Queue<int> q1_;$/;"	m	class:__anon5::QueueTest	file:
q2_	samples/sample3_unittest.cc	/^  Queue<int> q2_;$/;"	m	class:__anon2::QueueTestSmpl3	file:
q2_	samples/sample5_unittest.cc	/^  Queue<int> q2_;$/;"	m	class:__anon5::QueueTest	file:
r0	test/gtest_unittest.cc	/^  TestResult * r0, * r1, * r2;$/;"	m	class:__anon40::TestResultTest	file:
r1	test/gtest_unittest.cc	/^  TestResult * r0, * r1, * r2;$/;"	m	class:__anon40::TestResultTest	file:
r1_	test/googletest-test-part-test.cc	/^  TestPartResult r1_, r2_, r3_, r4_;$/;"	m	class:__anon24::TestPartResultTest	file:
r1_	test/googletest-test-part-test.cc	/^  const TestPartResult r1_, r2_;$/;"	m	class:__anon24::TestPartResultArrayTest	file:
r2	test/gtest_unittest.cc	/^  TestResult * r0, * r1, * r2;$/;"	m	class:__anon40::TestResultTest	file:
r2_	test/googletest-test-part-test.cc	/^  TestPartResult r1_, r2_, r3_, r4_;$/;"	m	class:__anon24::TestPartResultTest	file:
r2_	test/googletest-test-part-test.cc	/^  const TestPartResult r1_, r2_;$/;"	m	class:__anon24::TestPartResultArrayTest	file:
r3_	test/googletest-test-part-test.cc	/^  TestPartResult r1_, r2_, r3_, r4_;$/;"	m	class:__anon24::TestPartResultTest	file:
r4_	test/googletest-test-part-test.cc	/^  TestPartResult r1_, r2_, r3_, r4_;$/;"	m	class:__anon24::TestPartResultTest	file:
random	src/gtest-internal-inl.h	/^  internal::Random* random() { return &random_; }$/;"	f	class:testing::internal::UnitTestImpl
random_	src/gtest-internal-inl.h	/^  internal::Random random_;$/;"	m	class:testing::internal::UnitTestImpl
random_	test/googletest-port-test.cc	/^  Random       random_;$/;"	m	class:testing::internal::AtomicCounterWithMutex	file:
random_	test/gtest_unittest.cc	/^  testing::internal::Random random_;$/;"	m	class:__anon40::VectorShuffleTest	file:
random_seed	src/gtest-internal-inl.h	/^  int random_seed() const { return random_seed_; }$/;"	f	class:testing::internal::UnitTestImpl
random_seed	src/gtest.cc	/^int UnitTest::random_seed() const { return impl_->random_seed(); }$/;"	f	class:testing::UnitTest
random_seed	test/gtest_unittest.cc	/^  Int32 random_seed;$/;"	m	struct:testing::Flags	file:
random_seed_	src/gtest-internal-inl.h	/^  int random_seed_;$/;"	m	class:testing::internal::UnitTestImpl
random_seed_	src/gtest-internal-inl.h	/^  internal::Int32 random_seed_;$/;"	m	class:testing::internal::GTestFlagSaver
re	scripts/common.py	/^import re$/;"	i
re	scripts/fuse_gtest_files.py	/^import re$/;"	i
re	scripts/pump.py	/^import re$/;"	i
re	scripts/release_docs.py	/^import re$/;"	i
re	scripts/upload.py	/^import re$/;"	i
re	test/googletest-filter-unittest.py	/^import re$/;"	i
re	test/googletest-json-output-unittest.py	/^import re$/;"	i
re	test/googletest-list-tests-unittest.py	/^import re$/;"	i
re	test/googletest-output-test.py	/^import re$/;"	i
re	test/gtest_help_test.py	/^import re$/;"	i
re	test/gtest_json_test_utils.py	/^import re$/;"	i
re	test/gtest_list_output_unittest.py	/^import re$/;"	i
re	test/gtest_xml_output_unittest.py	/^import re$/;"	i
re	test/gtest_xml_test_utils.py	/^import re$/;"	i
read_fd	src/gtest-death-test.cc	/^  int read_fd() const { return read_fd_; }$/;"	f	class:testing::internal::DeathTestImpl
read_fd_	src/gtest-death-test.cc	/^  int read_fd_;$/;"	m	class:testing::internal::DeathTestImpl	file:
readline	scripts/upload.py	/^  import readline$/;"	i
reference	include/gtest/internal/gtest-param-util.h	/^  typedef const T& reference;$/;"	t	class:testing::internal::ParamIterator
regex_	include/gtest/gtest-matchers.h	/^  const std::shared_ptr<const RE> regex_;$/;"	m	class:testing::internal::MatchesRegexMatcher
registered_	include/gtest/internal/gtest-internal.h	/^  bool registered_;$/;"	m	class:testing::internal::TypedTestSuitePState
registered_tests_	include/gtest/internal/gtest-internal.h	/^  RegisteredTestsMap registered_tests_;$/;"	m	class:testing::internal::TypedTestSuitePState
remove	test/googletest-filepath-test.cc	/^int remove(const char* path) {$/;"	f	namespace:testing::internal::__anon36
removes_	src/gtest.cc	/^  size_t adds_, removes_, common_;$/;"	m	class:testing::internal::edit_distance::__anon12::Hunk	file:
repeat	test/gtest_unittest.cc	/^  Int32 repeat;$/;"	m	struct:testing::Flags	file:
repeat_	src/gtest-internal-inl.h	/^  internal::Int32 repeat_;$/;"	m	class:testing::internal::GTestFlagSaver
repeater	src/gtest.cc	/^TestEventListener* TestEventListeners::repeater() { return repeater_; }$/;"	f	class:testing::TestEventListeners
repeater_	include/gtest/gtest.h	/^  internal::TestEventRepeater* repeater_;$/;"	m	class:testing::TestEventListeners
repl	scripts/upload.py	/^    def repl(m):$/;"	f	function:SubversionVCS._CollapseKeywords
replacer_	test/googletest-death-test-test.cc	/^  static testing::internal::ReplaceDeathTestFactory* replacer_;$/;"	m	class:__anon28::MacroLogicDeathTest	file:
replacer_	test/googletest-death-test-test.cc	/^testing::internal::ReplaceDeathTestFactory* MacroLogicDeathTest::replacer_ =$/;"	m	class:__anon28::MacroLogicDeathTest	file:
reportable_disabled_test_count	src/gtest.cc	/^int TestSuite::reportable_disabled_test_count() const {$/;"	f	class:testing::TestSuite
reportable_disabled_test_count	src/gtest.cc	/^int UnitTest::reportable_disabled_test_count() const {$/;"	f	class:testing::UnitTest
reportable_disabled_test_count	src/gtest.cc	/^int UnitTestImpl::reportable_disabled_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
reportable_test_count	src/gtest.cc	/^int TestSuite::reportable_test_count() const {$/;"	f	class:testing::TestSuite
reportable_test_count	src/gtest.cc	/^int UnitTest::reportable_test_count() const {$/;"	f	class:testing::UnitTest
reportable_test_count	src/gtest.cc	/^int UnitTestImpl::reportable_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
result	include/gtest/gtest.h	/^  const TestResult* result() const { return &result_; }$/;"	f	class:testing::TestInfo
result_	include/gtest/gtest-spi.h	/^  TestPartResultArray* const result_;$/;"	m	class:testing::ScopedFakeTestPartResultReporter
result_	include/gtest/gtest.h	/^  TestResult result_;$/;"	m	class:testing::TestInfo
results_	include/gtest/gtest-spi.h	/^  const TestPartResultArray* const results_;$/;"	m	class:testing::internal::SingleFailureChecker
reverse_iterator	test/gtest_unittest.cc	/^  typedef void reverse_iterator;$/;"	t	struct:NotReallyAHashTable	file:
rhs_	include/gtest/gtest-matchers.h	/^    Rhs rhs_;$/;"	m	class:testing::internal::ComparisonBase::Impl
rhs_	include/gtest/gtest-matchers.h	/^  Rhs rhs_;$/;"	m	class:testing::internal::ComparisonBase
right_start_	src/gtest.cc	/^  size_t left_start_, right_start_;$/;"	m	class:testing::internal::edit_distance::__anon12::Hunk	file:
role_	test/googletest-death-test-test.cc	/^  DeathTest::TestRole role_;$/;"	m	class:__anon28::MockDeathTestFactory	file:
role_	test/googletest-death-test-test.cc	/^  const TestRole role_;$/;"	m	class:__anon28::MockDeathTest	file:
runnable_	src/gtest-port.cc	/^    std::unique_ptr<Runnable> runnable_;$/;"	m	struct:testing::internal::__anon20::ThreadWithParamSupport::ThreadMainParam	file:
s1_	test/gtest_unittest.cc	/^  static const char* const s1_;$/;"	m	class:__anon40::SingleEvaluationTest	file:
s1_	test/gtest_unittest.cc	/^const char* const SingleEvaluationTest::s1_ = "01234";$/;"	m	class:__anon40::SingleEvaluationTest	file:
s2_	test/gtest_unittest.cc	/^  static const char* const s2_;$/;"	m	class:__anon40::SingleEvaluationTest	file:
s2_	test/gtest_unittest.cc	/^const char* const SingleEvaluationTest::s2_ = "abcde";$/;"	m	class:__anon40::SingleEvaluationTest	file:
saved_tz_	test/gtest_unittest.cc	/^  const char* saved_tz_;$/;"	m	class:__anon40::FormatEpochTimeInMillisAsIso8601Test	file:
saver_	test/gtest_unittest.cc	/^  static GTestFlagSaver* saver_;$/;"	m	class:__anon40::GTestFlagSaverTest	file:
saver_	test/gtest_unittest.cc	/^GTestFlagSaver* GTestFlagSaverTest::saver_ = nullptr;$/;"	m	class:__anon40::GTestFlagSaverTest	file:
set	include/gtest/internal/gtest-port.h	/^  void set(const T& value) { *pointer() = value; }$/;"	f	class:testing::internal::ThreadLocal
set	include/gtest/internal/gtest-port.h	/^  void set(const T& value) { value_ = value; }$/;"	f	class:testing::internal::ThreadLocal
set	scripts/fuse_gtest_files.py	/^  from sets import Set as set  # For Python 2.3 compatibility$/;"	i
set	test/googletest-filter-unittest.py	/^  from sets import Set as set  # For Python 2.3 compatibility$/;"	i
setUp	test/googletest-filter-unittest.py	/^  def setUp(self):$/;"	m	class:GTestFilterUnitTest
setUp	test/googletest-json-outfiles-test.py	/^  def setUp(self):$/;"	m	class:GTestJsonOutFilesTest
setUp	test/googletest-shuffle-test.py	/^  def setUp(self):$/;"	m	class:GTestShuffleUnitTest
setUp	test/gtest_xml_outfiles_test.py	/^  def setUp(self):$/;"	m	class:GTestXMLOutFilesTest
set_catch_exceptions	src/gtest-internal-inl.h	/^  void set_catch_exceptions(bool value) { catch_exceptions_ = value; }$/;"	f	class:testing::internal::UnitTestImpl
set_child_pid	src/gtest-death-test.cc	/^  void set_child_pid(pid_t child_pid) { child_pid_ = child_pid; }$/;"	f	class:testing::internal::ForkingDeathTest
set_current_test_info	src/gtest-internal-inl.h	/^  void set_current_test_info(TestInfo* a_current_test_info) {$/;"	f	class:testing::internal::UnitTestImpl
set_current_test_suite	src/gtest-internal-inl.h	/^  void set_current_test_suite(TestSuite* a_current_test_suite) {$/;"	f	class:testing::internal::UnitTestImpl
set_elapsed_time	include/gtest/gtest.h	/^  void set_elapsed_time(TimeInMillis elapsed) { elapsed_time_ = elapsed; }$/;"	f	class:testing::TestResult
set_failure_in_set_up	test/gtest_environment_test.cc	/^  void set_failure_in_set_up(FailureType type) {$/;"	f	class:__anon26::MyEnvironment
set_forwarding_enabled	src/gtest.cc	/^  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }$/;"	f	class:testing::internal::TestEventRepeater
set_last_death_test_message	src/gtest-death-test.cc	/^void DeathTest::set_last_death_test_message(const std::string& message) {$/;"	f	class:testing::internal::DeathTest
set_os_stack_trace_getter	src/gtest.cc	/^void UnitTestImpl::set_os_stack_trace_getter($/;"	f	class:testing::internal::UnitTestImpl
set_outcome	src/gtest-death-test.cc	/^  void set_outcome(DeathTestOutcome an_outcome) { outcome_ = an_outcome; }$/;"	f	class:testing::internal::DeathTestImpl
set_param_value	test/googletest-param-test-test.cc	/^  static void set_param_value(int param_value) { param_value_ = param_value; }$/;"	f	class:GeneratorEvaluationTest
set_read_fd	src/gtest-death-test.cc	/^  void set_read_fd(int fd) { read_fd_ = fd; }$/;"	f	class:testing::internal::DeathTestImpl
set_should_run	include/gtest/gtest.h	/^  void set_should_run(bool should) { should_run_ = should; }$/;"	f	class:testing::TestSuite
set_spawned	src/gtest-death-test.cc	/^  void set_spawned(bool is_spawned) { spawned_ = is_spawned; }$/;"	f	class:testing::internal::DeathTestImpl
set_start_timestamp	include/gtest/gtest.h	/^  void set_start_timestamp(TimeInMillis start) { start_timestamp_ = start; }$/;"	f	class:testing::TestResult
set_status	src/gtest-death-test.cc	/^  void set_status(int a_status) { status_ = a_status; }$/;"	f	class:testing::internal::DeathTestImpl
set_up_count_	test/googletest-param-test-test.cc	/^  int set_up_count_;$/;"	m	class:TestGenerationEnvironment	file:
set_up_tc_	include/gtest/gtest.h	/^  internal::SetUpTestSuiteFunc set_up_tc_;$/;"	m	class:testing::TestSuite
set_up_was_run	test/gtest_environment_test.cc	/^  bool set_up_was_run() const { return set_up_was_run_; }$/;"	f	class:__anon26::MyEnvironment
set_up_was_run_	test/gtest_environment_test.cc	/^  bool set_up_was_run_;$/;"	m	class:__anon26::MyEnvironment	file:
set_write_fd	src/gtest-death-test.cc	/^  void set_write_fd(int fd) { write_fd_ = fd; }$/;"	f	class:testing::internal::DeathTestImpl
set_x	test/production.h	/^  void set_x(int an_x) { x_ = an_x; }$/;"	f	class:PrivateCode
setup	src/gtest_main.cc	/^void setup() {$/;"	f
severity_	include/gtest/internal/gtest-port.h	/^  const GTestLogSeverity severity_;$/;"	m	class:testing::internal::GTestLog
shared_	test/gtest-typed-test_test.cc	/^  static T* shared_;$/;"	m	class:CommonTest	file:
shared_	test/gtest-typed-test_test.cc	/^T* CommonTest<T>::shared_ = nullptr;$/;"	m	class:CommonTest	file:
shared_resource_	test/gtest_unittest.cc	/^  static const char* shared_resource_;$/;"	m	class:testing::SetUpTestCaseTest	file:
shared_resource_	test/gtest_unittest.cc	/^  static const char* shared_resource_;$/;"	m	class:testing::SetUpTestSuiteTest	file:
shared_resource_	test/gtest_unittest.cc	/^const char* SetUpTestCaseTest::shared_resource_ = nullptr;$/;"	m	class:testing::SetUpTestCaseTest	file:
shared_resource_	test/gtest_unittest.cc	/^const char* SetUpTestSuiteTest::shared_resource_ = nullptr;$/;"	m	class:testing::SetUpTestSuiteTest	file:
should_die_	test/googletest-death-test-test.cc	/^  bool should_die_;$/;"	m	class:__anon28::MayDie	file:
should_die_	test/googletest-death-test-test.cc	/^  bool should_die_;$/;"	m	class:__anon28::TestForDeathTest	file:
should_run	include/gtest/gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestInfo
should_run	include/gtest/gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestSuite
should_run_	include/gtest/gtest.h	/^  bool should_run_;           \/\/ True if and only if this test should run$/;"	m	class:testing::TestInfo
should_run_	include/gtest/gtest.h	/^  bool should_run_;$/;"	m	class:testing::TestSuite
show_help	scripts/gtest-config.in	/^show_help()$/;"	f
show_usage	scripts/gtest-config.in	/^show_usage()$/;"	f
shuffle	test/gtest_unittest.cc	/^  bool shuffle;$/;"	m	struct:testing::Flags	file:
shuffle_	src/gtest-internal-inl.h	/^  bool shuffle_;$/;"	m	class:testing::internal::GTestFlagSaver
shutil	test/gtest_test_utils.py	/^import shutil$/;"	i
sign_bit	include/gtest/internal/gtest-internal.h	/^  Bits sign_bit() const { return kSignBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
signum_	include/gtest/gtest-death-test.h	/^  const int signum_;$/;"	m	class:testing::KilledBySignal
size	include/gtest/internal/gtest-internal.h	/^  size_t size() const { return size_; }$/;"	f	class:testing::internal::NativeArray
size	src/gtest-death-test.cc	/^  int size() {$/;"	f	class:testing::internal::Arguments
size	src/gtest-test-part.cc	/^int TestPartResultArray::size() const {$/;"	f	class:testing::TestPartResultArray
size_	include/gtest/internal/gtest-internal.h	/^  size_t size_;$/;"	m	class:testing::internal::NativeArray
size_	samples/sample3-inl.h	/^  size_t size_;  \/\/ The number of elements in the queue.$/;"	m	class:Queue
size_	test/googletest-printers-test.cc	/^  size_t size_;$/;"	m	class:testing::gtest_printers_test::__anon38::string_ptr	file:
size_	test/googletest-printers-test.cc	/^  size_t size_;$/;"	m	class:testing::gtest_printers_test::__anon38::string_ref	file:
skipped	include/gtest/gtest-test-part.h	/^  bool skipped() const { return type_ == kSkip; }$/;"	f	class:testing::TestPartResult
skipped_test_count	src/gtest.cc	/^int TestSuite::skipped_test_count() const {$/;"	f	class:testing::TestSuite
skipped_test_count	src/gtest.cc	/^int UnitTest::skipped_test_count() const {$/;"	f	class:testing::UnitTest
skipped_test_count	src/gtest.cc	/^int UnitTestImpl::skipped_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
socket	scripts/upload.py	/^import socket$/;"	i
socket_writer_	src/gtest-internal-inl.h	/^  const std::unique_ptr<AbstractSocketWriter> socket_writer_;$/;"	m	class:testing::internal::StreamingListener
sockfd_	src/gtest-internal-inl.h	/^    int sockfd_;  \/\/ socket file descriptor$/;"	m	class:testing::internal::StreamingListener::SocketWriter
spawn_thread_ok_to_terminate	test/googletest-output-test_.cc	/^  Notification spawn_thread_ok_to_terminate;$/;"	m	struct:SpawnThreadNotifications	file:
spawn_thread_started	test/googletest-output-test_.cc	/^  Notification spawn_thread_started;$/;"	m	struct:SpawnThreadNotifications	file:
spawned	src/gtest-death-test.cc	/^  bool spawned() const { return spawned_; }$/;"	f	class:testing::internal::DeathTestImpl
spawned_	src/gtest-death-test.cc	/^  bool spawned_;$/;"	m	class:testing::internal::DeathTestImpl	file:
ss_	include/gtest/gtest-message.h	/^  const std::unique_ptr< ::std::stringstream> ss_;$/;"	m	class:testing::Message
stack_trace_depth	test/gtest_unittest.cc	/^  Int32 stack_trace_depth;$/;"	m	struct:testing::Flags	file:
stack_trace_depth_	src/gtest-internal-inl.h	/^  internal::Int32 stack_trace_depth_;$/;"	m	class:testing::internal::GTestFlagSaver
start_time_	samples/sample5_unittest.cc	/^  time_t start_time_;$/;"	m	class:__anon5::QuickTest	file:
start_timestamp	include/gtest/gtest.h	/^  TimeInMillis start_timestamp() const { return start_timestamp_; }$/;"	f	class:testing::TestResult
start_timestamp	include/gtest/gtest.h	/^  TimeInMillis start_timestamp() const { return start_timestamp_; }$/;"	f	class:testing::TestSuite
start_timestamp	src/gtest-internal-inl.h	/^  TimeInMillis start_timestamp() const { return start_timestamp_; }$/;"	f	class:testing::internal::UnitTestImpl
start_timestamp	src/gtest.cc	/^internal::TimeInMillis UnitTest::start_timestamp() const {$/;"	f	class:testing::UnitTest
start_timestamp_	include/gtest/gtest.h	/^  TimeInMillis start_timestamp_;$/;"	m	class:testing::TestResult
start_timestamp_	include/gtest/gtest.h	/^  TimeInMillis start_timestamp_;$/;"	m	class:testing::TestSuite
start_timestamp_	src/gtest-internal-inl.h	/^  TimeInMillis start_timestamp_;$/;"	m	class:testing::internal::UnitTestImpl
state_	include/gtest/internal/gtest-internal.h	/^  UInt32 state_;$/;"	m	class:testing::internal::Random
state_	test/gtest-typed-test_test.cc	/^  TypedTestSuitePState state_;$/;"	m	class:TypedTestSuitePStateTest	file:
statement	src/gtest-death-test.cc	/^  const char* statement() const { return statement_; }$/;"	f	class:testing::internal::DeathTestImpl
statement_	src/gtest-death-test.cc	/^  const char* const statement_;$/;"	m	class:testing::internal::DeathTestImpl	file:
status	src/gtest-death-test.cc	/^  int status() const { return status_; }$/;"	f	class:testing::internal::DeathTestImpl
status_	src/gtest-death-test.cc	/^  int status_;$/;"	m	class:testing::internal::DeathTestImpl	file:
status_	test/googletest-death-test-test.cc	/^  const int status_;$/;"	m	class:__anon28::MockDeathTest	file:
status_	test/googletest-death-test-test.cc	/^  int status_;$/;"	m	class:__anon28::MockDeathTestFactory	file:
stderr_socket_	src/gtest-death-test.cc	/^  zx::socket stderr_socket_;$/;"	m	class:testing::internal::FuchsiaDeathTest	file:
step_	include/gtest/internal/gtest-param-util.h	/^    const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
step_	include/gtest/internal/gtest-param-util.h	/^  const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator
str	test/googletest-param-test-test.cc	/^  const std::string& str() const { return str_; }$/;"	f	class:NonDefaultConstructAssignString
str_	test/googletest-param-test-test.cc	/^  std::string str_;$/;"	m	class:NonDefaultConstructAssignString	file:
stream	include/gtest/gtest-matchers.h	/^  ::std::ostream* stream() { return stream_; }$/;"	f	class:testing::MatchResultListener
stream_	include/gtest/gtest-matchers.h	/^  ::std::ostream* const stream_;$/;"	m	class:testing::MatchResultListener::std
stream_result_to	test/gtest_unittest.cc	/^  const char* stream_result_to;$/;"	m	struct:testing::Flags	file:
stream_result_to_	src/gtest-internal-inl.h	/^  std::string stream_result_to_;$/;"	m	class:testing::internal::GTestFlagSaver
streamer_	test/gtest_unittest.cc	/^  StreamingListener streamer_;$/;"	m	class:testing::internal::StreamingListenerTest	file:
string	include/gtest/internal/gtest-filepath.h	/^  const std::string& string() const { return pathname_; }$/;"	f	class:testing::internal::FilePath
string_ptr	test/googletest-printers-test.cc	/^  string_ptr(const char* data, size_t size) : data_(data), size_(size) {}$/;"	f	class:testing::gtest_printers_test::__anon38::string_ptr
string_ptr	test/googletest-printers-test.cc	/^class string_ptr {$/;"	c	namespace:testing::gtest_printers_test::__anon38	file:
string_ref	test/googletest-printers-test.cc	/^  string_ref(const char* data, size_t size) : data_(data), size_(size) {}$/;"	f	class:testing::gtest_printers_test::__anon38::string_ref
string_ref	test/googletest-printers-test.cc	/^class string_ref {$/;"	c	namespace:testing::gtest_printers_test::__anon38	file:
subprocess	scripts/upload.py	/^import subprocess$/;"	i
subprocess	test/gtest_test_utils.py	/^  import subprocess$/;"	i
substr_	include/gtest/gtest-spi.h	/^  const std::string substr_;$/;"	m	class:testing::internal::SingleFailureChecker
success_	include/gtest/gtest.h	/^  bool success_;$/;"	m	class:testing::AssertionResult
successful_test_case_count	src/gtest.cc	/^int UnitTest::successful_test_case_count() const {$/;"	f	class:testing::UnitTest
successful_test_count	src/gtest.cc	/^int TestSuite::successful_test_count() const {$/;"	f	class:testing::TestSuite
successful_test_count	src/gtest.cc	/^int UnitTest::successful_test_count() const {$/;"	f	class:testing::UnitTest
successful_test_count	src/gtest.cc	/^int UnitTestImpl::successful_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
successful_test_suite_count	src/gtest.cc	/^int UnitTest::successful_test_suite_count() const {$/;"	f	class:testing::UnitTest
successful_test_suite_count	src/gtest.cc	/^int UnitTestImpl::successful_test_suite_count() const {$/;"	f	class:testing::internal::UnitTestImpl
sum	test/googletest-param-test-test.cc	/^  int sum;$/;"	m	struct:StatefulNamingFunctor	file:
sum_	test/googletest-param-test-test.cc	/^  int sum_;$/;"	m	class:StatefulNamingTest	file:
summary	include/gtest/gtest-test-part.h	/^  const char* summary() const { return summary_.c_str(); }$/;"	f	class:testing::TestPartResult
summary_	include/gtest/gtest-test-part.h	/^  std::string summary_;  \/\/ The test failure summary.$/;"	m	class:testing::TestPartResult
swap	src/gtest.cc	/^void AssertionResult::swap(AssertionResult& other) {$/;"	f	class:testing::AssertionResult
sys	scripts/fuse_gtest_files.py	/^import sys$/;"	i
sys	scripts/gen_gtest_pred_impl.py	/^import sys$/;"	i
sys	scripts/pump.py	/^import sys$/;"	i
sys	scripts/release_docs.py	/^import sys$/;"	i
sys	scripts/upload.py	/^import sys$/;"	i
sys	scripts/upload_gtest.py	/^import sys$/;"	i
sys	test/googletest-filter-unittest.py	/^import sys$/;"	i
sys	test/googletest-json-output-unittest.py	/^import sys$/;"	i
sys	test/googletest-output-test.py	/^import sys$/;"	i
sys	test/gtest_test_utils.py	/^import sys$/;"	i
sys	test/gtest_xml_output_unittest.py	/^import sys$/;"	i
table_	samples/sample6_unittest.cc	/^  PrimeTable* const table_;$/;"	m	class:__anon1::PrimeTableTest	file:
table_	samples/sample7_unittest.cc	/^  PrimeTable* table_;$/;"	m	class:__anon7::PrimeTableTestSmpl7	file:
table_	samples/sample8_unittest.cc	/^  HybridPrimeTable* table_;$/;"	m	class:__anon10::PrimeTableTest	file:
tearDown	test/googletest-json-outfiles-test.py	/^  def tearDown(self):$/;"	m	class:GTestJsonOutFilesTest
tearDown	test/gtest_xml_outfiles_test.py	/^  def tearDown(self):$/;"	m	class:GTestXMLOutFilesTest
tear_down_count_	test/googletest-param-test-test.cc	/^  int tear_down_count_;$/;"	m	class:TestGenerationEnvironment	file:
tear_down_tc_	include/gtest/gtest.h	/^  internal::TearDownTestSuiteFunc tear_down_tc_;$/;"	m	class:testing::TestSuite
tear_down_was_run	test/gtest_environment_test.cc	/^  bool tear_down_was_run() const { return tear_down_was_run_; }$/;"	f	class:__anon26::MyEnvironment
tear_down_was_run_	test/gtest_environment_test.cc	/^  bool tear_down_was_run_;$/;"	m	class:__anon26::MyEnvironment	file:
tempfile	test/gtest_test_utils.py	/^import tempfile$/;"	i
testAliasesOfYesAndNo	test/googletest-color-test.py	/^  def testAliasesOfYesAndNo(self):$/;"	m	class:GTestColorTest
testBadFilter	test/googletest-filter-unittest.py	/^  def testBadFilter(self):$/;"	m	class:GTestFilterUnitTest
testBreakOnFailureOverridesThrowOnFailure	test/googletest-break-on-failure-unittest.py	/^  def testBreakOnFailureOverridesThrowOnFailure(self):$/;"	m	class:GTestBreakOnFailureUnitTest
testCatchExceptionsDoesNotInterfere	test/googletest-break-on-failure-unittest.py	/^    def testCatchExceptionsDoesNotInterfere(self):$/;"	f	function:GTestBreakOnFailureUnitTest.testBreakOnFailureOverridesThrowOnFailure
testCatchesCxxExceptionsInFixtureConstructor	test/googletest-catch-exceptions-test.py	/^  def testCatchesCxxExceptionsInFixtureConstructor(self):$/;"	m	class:CatchCxxExceptionsTest
testCatchesCxxExceptionsInFixtureDestructor	test/googletest-catch-exceptions-test.py	/^    def testCatchesCxxExceptionsInFixtureDestructor(self):$/;"	f	function:CatchCxxExceptionsTest.testCatchesCxxExceptionsInFixtureConstructor
testCatchesCxxExceptionsInSetUp	test/googletest-catch-exceptions-test.py	/^  def testCatchesCxxExceptionsInSetUp(self):$/;"	m	class:CatchCxxExceptionsTest
testCatchesCxxExceptionsInSetUpTestCase	test/googletest-catch-exceptions-test.py	/^  def testCatchesCxxExceptionsInSetUpTestCase(self):$/;"	m	class:CatchCxxExceptionsTest
testCatchesCxxExceptionsInTearDown	test/googletest-catch-exceptions-test.py	/^  def testCatchesCxxExceptionsInTearDown(self):$/;"	m	class:CatchCxxExceptionsTest
testCatchesCxxExceptionsInTearDownTestCase	test/googletest-catch-exceptions-test.py	/^  def testCatchesCxxExceptionsInTearDownTestCase(self):$/;"	m	class:CatchCxxExceptionsTest
testCatchesCxxExceptionsInTestBody	test/googletest-catch-exceptions-test.py	/^  def testCatchesCxxExceptionsInTestBody(self):$/;"	m	class:CatchCxxExceptionsTest
testCatchesNonStdCxxExceptions	test/googletest-catch-exceptions-test.py	/^  def testCatchesNonStdCxxExceptions(self):$/;"	m	class:CatchCxxExceptionsTest
testCatchesSehExceptionsWithCxxExceptionsDisabled	test/googletest-catch-exceptions-test.py	/^    def testCatchesSehExceptionsWithCxxExceptionsDisabled(self):$/;"	m	class:CatchSehExceptionsTest
testCatchesSehExceptionsWithCxxExceptionsEnabled	test/googletest-catch-exceptions-test.py	/^    def testCatchesSehExceptionsWithCxxExceptionsEnabled(self):$/;"	m	class:CatchSehExceptionsTest
testDefaultBehavior	test/googletest-break-on-failure-unittest.py	/^  def testDefaultBehavior(self):$/;"	m	class:GTestBreakOnFailureUnitTest
testDefaultBehavior	test/googletest-filter-unittest.py	/^  def testDefaultBehavior(self):$/;"	m	class:GTestFilterUnitTest
testDefaultBehavior	test/googletest-list-tests-unittest.py	/^  def testDefaultBehavior(self):$/;"	m	class:GTestListTestsUnitTest
testDefaultBehavior	test/googletest-throw-on-failure-test.py	/^  def testDefaultBehavior(self):$/;"	m	class:ThrowOnFailureTest
testDefaultBehaviorWithShards	test/googletest-filter-unittest.py	/^  def testDefaultBehaviorWithShards(self):$/;"	m	class:GTestFilterUnitTest
testDefaultOutputFile	test/googletest-json-output-unittest.py	/^  def testDefaultOutputFile(self):$/;"	m	class:GTestJsonOutputUnitTest
testDefaultOutputFile	test/gtest_xml_output_unittest.py	/^  def testDefaultOutputFile(self):$/;"	m	class:GTestXMLOutputUnitTest
testEmptyFilter	test/googletest-filter-unittest.py	/^  def testEmptyFilter(self):$/;"	m	class:GTestFilterUnitTest
testEmptyJsonOutput	test/googletest-json-output-unittest.py	/^  def testEmptyJsonOutput(self):$/;"	m	class:GTestJsonOutputUnitTest
testEmptyXmlOutput	test/gtest_xml_output_unittest.py	/^  def testEmptyXmlOutput(self):$/;"	m	class:GTestXMLOutputUnitTest
testEnvVar	test/googletest-break-on-failure-unittest.py	/^  def testEnvVar(self):$/;"	m	class:GTestBreakOnFailureUnitTest
testEnvVarAffectsFlag	test/googletest-env-var-test.py	/^  def testEnvVarAffectsFlag(self):$/;"	m	class:GTestEnvVarTest
testEnvVarAndFlag	test/googletest-color-test.py	/^  def testEnvVarAndFlag(self):$/;"	m	class:GTestColorTest
testEnvVarOnly	test/googletest-color-test.py	/^  def testEnvVarOnly(self):$/;"	m	class:GTestColorTest
testExitCodeAndOutput	test/googletest-param-test-invalid-name1-test.py	/^  def testExitCodeAndOutput(self):$/;"	m	class:GTestParamTestInvalidName1Test
testExitCodeAndOutput	test/googletest-param-test-invalid-name2-test.py	/^  def testExitCodeAndOutput(self):$/;"	m	class:GTestParamTestInvalidName2Test
testExitCodeAndOutput	test/googletest-uninitialized-test.py	/^  def testExitCodeAndOutput(self):$/;"	m	class:GTestUninitializedTest
testFilterByTest	test/googletest-filter-unittest.py	/^  def testFilterByTest(self):$/;"	m	class:GTestFilterUnitTest
testFilterByTestCase	test/googletest-filter-unittest.py	/^  def testFilterByTestCase(self):$/;"	m	class:GTestFilterUnitTest
testFilterDisabledTests	test/googletest-filter-unittest.py	/^  def testFilterDisabledTests(self):$/;"	m	class:GTestFilterUnitTest
testFilterWithoutDot	test/googletest-filter-unittest.py	/^  def testFilterWithoutDot(self):$/;"	m	class:GTestFilterUnitTest
testFilteredTestJsonOutput	test/googletest-json-output-unittest.py	/^  def testFilteredTestJsonOutput(self):$/;"	m	class:GTestJsonOutputUnitTest
testFilteredTestXmlOutput	test/gtest_xml_output_unittest.py	/^  def testFilteredTestXmlOutput(self):$/;"	m	class:GTestXMLOutputUnitTest
testFlag	test/googletest-break-on-failure-unittest.py	/^  def testFlag(self):$/;"	m	class:GTestBreakOnFailureUnitTest
testFlag	test/googletest-list-tests-unittest.py	/^  def testFlag(self):$/;"	m	class:GTestListTestsUnitTest
testFlagOnly	test/googletest-color-test.py	/^  def testFlagOnly(self):$/;"	m	class:GTestColorTest
testFlagOverridesEnvVar	test/googletest-break-on-failure-unittest.py	/^  def testFlagOverridesEnvVar(self):$/;"	m	class:GTestBreakOnFailureUnitTest
testFlagOverridesEnvVar	test/googletest-filter-unittest.py	/^  def testFlagOverridesEnvVar(self):$/;"	m	class:GTestFilterUnitTest
testFullName	test/googletest-filter-unittest.py	/^  def testFullName(self):$/;"	m	class:GTestFilterUnitTest
testJSON	test/gtest_list_output_unittest.py	/^  def testJSON(self):$/;"	m	class:GTestListTestsOutputUnitTest
testNegativeFilters	test/googletest-filter-unittest.py	/^  def testNegativeFilters(self):$/;"	m	class:GTestFilterUnitTest
testNoEnvVarNoFlag	test/googletest-color-test.py	/^  def testNoEnvVarNoFlag(self):$/;"	m	class:GTestColorTest
testNonEmptyJsonOutput	test/googletest-json-output-unittest.py	/^    def testNonEmptyJsonOutput(self):$/;"	m	class:GTestJsonOutputUnitTest
testNonEmptyXmlOutput	test/gtest_xml_output_unittest.py	/^    def testNonEmptyXmlOutput(self):$/;"	m	class:GTestXMLOutputUnitTest
testOutfile1	test/googletest-json-outfiles-test.py	/^  def testOutfile1(self):$/;"	m	class:GTestJsonOutFilesTest
testOutfile1	test/gtest_xml_outfiles_test.py	/^  def testOutfile1(self):$/;"	m	class:GTestXMLOutFilesTest
testOutfile2	test/googletest-json-outfiles-test.py	/^  def testOutfile2(self):$/;"	m	class:GTestJsonOutFilesTest
testOutfile2	test/gtest_xml_outfiles_test.py	/^  def testOutfile2(self):$/;"	m	class:GTestXMLOutFilesTest
testOutput	test/googletest-output-test.py	/^  def testOutput(self):$/;"	m	class:GTestOutputTest
testOverrideNonFilterFlags	test/googletest-list-tests-unittest.py	/^  def testOverrideNonFilterFlags(self):$/;"	m	class:GTestListTestsUnitTest
testPrintsHelpWithFullFlag	test/gtest_help_test.py	/^  def testPrintsHelpWithFullFlag(self):$/;"	m	class:GTestHelpTest
testPrintsHelpWithIncorrectFlagStyle	test/gtest_help_test.py	/^  def testPrintsHelpWithIncorrectFlagStyle(self):$/;"	m	class:GTestHelpTest
testPrintsHelpWithQuestionFlag	test/gtest_help_test.py	/^  def testPrintsHelpWithQuestionFlag(self):$/;"	m	class:GTestHelpTest
testPrintsHelpWithShortFlag	test/gtest_help_test.py	/^  def testPrintsHelpWithShortFlag(self):$/;"	m	class:GTestHelpTest
testPrintsHelpWithUnrecognizedGoogleTestFlag	test/gtest_help_test.py	/^  def testPrintsHelpWithUnrecognizedGoogleTestFlag(self):$/;"	m	class:GTestHelpTest
testPrintsHelpWithWindowsStyleQuestionFlag	test/gtest_help_test.py	/^  def testPrintsHelpWithWindowsStyleQuestionFlag(self):$/;"	m	class:GTestHelpTest
testRunsTestsWithGtestInternalFlag	test/gtest_help_test.py	/^  def testRunsTestsWithGtestInternalFlag(self):$/;"	m	class:GTestHelpTest
testRunsTestsWithoutHelpFlag	test/gtest_help_test.py	/^  def testRunsTestsWithoutHelpFlag(self):$/;"	m	class:GTestHelpTest
testShardStatusFileIsCreated	test/googletest-filter-unittest.py	/^  def testShardStatusFileIsCreated(self):$/;"	m	class:GTestFilterUnitTest
testShardStatusFileIsCreatedWithListTests	test/googletest-filter-unittest.py	/^  def testShardStatusFileIsCreatedWithListTests(self):$/;"	m	class:GTestFilterUnitTest
testShardedTestXmlOutput	test/gtest_xml_output_unittest.py	/^  def testShardedTestXmlOutput(self):$/;"	m	class:GTestXMLOutputUnitTest
testShardingWorksWithDeathTests	test/googletest-filter-unittest.py	/^    def testShardingWorksWithDeathTests(self):$/;"	f	function:GTestFilterUnitTest.testShardStatusFileIsCreatedWithListTests
testShuffleChangesTestCaseOrder	test/googletest-shuffle-test.py	/^  def testShuffleChangesTestCaseOrder(self):$/;"	m	class:GTestShuffleUnitTest
testShuffleChangesTestOrder	test/googletest-shuffle-test.py	/^  def testShuffleChangesTestOrder(self):$/;"	m	class:GTestShuffleUnitTest
testShuffleDoesNotCreateNewTest	test/googletest-shuffle-test.py	/^  def testShuffleDoesNotCreateNewTest(self):$/;"	m	class:GTestShuffleUnitTest
testShuffleDoesNotInterleaveTestCases	test/googletest-shuffle-test.py	/^  def testShuffleDoesNotInterleaveTestCases(self):$/;"	m	class:GTestShuffleUnitTest
testShuffleDoesNotRepeatTest	test/googletest-shuffle-test.py	/^  def testShuffleDoesNotRepeatTest(self):$/;"	m	class:GTestShuffleUnitTest
testShuffleGeneratesNewOrderInEachIteration	test/googletest-shuffle-test.py	/^  def testShuffleGeneratesNewOrderInEachIteration(self):$/;"	m	class:GTestShuffleUnitTest
testShuffleIncludesAllTests	test/googletest-shuffle-test.py	/^  def testShuffleIncludesAllTests(self):$/;"	m	class:GTestShuffleUnitTest
testShuffleLeavesDeathTestsAtFront	test/googletest-shuffle-test.py	/^  def testShuffleLeavesDeathTestsAtFront(self):$/;"	m	class:GTestShuffleUnitTest
testShufflePreservesNumberOfTests	test/googletest-shuffle-test.py	/^  def testShufflePreservesNumberOfTests(self):$/;"	m	class:GTestShuffleUnitTest
testShuffleRestoresOrderAfterEachIteration	test/googletest-shuffle-test.py	/^  def testShuffleRestoresOrderAfterEachIteration(self):$/;"	m	class:GTestShuffleUnitTest
testShuffleShardedTestsPreservesPartition	test/googletest-shuffle-test.py	/^  def testShuffleShardedTestsPreservesPartition(self):$/;"	m	class:GTestShuffleUnitTest
testSkipEntireEnvironmentTest	test/gtest_skip_environment_check_output_test.py	/^  def testSkipEntireEnvironmentTest(self):$/;"	m	class:SkipEntireEnvironmentTest
testSuppressedJsonOutput	test/googletest-json-output-unittest.py	/^  def testSuppressedJsonOutput(self):$/;"	m	class:GTestJsonOutputUnitTest
testSuppressedXmlOutput	test/gtest_xml_output_unittest.py	/^  def testSuppressedXmlOutput(self):$/;"	m	class:GTestXMLOutputUnitTest
testTestExecutionIsFiltered	test/gtest_testbridge_test.py	/^  def testTestExecutionIsFiltered(self):$/;"	m	class:GTestTestFilterTest
testThreePatterns	test/googletest-filter-unittest.py	/^  def testThreePatterns(self):$/;"	m	class:GTestFilterUnitTest
testThrowOnFailureEnvVar	test/googletest-throw-on-failure-test.py	/^  def testThrowOnFailureEnvVar(self):$/;"	m	class:ThrowOnFailureTest
testThrowOnFailureFlag	test/googletest-throw-on-failure-test.py	/^  def testThrowOnFailureFlag(self):$/;"	m	class:ThrowOnFailureTest
testThrowOnFailureFlagOverridesEnvVar	test/googletest-throw-on-failure-test.py	/^  def testThrowOnFailureFlagOverridesEnvVar(self):$/;"	m	class:ThrowOnFailureTest
testTimestampValue	test/googletest-json-output-unittest.py	/^  def testTimestampValue(self):$/;"	m	class:GTestJsonOutputUnitTest
testTimestampValue	test/gtest_xml_output_unittest.py	/^  def testTimestampValue(self):$/;"	m	class:GTestXMLOutputUnitTest
testTwoPatterns	test/googletest-filter-unittest.py	/^  def testTwoPatterns(self):$/;"	m	class:GTestFilterUnitTest
testUnhandledCxxExceptionsAbortTheProgram	test/googletest-catch-exceptions-test.py	/^  def testUnhandledCxxExceptionsAbortTheProgram(self):$/;"	m	class:CatchCxxExceptionsTest
testUniversalFilters	test/googletest-filter-unittest.py	/^  def testUniversalFilters(self):$/;"	m	class:GTestFilterUnitTest
testWildcardInTestCaseName	test/googletest-filter-unittest.py	/^  def testWildcardInTestCaseName(self):$/;"	m	class:GTestFilterUnitTest
testWildcardInTestName	test/googletest-filter-unittest.py	/^  def testWildcardInTestName(self):$/;"	m	class:GTestFilterUnitTest
testWithFilterFlags	test/googletest-list-tests-unittest.py	/^  def testWithFilterFlags(self):$/;"	m	class:GTestListTestsUnitTest
testXml	test/gtest_list_output_unittest.py	/^  def testXml(self):$/;"	m	class:GTestListTestsOutputUnitTest
testXmlOutputFile	test/googletest-env-var-test.py	/^  def testXmlOutputFile(self):$/;"	m	class:GTestEnvVarTest
testXmlOutputFileOverride	test/googletest-env-var-test.py	/^  def testXmlOutputFileOverride(self):$/;"	m	class:GTestEnvVarTest
test_	include/gtest/internal/gtest-death-test-internal.h	/^    DeathTest* const test_;$/;"	m	class:testing::internal::DeathTest::ReturnSentinel
test_base_name	include/gtest/internal/gtest-param-util.h	/^    const std::string test_base_name;$/;"	m	struct:testing::internal::ParameterizedTestSuiteInfo::TestInfo
test_body_count_	test/googletest-param-test-test.cc	/^  int test_body_count_;$/;"	m	class:TestGenerationEnvironment	file:
test_case_name	include/gtest/gtest.h	/^  const char* test_case_name() const { return test_suite_name(); }$/;"	f	class:testing::TestInfo
test_case_to_run_count	src/gtest.cc	/^int UnitTest::test_case_to_run_count() const {$/;"	f	class:testing::UnitTest
test_deleted_	test/googletest-death-test-test.cc	/^  bool test_deleted_;$/;"	m	class:__anon28::MockDeathTestFactory	file:
test_generation_params	test/googletest-param-test-test.cc	/^const int test_generation_params[] = {36, 42, 72};$/;"	v
test_indices_	include/gtest/gtest.h	/^  std::vector<int> test_indices_;$/;"	m	class:testing::TestSuite
test_info_list	include/gtest/gtest.h	/^  const std::vector<TestInfo*>& test_info_list() const {$/;"	f	class:testing::TestSuite
test_info_list	include/gtest/gtest.h	/^  std::vector<TestInfo*>& test_info_list() { return test_info_list_; }$/;"	f	class:testing::TestSuite
test_info_list_	include/gtest/gtest.h	/^  std::vector<TestInfo*> test_info_list_;$/;"	m	class:testing::TestSuite
test_info_obj_	test/gtest_unittest.cc	/^  TestInfo test_info_obj_;  \/\/ The name test_info_ was taken by testing::Test.$/;"	m	class:testing::internal::StreamingListenerTest	file:
test_list	test/googletest-output-test.py	/^test_list = GetShellCommandOutput(COMMAND_LIST_TESTS)$/;"	v
test_meta_factory	include/gtest/internal/gtest-param-util.h	/^    const std::unique_ptr<TestMetaFactoryBase<ParamType> > test_meta_factory;$/;"	m	struct:testing::internal::ParameterizedTestSuiteInfo::TestInfo
test_part_results	include/gtest/gtest.h	/^  const std::vector<TestPartResult>& test_part_results() const {$/;"	f	class:testing::TestResult
test_part_results	src/gtest-internal-inl.h	/^  static const std::vector<testing::TestPartResult>& test_part_results($/;"	f	class:testing::internal::TestResultAccessor
test_part_results_	include/gtest/gtest.h	/^  std::vector<TestPartResult> test_part_results_;$/;"	m	class:testing::TestResult
test_properites_mutex_	include/gtest/gtest.h	/^  internal::Mutex test_properites_mutex_;$/;"	m	class:testing::TestResult
test_properties	include/gtest/gtest.h	/^  const std::vector<TestProperty>& test_properties() const {$/;"	f	class:testing::TestResult
test_properties_	include/gtest/gtest.h	/^  std::vector<TestProperty> test_properties_;$/;"	m	class:testing::TestResult
test_property_count	src/gtest.cc	/^int TestResult::test_property_count() const {$/;"	f	class:testing::TestResult
test_suite_base_name	include/gtest/internal/gtest-param-util.h	/^    const std::string test_suite_base_name;$/;"	m	struct:testing::internal::ParameterizedTestSuiteInfo::TestInfo
test_suite_indices_	src/gtest-internal-inl.h	/^  std::vector<int> test_suite_indices_;$/;"	m	class:testing::internal::UnitTestImpl
test_suite_name	include/gtest/gtest.h	/^  const char* test_suite_name() const { return test_suite_name_.c_str(); }$/;"	f	class:testing::TestInfo
test_suite_name_	include/gtest/gtest.h	/^  const std::string test_suite_name_;    \/\/ test suite name$/;"	m	class:testing::TestInfo
test_suite_name_	include/gtest/internal/gtest-param-util.h	/^  const std::string test_suite_name_;$/;"	m	class:testing::internal::ParameterizedTestSuiteInfo
test_suite_to_run_count	src/gtest.cc	/^int UnitTest::test_suite_to_run_count() const {$/;"	f	class:testing::UnitTest
test_suite_to_run_count	src/gtest.cc	/^int UnitTestImpl::test_suite_to_run_count() const {$/;"	f	class:testing::internal::UnitTestImpl
test_suites_	src/gtest-internal-inl.h	/^  std::vector<TestSuite*> test_suites_;$/;"	m	class:testing::internal::UnitTestImpl
test_to_run_count	src/gtest.cc	/^int TestSuite::test_to_run_count() const {$/;"	f	class:testing::TestSuite
test_to_run_count	src/gtest.cc	/^int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }$/;"	f	class:testing::UnitTest
test_to_run_count	src/gtest.cc	/^int UnitTestImpl::test_to_run_count() const {$/;"	f	class:testing::internal::UnitTestImpl
test_was_run	test/gtest_environment_test.cc	/^bool test_was_run;$/;"	m	namespace:__anon26	file:
testdata_file_	test/googletest-filepath-test.cc	/^  FilePath testdata_file_;  \/\/ "\/tmp\/directory_creation\/test"$/;"	m	class:testing::internal::__anon36::DirectoryCreationTest	file:
testdata_path_	test/googletest-filepath-test.cc	/^  FilePath testdata_path_;  \/\/ "\/tmp\/directory_creation\/test\/"$/;"	m	class:testing::internal::__anon36::DirectoryCreationTest	file:
testdata_path_	test/gtest_unittest.cc	/^  internal::FilePath testdata_path_;$/;"	m	class:testing::FlagfileTest	file:
testing	include/gtest/gtest-death-test.h	/^namespace testing {$/;"	n
testing	include/gtest/gtest-matchers.h	/^namespace testing {$/;"	n
testing	include/gtest/gtest-message.h	/^namespace testing {$/;"	n
testing	include/gtest/gtest-param-test.h	/^namespace testing {$/;"	n
testing	include/gtest/gtest-printers.h	/^namespace testing {$/;"	n
testing	include/gtest/gtest-spi.h	/^namespace testing {$/;"	n
testing	include/gtest/gtest-test-part.h	/^namespace testing {$/;"	n
testing	include/gtest/gtest.h	/^namespace testing {$/;"	n
testing	include/gtest/gtest_pred_impl.h	/^namespace testing {$/;"	n
testing	include/gtest/internal/gtest-death-test-internal.h	/^namespace testing {$/;"	n
testing	include/gtest/internal/gtest-filepath.h	/^namespace testing {$/;"	n
testing	include/gtest/internal/gtest-internal.h	/^namespace testing {$/;"	n
testing	include/gtest/internal/gtest-param-util.h	/^namespace testing {$/;"	n
testing	include/gtest/internal/gtest-port.h	/^namespace testing {$/;"	n
testing	include/gtest/internal/gtest-string.h	/^namespace testing {$/;"	n
testing	include/gtest/internal/gtest-type-util.h	/^namespace testing {$/;"	n
testing	src/gtest-death-test.cc	/^namespace testing {$/;"	n	file:
testing	src/gtest-filepath.cc	/^namespace testing {$/;"	n	file:
testing	src/gtest-internal-inl.h	/^namespace testing {$/;"	n
testing	src/gtest-matchers.cc	/^namespace testing {$/;"	n	file:
testing	src/gtest-port.cc	/^namespace testing {$/;"	n	file:
testing	src/gtest-printers.cc	/^namespace testing {$/;"	n	file:
testing	src/gtest-test-part.cc	/^namespace testing {$/;"	n	file:
testing	src/gtest-typed-test.cc	/^namespace testing {$/;"	n	file:
testing	src/gtest.cc	/^namespace testing {$/;"	n	file:
testing	test/googletest-death-test-test.cc	/^namespace testing {$/;"	n	file:
testing	test/googletest-env-var-test_.cc	/^namespace testing {$/;"	n	file:
testing	test/googletest-filepath-test.cc	/^namespace testing {$/;"	n	file:
testing	test/googletest-listener-test.cc	/^namespace testing {$/;"	n	file:
testing	test/googletest-options-test.cc	/^namespace testing {$/;"	n	file:
testing	test/googletest-port-test.cc	/^namespace testing {$/;"	n	file:
testing	test/googletest-printers-test.cc	/^namespace testing {$/;"	n	file:
testing	test/gtest-unittest-api_test.cc	/^namespace testing {$/;"	n	file:
testing	test/gtest_environment_test.cc	/^namespace testing {$/;"	n	file:
testing	test/gtest_repeat_test.cc	/^namespace testing {$/;"	n	file:
testing	test/gtest_stress_test.cc	/^namespace testing {$/;"	n	file:
testing	test/gtest_unittest.cc	/^namespace testing {$/;"	n	file:
testing	test/gtest_unittest.cc	/^namespace testing {$/;"	n	namespace:my_namespace	file:
testing_internal	include/gtest/gtest-printers.h	/^namespace testing_internal {$/;"	n
tests_	include/gtest/internal/gtest-param-util.h	/^  TestInfoContainer tests_;$/;"	m	class:testing::internal::ParameterizedTestSuiteInfo
thread_	include/gtest/internal/gtest-port.h	/^  AutoHandle thread_;$/;"	m	class:testing::internal::ThreadWithParamBase
thread_	include/gtest/internal/gtest-port.h	/^  pthread_t thread_;  \/\/ The native thread object.$/;"	m	class:testing::internal::ThreadWithParam
thread_	test/googletest-output-test_.cc	/^  std::unique_ptr<ThreadWithParam<SpawnThreadNotifications*> > thread_;$/;"	m	class:DeathTestAndMultiThreadsTest	file:
thread_can_start_	include/gtest/internal/gtest-port.h	/^  Notification* const thread_can_start_;$/;"	m	class:testing::internal::ThreadWithParam
thread_can_start_	src/gtest-port.cc	/^    Notification* thread_can_start_;$/;"	m	struct:testing::internal::__anon20::ThreadWithParamSupport::ThreadMainParam	file:
thread_map_mutex_	src/gtest-port.cc	/^  static Mutex thread_map_mutex_;$/;"	m	class:testing::internal::ThreadLocalRegistryImpl	file:
throw_on_failure	test/gtest_unittest.cc	/^  bool throw_on_failure;$/;"	m	struct:testing::Flags	file:
throw_on_failure_	src/gtest-internal-inl.h	/^  bool throw_on_failure_;$/;"	m	class:testing::internal::GTestFlagSaver
time	scripts/gen_gtest_pred_impl.py	/^import time$/;"	i
total_part_count	src/gtest.cc	/^int TestResult::total_part_count() const {$/;"	f	class:testing::TestResult
total_test_case_count	src/gtest.cc	/^int UnitTest::total_test_case_count() const {$/;"	f	class:testing::UnitTest
total_test_count	src/gtest.cc	/^int TestSuite::total_test_count() const {$/;"	f	class:testing::TestSuite
total_test_count	src/gtest.cc	/^int UnitTest::total_test_count() const { return impl()->total_test_count(); }$/;"	f	class:testing::UnitTest
total_test_count	src/gtest.cc	/^int UnitTestImpl::total_test_count() const {$/;"	f	class:testing::internal::UnitTestImpl
total_test_suite_count	src/gtest.cc	/^int UnitTest::total_test_suite_count() const {$/;"	f	class:testing::UnitTest
total_test_suite_count	src/gtest.cc	/^int UnitTestImpl::total_test_suite_count() const {$/;"	f	class:testing::internal::UnitTestImpl
total_var_	test/gtest_unittest.cc	/^  const char* total_var_;$/;"	m	class:__anon40::ShouldShardTest	file:
type	include/gtest/gtest-test-part.h	/^  Type type() const { return type_; }$/;"	f	class:testing::TestPartResult
type	include/gtest/gtest.h	/^    TestPartResult::Type const type;$/;"	m	class:testing::internal::AssertHelper::AssertHelperData::TestPartResult
type	include/gtest/internal/gtest-internal.h	/^  typedef Provided type;$/;"	t	struct:testing::internal::NameGeneratorSelector
type	include/gtest/internal/gtest-port.h	/^struct ConstRef { typedef const T& type; };$/;"	t	struct:testing::internal::ConstRef
type	include/gtest/internal/gtest-port.h	/^struct ConstRef<T&> { typedef T& type; };$/;"	t	struct:testing::internal::ConstRef
type	include/gtest/internal/gtest-type-util.h	/^      T12> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16, T17> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15, T16> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T13, T14, T15> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T13, T14> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T13> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T13> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16, T17> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T14, T15, T16> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T14, T15> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T14> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T26> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30, T31> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29, T30> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T27, T28, T29> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T27, T28> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T27> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T27> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30, T31> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T28, T29, T30> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T28, T29> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T28> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T40> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50>::type type;$/;"	t	struct:testing::internal::TypeList
type	include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44, T45> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43, T44> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T41, T42, T43> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T41, T42> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T41> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^      T41> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T42, T43, T44, T45> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T42, T43, T44> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T42, T43> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^      T42> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^    typedef Tmpl<T> type;$/;"	t	struct:testing::internal::TemplateSel::Bind
type	include/gtest/internal/gtest-type-util.h	/^  typedef Templates0 type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^  typedef Templates10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^  typedef Templates11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^  typedef Templates12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^  typedef Templates1<T1> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^  typedef Templates2<T1, T2> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^  typedef Templates3<T1, T2, T3> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^  typedef Templates4<T1, T2, T3, T4> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^  typedef Templates5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^  typedef Templates6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^  typedef Templates7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^  typedef Templates8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^  typedef Templates9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::internal::Templates
type	include/gtest/internal/gtest-type-util.h	/^  typedef Types1<T> type;$/;"	t	struct:testing::internal::TypeList
type	include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types0 type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types1<T1> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types2<T1, T2> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types3<T1, T2, T3> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types4<T1, T2, T3, T4> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::Types
type	include/gtest/internal/gtest-type-util.h	/^  typedef internal::Types9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::Types
type_	include/gtest/gtest-spi.h	/^  const TestPartResult::Type type_;$/;"	m	class:testing::internal::SingleFailureChecker
type_	include/gtest/gtest-test-part.h	/^  Type type_;$/;"	m	class:testing::TestPartResult
type_	include/gtest/internal/gtest-port.h	/^  MutexType type_;$/;"	m	class:testing::internal::Mutex
type_param	include/gtest/gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestInfo
type_param	include/gtest/gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestSuite
type_param_	include/gtest/gtest.h	/^  const std::unique_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestInfo
type_param_	include/gtest/gtest.h	/^  const std::unique_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestSuite
u_	include/gtest/internal/gtest-internal.h	/^  FloatingPointUnion u_;$/;"	m	class:testing::internal::FloatingPoint
uncaptured_fd_	src/gtest-port.cc	/^  int uncaptured_fd_;$/;"	m	class:testing::internal::CapturedStream	file:
unique_file0_	test/googletest-filepath-test.cc	/^  FilePath unique_file0_;  \/\/ "\/tmp\/directory_creation\/test\/unique.txt"$/;"	m	class:testing::internal::__anon36::DirectoryCreationTest	file:
unique_file1_	test/googletest-filepath-test.cc	/^  FilePath unique_file1_;  \/\/ "\/tmp\/directory_creation\/test\/unique_1.txt"$/;"	m	class:testing::internal::__anon36::DirectoryCreationTest	file:
unit_test_	src/gtest-internal-inl.h	/^  UnitTestImpl* const unit_test_;$/;"	m	class:testing::internal::DefaultGlobalTestPartResultReporter
unit_test_	src/gtest-internal-inl.h	/^  UnitTestImpl* const unit_test_;$/;"	m	class:testing::internal::DefaultPerThreadTestPartResultReporter
unit_test_	test/gtest_unittest.cc	/^  UnitTest unit_test_;$/;"	m	class:testing::internal::StreamingListenerTest	file:
unit_test_	test/gtest_unittest.cc	/^  UnitTest unit_test_;$/;"	m	class:testing::internal::UnitTestRecordPropertyTestHelper	file:
unit_test_impl_	test/googletest-death-test-test.cc	/^  UnitTestImpl* unit_test_impl_;$/;"	m	class:testing::internal::ReplaceDeathTestFactory	file:
urllib	scripts/upload.py	/^import urllib$/;"	i
urllib2	scripts/upload.py	/^import urllib2$/;"	i
urlparse	scripts/upload.py	/^import urlparse$/;"	i
use_shell	scripts/upload.py	/^use_shell = sys.platform.startswith("win")$/;"	v
v_	include/gtest/internal/gtest-param-util.h	/^  FlatTuple<Ts...> v_;$/;"	m	class:testing::internal::ValueArray
value	include/gtest/gtest.h	/^  const char* value() const {$/;"	f	class:testing::TestProperty
value	include/gtest/internal/gtest-internal.h	/^  const char* value;$/;"	m	struct:testing::internal::ConstCharPtr
value	include/gtest/internal/gtest-internal.h	/^  static const bool value = sizeof(test<T>(nullptr, nullptr)) == sizeof(int);$/;"	m	struct:testing::internal::IsHashTable
value	include/gtest/internal/gtest-internal.h	/^  value_type value;$/;"	m	struct:testing::internal::FlatTupleElemBase
value	include/gtest/internal/gtest-internal.h	/^const bool IsHashTable<T>::value;$/;"	m	class:testing::internal::IsHashTable
value	test/googletest-list-tests-unittest_.cc	/^  const std::string& value() const { return value_; }$/;"	f	class:MyType
value	test/googletest-param-test-test.cc	/^  const std::string& value() const { return value_; }$/;"	f	class:DogAdder
value	test/googletest-param-test-test.cc	/^  int value() const { return value_; }$/;"	f	class:IntWrapper
value	test/googletest-port-test.cc	/^  int value() const { return value_; }$/;"	f	class:testing::internal::AtomicCounterWithMutex
value	test/googletest-printers-test.cc	/^  const T& value() const { return value_; }$/;"	f	class:foo::PrintableViaPrintToTemplate
value	test/googletest-printers-test.cc	/^  const T& value() const { return value_; }$/;"	f	class:foo::StreamableTemplateInFoo
value	test/googletest-printers-test.cc	/^  int value;$/;"	m	struct:foo::PrintableViaPrintTo	file:
value	test/googletest-printers-test.cc	/^  int value;$/;"	m	struct:testing::gtest_printers_test::Foo	file:
value	test/gtest_pred_impl_unittest.cc	/^  bool value;$/;"	m	struct:Bool	file:
value	test/gtest_unittest.cc	/^  int value() const { return value_; }$/;"	f	class:__anon40::Uncopyable
value_	include/gtest/gtest.h	/^  std::string value_;$/;"	m	class:testing::TestProperty
value_	include/gtest/internal/gtest-internal.h	/^    RawType value_;  \/\/ The raw floating-point number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
value_	include/gtest/internal/gtest-param-util.h	/^    T value_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
value_	include/gtest/internal/gtest-param-util.h	/^    mutable std::unique_ptr<const T> value_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
value_	include/gtest/internal/gtest-port.h	/^    T value_;$/;"	m	class:testing::internal::ThreadLocal::ValueHolder
value_	include/gtest/internal/gtest-port.h	/^    const T value_;  \/\/ The value for each thread.$/;"	m	class:testing::internal::ThreadLocal::InstanceValueHolderFactory
value_	include/gtest/internal/gtest-port.h	/^  T value_;$/;"	m	class:testing::internal::ThreadLocal
value_	test/googletest-list-tests-unittest_.cc	/^  std::string value_;$/;"	m	class:MyType	file:
value_	test/googletest-param-test-test.cc	/^  int value_;$/;"	m	class:IntWrapper	file:
value_	test/googletest-param-test-test.cc	/^  int value_;$/;"	m	class:Unstreamable	file:
value_	test/googletest-param-test-test.cc	/^  std::string value_;$/;"	m	class:DogAdder	file:
value_	test/googletest-port-test.cc	/^  volatile int value_;$/;"	m	class:testing::internal::AtomicCounterWithMutex	file:
value_	test/googletest-printers-test.cc	/^  T value_;$/;"	m	class:UnprintableTemplateInGlobal	file:
value_	test/googletest-printers-test.cc	/^  T value_;$/;"	m	class:foo::PrintableViaPrintToTemplate	file:
value_	test/googletest-printers-test.cc	/^  T value_;$/;"	m	class:foo::StreamableTemplateInFoo	file:
value_	test/gtest-typed-test_test.cc	/^  T value_;$/;"	m	class:CommonTest	file:
value_	test/gtest_unittest.cc	/^  int value_;$/;"	m	class:__anon40::Uncopyable	file:
value_param	include/gtest/gtest.h	/^  const char* value_param() const {$/;"	f	class:testing::TestInfo
value_param_	include/gtest/gtest.h	/^  const std::unique_ptr<const ::std::string> value_param_;$/;"	m	class:testing::TestInfo
value_type	include/gtest/internal/gtest-internal.h	/^  typedef Element value_type;$/;"	t	class:testing::internal::NativeArray
value_type	include/gtest/internal/gtest-param-util.h	/^  typedef T value_type;$/;"	t	class:testing::internal::ParamIterator
value_type	test/googletest-printers-test.cc	/^    typedef PathLike value_type;$/;"	t	struct:foo::PathLike::iterator	file:
values_	test/gtest_unittest.cc	/^    FloatingPointTest<RawType>::values_;$/;"	m	class:__anon40::FloatingPointTest	file:
values_	test/gtest_unittest.cc	/^  static TestValues values_;$/;"	m	class:__anon40::FloatingPointTest	file:
vector_	test/gtest_unittest.cc	/^  TestingVector vector_;$/;"	m	class:__anon40::VectorShuffleTest	file:
vector_	test/gtest_unittest.cc	/^  std::vector<std::string>* vector_;$/;"	m	class:SequenceTestingListener	file:
verbosity	scripts/upload.py	/^verbosity = 1$/;"	v
vsnprintf	src/gtest.cc	/^# define vsnprintf /;"	d	file:
wait_calls_	test/googletest-death-test-test.cc	/^  int wait_calls_;$/;"	m	class:__anon28::MockDeathTestFactory	file:
wait_event_	test/googletest-port-test.cc	/^  AutoHandle wait_event_;$/;"	m	class:testing::internal::DestructorCall	file:
write_fd	include/gtest/internal/gtest-death-test-internal.h	/^  int write_fd() const { return write_fd_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
write_fd	src/gtest-death-test.cc	/^  int write_fd() const { return write_fd_; }$/;"	f	class:testing::internal::DeathTestImpl
write_fd_	include/gtest/internal/gtest-death-test-internal.h	/^  int write_fd_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
write_fd_	src/gtest-death-test.cc	/^  int write_fd_;$/;"	m	class:testing::internal::DeathTestImpl	file:
write_handle_	src/gtest-death-test.cc	/^  AutoHandle write_handle_;$/;"	m	class:testing::internal::WindowsDeathTest	file:
x	test/googletest-param-test-test.cc	/^  int x;$/;"	m	struct:CustomStruct	file:
x	test/googletest-printers-test.cc	/^  char x;$/;"	m	struct:testing::gtest_printers_test::const_iterator	file:
x	test/googletest-printers-test.cc	/^  char x;$/;"	m	struct:testing::gtest_printers_test::iterator	file:
x	test/gtest_unittest.cc	/^  int x() const { return x_; }$/;"	f	class:Base
x	test/production.h	/^  int x() const { return x_; }$/;"	f	class:PrivateCode
x_	test/gtest_unittest.cc	/^  int x_;$/;"	m	class:Base	file:
x_	test/production.h	/^  int x_;$/;"	m	class:PrivateCode
xy_	test/googletest-printers-test.cc	/^  char xy_[8];$/;"	m	class:foo::UnprintableInFoo	file:
z	test/googletest-printers-test.cc	/^  double z() const { return z_; }$/;"	f	class:foo::UnprintableInFoo
z_	test/googletest-printers-test.cc	/^  double z_;$/;"	m	class:foo::UnprintableInFoo	file:
~AbstractSocketWriter	src/gtest-internal-inl.h	/^    virtual ~AbstractSocketWriter() {}$/;"	f	class:testing::internal::StreamingListener::AbstractSocketWriter
~Arguments	src/gtest-death-test.cc	/^  ~Arguments() {$/;"	f	class:testing::internal::Arguments
~AssertHelper	src/gtest.cc	/^AssertHelper::~AssertHelper() {$/;"	f	class:testing::internal::AssertHelper
~AutoHandle	src/gtest-port.cc	/^AutoHandle::~AutoHandle() {$/;"	f	class:testing::internal::AutoHandle
~Base	test/googletest-port-test.cc	/^  virtual ~Base() {}$/;"	f	class:testing::internal::Base
~CapturedStream	src/gtest-port.cc	/^  ~CapturedStream() {$/;"	f	class:testing::internal::CapturedStream
~DeathTest	include/gtest/internal/gtest-death-test-internal.h	/^  virtual ~DeathTest() { }$/;"	f	class:testing::internal::DeathTest
~DeathTestFactory	include/gtest/internal/gtest-death-test-internal.h	/^  virtual ~DeathTestFactory() { }$/;"	f	class:testing::internal::DeathTestFactory
~DestructorTracker	test/googletest-port-test.cc	/^  ~DestructorTracker() {$/;"	f	class:testing::internal::DestructorTracker
~Environment	include/gtest/gtest.h	/^  virtual ~Environment() {}$/;"	f	class:testing::Environment
~Foo	test/googletest-printers-test.cc	/^  virtual ~Foo() {}$/;"	f	struct:testing::gtest_printers_test::Foo
~GTestFlagSaver	src/gtest-internal-inl.h	/^  ~GTestFlagSaver() {$/;"	f	class:testing::internal::GTestFlagSaver
~GTestLog	src/gtest-port.cc	/^GTestLog::~GTestLog() {$/;"	f	class:testing::internal::GTestLog
~GTestMutexLock	include/gtest/internal/gtest-port.h	/^  ~GTestMutexLock() { mutex_->Unlock(); }$/;"	f	class:testing::internal::GTestMutexLock
~HasNewFatalFailureHelper	src/gtest-test-part.cc	/^HasNewFatalFailureHelper::~HasNewFatalFailureHelper() {$/;"	f	class:testing::internal::HasNewFatalFailureHelper
~InternalRunDeathTestFlag	include/gtest/internal/gtest-death-test-internal.h	/^  ~InternalRunDeathTestFlag() {$/;"	f	class:testing::internal::InternalRunDeathTestFlag
~MatchResultListener	include/gtest/gtest-matchers.h	/^inline MatchResultListener::~MatchResultListener() {$/;"	f	class:testing::MatchResultListener
~MatcherBase	include/gtest/gtest-matchers.h	/^  virtual ~MatcherBase() {}$/;"	f	class:testing::internal::MatcherBase
~MatcherDescriberInterface	include/gtest/gtest-matchers.h	/^  virtual ~MatcherDescriberInterface() {}$/;"	f	class:testing::MatcherDescriberInterface
~MemoryIsNotDeallocated	src/gtest-port.cc	/^  ~MemoryIsNotDeallocated() {$/;"	f	class:testing::internal::__anon19::MemoryIsNotDeallocated
~Mutex	include/gtest/internal/gtest-port.h	/^  ~Mutex() {$/;"	f	class:testing::internal::Mutex
~Mutex	src/gtest-port.cc	/^Mutex::~Mutex() {$/;"	f	class:testing::internal::Mutex
~MyString	samples/sample2.h	/^  ~MyString() { delete[] c_string_; }$/;"	f	class:MyString
~NativeArray	include/gtest/internal/gtest-internal.h	/^  ~NativeArray() {$/;"	f	class:testing::internal::NativeArray
~Notification	include/gtest/internal/gtest-port.h	/^  ~Notification() {$/;"	f	class:testing::internal::Notification
~OsStackTraceGetterInterface	src/gtest-internal-inl.h	/^  virtual ~OsStackTraceGetterInterface() {}$/;"	f	class:testing::internal::OsStackTraceGetterInterface
~ParamGeneratorInterface	include/gtest/internal/gtest-param-util.h	/^  virtual ~ParamGeneratorInterface() {}$/;"	f	class:testing::internal::ParamGeneratorInterface
~ParamIteratorInterface	include/gtest/internal/gtest-param-util.h	/^  virtual ~ParamIteratorInterface() {}$/;"	f	class:testing::internal::ParamIteratorInterface
~ParameterizedTestSuiteInfoBase	include/gtest/internal/gtest-param-util.h	/^  virtual ~ParameterizedTestSuiteInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestSuiteInfoBase
~ParameterizedTestSuiteRegistry	include/gtest/internal/gtest-param-util.h	/^  ~ParameterizedTestSuiteRegistry() {$/;"	f	class:testing::internal::ParameterizedTestSuiteRegistry
~PrimeTable	samples/prime_tables.h	/^  virtual ~PrimeTable() {}$/;"	f	class:PrimeTable
~Queue	samples/sample3-inl.h	/^  ~Queue() { Clear(); }$/;"	f	class:Queue
~RE	src/gtest-port.cc	/^RE::~RE() {$/;"	f	class:testing::internal::RE
~ReplaceDeathTestFactory	test/googletest-death-test-test.cc	/^  ~ReplaceDeathTestFactory() {$/;"	f	class:testing::internal::ReplaceDeathTestFactory
~ReturnSentinel	include/gtest/internal/gtest-death-test-internal.h	/^    ~ReturnSentinel() { test_->Abort(TEST_ENCOUNTERED_RETURN_STATEMENT); }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
~Runnable	include/gtest/internal/gtest-port.h	/^    virtual ~Runnable() {}$/;"	f	class:testing::internal::ThreadWithParamBase::Runnable
~RunnableImpl	include/gtest/internal/gtest-port.h	/^    virtual ~RunnableImpl() {}$/;"	f	class:testing::internal::ThreadWithParam::RunnableImpl
~ScopedFakeTestPartResultReporter	src/gtest.cc	/^ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {$/;"	f	class:testing::ScopedFakeTestPartResultReporter
~ScopedPrematureExitFile	src/gtest.cc	/^  ~ScopedPrematureExitFile() {$/;"	f	class:testing::internal::ScopedPrematureExitFile
~SehExceptionInDestructorTest	test/googletest-catch-exceptions-test_.cc	/^  ~SehExceptionInDestructorTest() { RaiseException(42, 0, 0, NULL); }$/;"	f	class:SehExceptionInDestructorTest
~SingleFailureChecker	src/gtest.cc	/^SingleFailureChecker::~SingleFailureChecker() {$/;"	f	class:testing::internal::SingleFailureChecker
~StreamableInGlobal	test/googletest-printers-test.cc	/^  virtual ~StreamableInGlobal() {}$/;"	f	class:StreamableInGlobal
~Test	src/gtest.cc	/^Test::~Test() {$/;"	f	class:testing::Test
~TestEventListener	include/gtest/gtest.h	/^  virtual ~TestEventListener() {}$/;"	f	class:testing::TestEventListener
~TestEventListeners	src/gtest.cc	/^TestEventListeners::~TestEventListeners() { delete repeater_; }$/;"	f	class:testing::TestEventListeners
~TestEventRepeater	src/gtest.cc	/^TestEventRepeater::~TestEventRepeater() {$/;"	f	class:testing::internal::TestEventRepeater
~TestFactoryBase	include/gtest/internal/gtest-internal.h	/^  virtual ~TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
~TestInfo	src/gtest.cc	/^TestInfo::~TestInfo() { delete factory_; }$/;"	f	class:testing::TestInfo
~TestMetaFactoryBase	include/gtest/internal/gtest-param-util.h	/^  virtual ~TestMetaFactoryBase() {}$/;"	f	class:testing::internal::TestMetaFactoryBase
~TestPartResultReporterInterface	include/gtest/gtest-test-part.h	/^  virtual ~TestPartResultReporterInterface() {}$/;"	f	class:testing::TestPartResultReporterInterface
~TestResult	src/gtest.cc	/^TestResult::~TestResult() {$/;"	f	class:testing::TestResult
~TestSuite	src/gtest.cc	/^TestSuite::~TestSuite() {$/;"	f	class:testing::TestSuite
~ThreadLocal	include/gtest/internal/gtest-port.h	/^  ~ThreadLocal() { ThreadLocalRegistry::OnThreadLocalDestroyed(this); }$/;"	f	class:testing::internal::ThreadLocal
~ThreadLocal	include/gtest/internal/gtest-port.h	/^  ~ThreadLocal() {$/;"	f	class:testing::internal::ThreadLocal
~ThreadLocalBase	include/gtest/internal/gtest-port.h	/^  virtual ~ThreadLocalBase() {}$/;"	f	class:testing::internal::ThreadLocalBase
~ThreadLocalValueHolderBase	include/gtest/internal/gtest-port.h	/^  virtual ~ThreadLocalValueHolderBase() {}$/;"	f	class:testing::internal::ThreadLocalValueHolderBase
~ThreadWithParam	include/gtest/internal/gtest-port.h	/^  virtual ~ThreadWithParam() {}$/;"	f	class:testing::internal::ThreadWithParam
~ThreadWithParamBase	include/gtest/internal/gtest-port.h	/^  virtual ~ThreadWithParamBase() {}$/;"	f	class:testing::internal::ThreadWithParamBase
~ThreadWithParamBase	src/gtest-port.cc	/^ThreadWithParamBase::~ThreadWithParamBase() {$/;"	f	class:testing::internal::ThreadWithParamBase
~UnitTest	src/gtest.cc	/^UnitTest::~UnitTest() {$/;"	f	class:testing::UnitTest
~UnitTestImpl	src/gtest.cc	/^UnitTestImpl::~UnitTestImpl() {$/;"	f	class:testing::internal::UnitTestImpl
~ValueHolderFactory	include/gtest/internal/gtest-port.h	/^    virtual ~ValueHolderFactory() {}$/;"	f	class:testing::internal::ThreadLocal::ValueHolderFactory
~WithParamInterface	include/gtest/gtest.h	/^  virtual ~WithParamInterface() {}$/;"	f	class:testing::WithParamInterface
